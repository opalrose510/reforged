###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class Arc(BaseModel):
    seed: "ArcSeed"
    situations: List["Situation"]

class ArcSeed(BaseModel):
    title: str
    core_conflict: str
    theme_tags: List[str]
    tone: str
    factions_involved: List[str]
    internal_hint: str
    internal_justification: str

class BridgeNode(BaseModel):
    source_situation_id: str
    target_situation_id: str
    shared_context_tags: List[str]
    shared_factions: List[str]
    shared_locations: List[str]
    shared_themes: List[str]
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class BridgeSituation(BaseModel):
    id: str
    description: str
    choices: List["Choice"]
    requirements: Dict[str, int]
    consequences: Dict[str, str]
    source_situation_ids: List[str]
    target_situation_ids: List[str]
    shared_context_tags: List[str]
    bridge_type: str
    internal_hint: str
    internal_justification: str

class BridgeableSituation(BaseModel):
    id: str
    context_tags: List[str]
    factions: List[str]
    locations: List[str]
    themes: List[str]
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class Choice(BaseModel):
    id: str
    text: str
    requirements: Dict[str, int]
    attributes_gained: List["PlayerAttribute"]
    attributes_lost: List[str]
    stat_changes: Dict[str, int]
    next_situation_id: str
    internal_hint: str
    internal_justification: str

class District(BaseModel):
    id: str
    traits: List[str]
    hazards: List[str]
    factions: List[str]
    description: str
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class Event(BaseModel):
    id: str
    title: str
    description: str
    type: str
    triggers: List[str]
    consequences: Dict[str, str]
    affected_npcs: List[str]
    affected_locations: List[str]
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class Faction(BaseModel):
    name: str
    ideology: Optional[str] = None
    territory: Optional[List[str]] = None
    influence_level: int
    relationships: Optional[Dict[str, str]] = None
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class Item(BaseModel):
    id: str
    name: str
    type: str
    description: str
    effects: Dict[str, int]
    requirements: Dict[str, int]
    rarity: str
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class Location(BaseModel):
    id: str
    name: str
    type: str
    description: str
    traits: List[str]
    hazards: List[str]
    connected_locations: List[str]
    npcs_present: List[str]
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class NPC(BaseModel):
    id: str
    name: str
    role: str
    description: str
    personality_traits: List[str]
    relationships: Dict[str, str]
    faction_affiliations: List[str]
    location_id: str
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class PlayerAttribute(BaseModel):
    id: str
    type: str
    description: str
    stat_mods: Optional[Dict[str, int]] = None

class PlayerProfile(BaseModel):
    narrative_summary: str
    key_traits: List[str]
    background_hints: List[str]

class PlayerState(BaseModel):
    name: str
    stats: "PlayerStats"
    attributes: List["PlayerAttribute"]
    profile: "PlayerProfile"
    history: List[str]

class PlayerStats(BaseModel):
    might: int
    insight: int
    nimbleness: int
    destiny: int
    savvy: int
    expertise: int
    tenacity: int
    station: int
    opulence: int
    celebrity: int
    integrity: int
    allure: int
    lineage: int

class Quest(BaseModel):
    id: str
    title: str
    description: str
    type: str
    objectives: List[str]
    rewards: Dict[str, int]
    requirements: Dict[str, int]
    related_npcs: List[str]
    related_locations: List[str]
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class Resume(BaseModel):
    name: str
    email: str
    experience: List[str]
    skills: List[str]

class Situation(BaseModel):
    id: str
    description: str
    choices: List["Choice"]
    requirements: Dict[str, int]
    consequences: Dict[str, str]
    bridgeable: bool
    context_tags: List[str]
    arc_outcome: Optional[str] = None
    internal_hint: str
    internal_justification: str

class Technology(BaseModel):
    name: str
    description: str
    impact: str
    limitations: str
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class WorldContext(BaseModel):
    seed: "WorldSeed"
    technologies: List["Technology"]
    factions: List["Faction"]
    districts: List["District"]
    npcs: List["NPC"]
    tension_sliders: Dict[str, int]
    world_root: "Situation"

class WorldSeed(BaseModel):
    name: str
    themes: List[str]
    high_concept: str
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None
