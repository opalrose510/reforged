###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Dict, List, Optional, Union, cast
from typing_extensions import Literal

import baml_py

from . import _baml
from .types import Checked, Check


class LlmResponseParser:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AugmentSituationChoices(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.Choice]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "AugmentSituationChoices",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.Choice], parsed)
    
    def CheckBridgeAttributeNeeds(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> bool:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "CheckBridgeAttributeNeeds",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(bool, parsed)
    
    def CheckChoiceAttributeNeeds(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> bool:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "CheckChoiceAttributeNeeds",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(bool, parsed)
    
    def CheckFactionNeeds(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> bool:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "CheckFactionNeeds",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(bool, parsed)
    
    def CheckTechnologyNeeds(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> bool:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "CheckTechnologyNeeds",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(bool, parsed)
    
    def ExpandArcSituations(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.Situation]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "ExpandArcSituations",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.Situation], parsed)
    
    def FindBridgeConnections(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.BridgeNode]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "FindBridgeConnections",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.BridgeNode], parsed)
    
    def GenerateArcSeed(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.ArcSeed:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateArcSeed",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.ArcSeed, parsed)
    
    def GenerateArcTitles(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateArcTitles",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[str], parsed)
    
    def GenerateBridgeAttribute(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.PlayerAttribute:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateBridgeAttribute",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.PlayerAttribute, parsed)
    
    def GenerateBridgeSituations(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.Situation]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateBridgeSituations",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.Situation], parsed)
    
    def GenerateChoiceAttribute(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.PlayerAttribute:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateChoiceAttribute",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.PlayerAttribute, parsed)
    
    def GenerateChoiceSituationResult(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.Situation:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateChoiceSituationResult",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.Situation, parsed)
    
    def GenerateDistricts(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.District]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateDistricts",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.District], parsed)
    
    def GenerateEventsForSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.Event]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateEventsForSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.Event], parsed)
    
    def GenerateFaction(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.Faction:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateFaction",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.Faction, parsed)
    
    def GenerateInitialAttributes(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.PlayerAttribute]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateInitialAttributes",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.PlayerAttribute], parsed)
    
    def GenerateItemsForSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.Item]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateItemsForSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.Item], parsed)
    
    def GenerateLocationsForSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.Location]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateLocationsForSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.Location], parsed)
    
    def GenerateMissingSituationsForChoice(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.Situation:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateMissingSituationsForChoice",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.Situation, parsed)
    
    def GenerateNPCsForSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.NPC]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateNPCsForSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.NPC], parsed)
    
    def GeneratePlayerProfile(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.PlayerProfile:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GeneratePlayerProfile",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.PlayerProfile, parsed)
    
    def GenerateQuestsForSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.Quest]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateQuestsForSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.Quest], parsed)
    
    def GenerateRootSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.Situation:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateRootSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.Situation, parsed)
    
    def GenerateSituationForChoice(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.Situation:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateSituationForChoice",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.Situation, parsed)
    
    def GenerateTechnology(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.Technology:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateTechnology",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.Technology, parsed)
    
    def GetDefaultStatDescriptors(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.StatDescriptors:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GetDefaultStatDescriptors",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.StatDescriptors, parsed)
    
    def GetStatNarrative(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> str:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GetStatNarrative",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(str, parsed)
    
    def IdentifyBridgeableSituations(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.BridgeableSituation]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "IdentifyBridgeableSituations",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.BridgeableSituation], parsed)
    
    def IdentifyMissingSituations(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "IdentifyMissingSituations",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[str], parsed)
    
    def InitializePlayerStats(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.types.PlayerStats:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "InitializePlayerStats",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.types.PlayerStats, parsed)
    
    def SelectGenerationTool(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> str:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "SelectGenerationTool",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(str, parsed)
    
    def SelectWorldTool(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[Union[_baml.types.GetTechnologyDetails, _baml.types.GetFactionDetails, _baml.types.GetDistrictDetails, _baml.types.GetNPCDetails]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "SelectWorldTool",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[Union[_baml.types.GetTechnologyDetails, _baml.types.GetFactionDetails, _baml.types.GetDistrictDetails, _baml.types.GetNPCDetails]], parsed)
    
    def ValidateBridgeConnections(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.types.BridgeNode]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "ValidateBridgeConnections",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        False,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.types.BridgeNode], parsed)
    


class LlmStreamParser:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AugmentSituationChoices(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.Choice]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "AugmentSituationChoices",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.Choice], parsed)
    
    def CheckBridgeAttributeNeeds(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Optional[bool]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "CheckBridgeAttributeNeeds",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Optional[bool], parsed)
    
    def CheckChoiceAttributeNeeds(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Optional[bool]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "CheckChoiceAttributeNeeds",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Optional[bool], parsed)
    
    def CheckFactionNeeds(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Optional[bool]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "CheckFactionNeeds",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Optional[bool], parsed)
    
    def CheckTechnologyNeeds(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Optional[bool]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "CheckTechnologyNeeds",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Optional[bool], parsed)
    
    def ExpandArcSituations(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.Situation]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "ExpandArcSituations",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.Situation], parsed)
    
    def FindBridgeConnections(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.BridgeNode]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "FindBridgeConnections",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.BridgeNode], parsed)
    
    def GenerateArcSeed(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.ArcSeed:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateArcSeed",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.ArcSeed, parsed)
    
    def GenerateArcTitles(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[Optional[str]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateArcTitles",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[Optional[str]], parsed)
    
    def GenerateBridgeAttribute(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.PlayerAttribute:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateBridgeAttribute",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.PlayerAttribute, parsed)
    
    def GenerateBridgeSituations(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.Situation]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateBridgeSituations",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.Situation], parsed)
    
    def GenerateChoiceAttribute(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.PlayerAttribute:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateChoiceAttribute",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.PlayerAttribute, parsed)
    
    def GenerateChoiceSituationResult(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.Situation:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateChoiceSituationResult",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.Situation, parsed)
    
    def GenerateDistricts(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.District]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateDistricts",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.District], parsed)
    
    def GenerateEventsForSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.Event]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateEventsForSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.Event], parsed)
    
    def GenerateFaction(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.Faction:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateFaction",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.Faction, parsed)
    
    def GenerateInitialAttributes(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.PlayerAttribute]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateInitialAttributes",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.PlayerAttribute], parsed)
    
    def GenerateItemsForSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.Item]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateItemsForSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.Item], parsed)
    
    def GenerateLocationsForSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.Location]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateLocationsForSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.Location], parsed)
    
    def GenerateMissingSituationsForChoice(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.Situation:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateMissingSituationsForChoice",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.Situation, parsed)
    
    def GenerateNPCsForSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.NPC]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateNPCsForSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.NPC], parsed)
    
    def GeneratePlayerProfile(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.PlayerProfile:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GeneratePlayerProfile",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.PlayerProfile, parsed)
    
    def GenerateQuestsForSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.Quest]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateQuestsForSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.Quest], parsed)
    
    def GenerateRootSituation(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.Situation:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateRootSituation",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.Situation, parsed)
    
    def GenerateSituationForChoice(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.Situation:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateSituationForChoice",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.Situation, parsed)
    
    def GenerateTechnology(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.Technology:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GenerateTechnology",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.Technology, parsed)
    
    def GetDefaultStatDescriptors(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.StatDescriptors:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GetDefaultStatDescriptors",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.StatDescriptors, parsed)
    
    def GetStatNarrative(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Optional[str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "GetStatNarrative",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Optional[str], parsed)
    
    def IdentifyBridgeableSituations(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.BridgeableSituation]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "IdentifyBridgeableSituations",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.BridgeableSituation], parsed)
    
    def IdentifyMissingSituations(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[Optional[str]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "IdentifyMissingSituations",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[Optional[str]], parsed)
    
    def InitializePlayerStats(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> _baml.partial_types.PlayerStats:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "InitializePlayerStats",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(_baml.partial_types.PlayerStats, parsed)
    
    def SelectGenerationTool(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> Optional[str]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "SelectGenerationTool",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(Optional[str], parsed)
    
    def SelectWorldTool(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[Optional[Union[_baml.partial_types.GetTechnologyDetails, _baml.partial_types.GetFactionDetails, _baml.partial_types.GetDistrictDetails, _baml.partial_types.GetNPCDetails]]]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "SelectWorldTool",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[Optional[Union[_baml.partial_types.GetTechnologyDetails, _baml.partial_types.GetFactionDetails, _baml.partial_types.GetDistrictDetails, _baml.partial_types.GetNPCDetails]]], parsed)
    
    def ValidateBridgeConnections(
        self,
        llm_response: str,
        baml_options: _baml.BamlCallOptionsModApi = {},
    ) -> List[_baml.partial_types.BridgeNode]:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      env = _baml.env_vars_to_dict(baml_options.get("env", {}))

      parsed = self.__runtime.parse_llm_response(
        "ValidateBridgeConnections",
        llm_response,
        _baml.types,
        _baml.types,
        _baml.partial_types,
        True,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        env,
      )

      return cast(List[_baml.partial_types.BridgeNode], parsed)
    


__all__ = ["LlmResponseParser", "LlmStreamParser"]