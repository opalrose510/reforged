###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "arcs.baml": "// Core data models for narrative arcs\nclass ArcSeed {\n  title string\n  core_conflict string\n  theme_tags string[]\n  tone string\n  factions_involved string[]\n  internal_hint string @description(\"Clue for future model calls to guide generation\")\n  internal_justification string @description(\"Reasoning for this arc's creation and its narrative purpose\")\n}\n\nclass Arc {\n  seed ArcSeed\n  situations Situation[]\n}\n\nclass Situation {\n  id string\n  description string\n  choices Choice[]\n  requirements map<string, int>  // stat_name -> minimum_value\n  consequences map<string, string>  // choice_id -> next_situation_id\n  bridgeable bool\n  context_tags string[]\n  arc_outcome string? @description(\"Set when this situation represents the end of an arc storyline\")\n  internal_hint string @description(\"Clue for future model calls to guide generation\")\n  internal_justification string @description(\"Reasoning for this situation's creation and its narrative purpose\")\n}\n\nclass Choice {\n  id string\n  text string\n  requirements map<string, int>  // stat_name -> minimum_value\n  attributes_gained PlayerAttribute[]\n  attributes_lost string[]  // IDs of attributes to remove\n  stat_changes map<string, int>  // stat_name -> change_value\n  next_situation_id string\n  internal_hint string @description(\"Clue for future model calls to guide generation\")\n  internal_justification string @description(\"Reasoning for this choice's creation and its narrative purpose\")\n}\n\nclass BridgeSituation {\n  id string\n  description string\n  choices Choice[]\n  requirements map<string, int>  // stat_name -> minimum_value\n  consequences map<string, string>  // choice_id -> next_situation_id\n  source_situation_ids string[] @description(\"The situations this bridge can connect from\")\n  target_situation_ids string[] @description(\"The situations this bridge can connect to\")\n  shared_context_tags string[] @description(\"Context tags that justify this bridge connection\")\n  bridge_type string @description(\"Type of bridge: 'multi_source', 'multi_target', or 'connector'\")\n  internal_hint string @description(\"Clue for future model calls to guide generation\")\n  internal_justification string @description(\"Reasoning for this bridge's creation and its narrative purpose\")\n}\n\n// Function to check if choice needs new attribute\nfunction CheckChoiceAttributeNeeds(choice: Choice, world_context: WorldContext) -> bool {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Determine if this choice should create a new attribute. Answer ONLY with 'true' or 'false'.\n    \n    Choice:\n    {{ choice }}\n    \n    World Context:\n    {{ world_context }}\n    \n    Consider:\n    1. Does the choice have significant narrative impact?\n    2. Would an attribute help track the consequences?\n    3. Is this a meaningful character development moment?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate attribute for choice\nfunction GenerateChoiceAttribute(choice: Choice, world_context: WorldContext) -> PlayerAttribute {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate a new attribute based on the choice and world context.\n    \n    Choice:\n    {{ choice }}\n    \n    World Context:\n    {{ world_context }}\n    \n    The attribute should:\n    1. Represent the meaningful consequences of the choice\n    2. Have appropriate stat modifications\n    3. Be consistent with the world's themes\n    4. Track character development\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate arc titles\nfunction GenerateArcTitles(world_context: WorldContext, player_state: PlayerState) -> string[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate three distinct arc titles based on the world context and player state.\n    Return ONLY the titles, one per line.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Each title should:\n    1. Be evocative and memorable\n    2. Hint at a unique core conflict\n    3. Reflect the world's themes\n    4. Be appropriate for the player's starting state\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate a single arc seed\nfunction GenerateArcSeed(world_context: WorldContext, player_state: PlayerState, title: string) -> ArcSeed {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate a complete arc seed based on the given title, world context, and player state.\n    \n    Title:\n    {{ title }}\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    The arc seed should:\n    1. Develop the core conflict suggested by the title\n    2. Involve appropriate factions\n    3. Explore relevant aspects of the world's themes\n    4. Be appropriate for the player's starting state\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate root situation for an arc\nfunction GenerateRootSituation(world_context: WorldContext, player_state: PlayerState, arc_seed: ArcSeed) -> Situation {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate the root situation for an arc based on the world context, player state, and arc seed.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Arc Seed:\n    {{ arc_seed }}\n    \n    The root situation should:\n    1. Introduce the core conflict\n    2. Set up the initial stakes\n    3. Provide meaningful choices that align with player stats\n    4. Lead naturally into potential branching paths\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to expand arc with additional situations\nfunction ExpandArcSituations(world_context: WorldContext, player_state: PlayerState, arc: Arc) -> Situation[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate additional situations to expand the arc based on the world context, player state, and existing arc.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Current Arc:\n    {{ arc }}\n    \n    New situations should:\n    1. Build on previous choices and consequences\n    2. Maintain narrative coherence\n    3. Provide meaningful progression\n    4. Include appropriate stat requirements and consequences\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to augment a situation with new choices\nfunction AugmentSituationWithChoices(world_context: WorldContext, player_state: PlayerState, situation: Situation, existing_situations: Situation[]) -> Choice[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate new choices for an existing situation based on the world context and player state.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Target Situation:\n    {{ situation }}\n    \n    Existing Situations (for reference):\n    {{ existing_situations }}\n    \n    New choices should:\n    1. Expand meaningful narrative branches\n    2. Provide different paths through the story\n    3. Respect player stats and existing context\n    4. Create interesting consequences and next situations\n    5. Not duplicate existing choice functionality\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate a situation for a specific choice\nfunction GenerateSituationForChoice(world_context: WorldContext, player_state: PlayerState, choice: Choice, parent_situation: Situation, existing_situations: Situation[]) -> Situation {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate a new situation that follows from a specific choice.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Choice That Leads Here:\n    {{ choice }}\n    \n    Parent Situation:\n    {{ parent_situation }}\n    \n    Existing Situations (for reference):\n    {{ existing_situations }}\n    \n    The new situation should:\n    1. Logically follow from the choice made\n    2. Reflect the consequences of that choice\n    3. Provide meaningful new choices or be a leaf node\n    4. Have appropriate stat requirements\n    5. Include relevant context tags for potential bridging\n    6. Set arc_outcome if this represents the end of a storyline\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to check if a situation is a leaf node\nfunction CheckIfLeafNode(situation: Situation, world_context: WorldContext) -> bool {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Determine if this situation should be a leaf node (end of storyline). Answer ONLY with 'true' or 'false'.\n    \n    Situation:\n    {{ situation }}\n    \n    World Context:\n    {{ world_context }}\n    \n    A situation is a leaf node if:\n    1. It has an arc_outcome field set\n    2. It represents a natural conclusion to the storyline\n    3. It has no meaningful choices to add\n    4. The narrative has reached a satisfying resolution or endpoint\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate bridge situations between existing situations\nfunction GenerateBridgeSituation(world_context: WorldContext, player_state: PlayerState, source_situations: Situation[], target_situations: Situation[], all_situations: Situation[]) -> BridgeSituation {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate a bridge situation that can connect multiple source situations to multiple target situations.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Source Situations:\n    {{ source_situations }}\n    \n    Target Situations:\n    {{ target_situations }}\n    \n    All Existing Situations (for context):\n    {{ all_situations }}\n    \n    The bridge situation should:\n    1. Provide logical narrative connections between sources and targets\n    2. Have meaningful choices that can lead to different target situations\n    3. Respect the context and themes of all connected situations\n    4. Include shared context tags that justify the connections\n    5. Specify the appropriate bridge_type ('multi_source', 'multi_target', or 'connector')\n    6. Create interesting narrative opportunities without soft-locking the player\n    7. Allow the player to abandon one storyline for another naturally\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to add a bridge choice to an existing situation\nfunction AddBridgeChoiceToSituation(world_context: WorldContext, player_state: PlayerState, source_situation: Situation, target_situation: Situation, all_situations: Situation[]) -> Choice {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate a new choice for an existing situation that creates a bridge to another situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Source Situation (to add choice to):\n    {{ source_situation }}\n    \n    Target Situation (choice leads to):\n    {{ target_situation }}\n    \n    All Existing Situations (for context):\n    {{ all_situations }}\n    \n    The bridge choice should:\n    1. Fit naturally within the source situation's context\n    2. Provide a plausible explanation for transitioning to the target situation\n    3. Respect the narrative flow and player agency\n    4. Have appropriate stat requirements\n    5. Include meaningful consequences (stat changes, attributes)\n    6. Not feel forced or artificial\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to identify potential bridge connections (situation to situation mapping)\nfunction IdentifyDirectBridgeConnections(world_context: WorldContext, all_situations: Situation[]) -> map<string, string[]> {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Analyze all situations and identify potential direct bridge connections where one situation can have a choice added that leads to another.\n    Return a map where keys are source situation IDs and values are arrays of target situation IDs.\n    \n    World Context:\n    {{ world_context }}\n    \n    All Situations:\n    {{ all_situations }}\n    \n    Consider connections based on:\n    1. Shared context tags\n    2. Similar themes or factions\n    3. Narrative opportunities for transitions\n    4. Player agency and meaningful choices\n    5. Avoiding soft-lock situations (cycles with no escape)\n    6. Natural story flow and logical transitions\n    \n    Focus on connections that would enhance the story and provide meaningful player choice.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to identify groups of related situations for multi-target bridges\nfunction IdentifyBridgeGroups(world_context: WorldContext, all_situations: Situation[]) -> string[][] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Analyze all situations and identify groups of related situations that could be reached from the same bridge situation.\n    Return a list of lists, where each inner list contains situation IDs that are thematically related and could be accessed from a common bridge.\n    \n    World Context:\n    {{ world_context }}\n    \n    All Situations:\n    {{ all_situations }}\n    \n    Group situations that:\n    1. Share similar themes or contexts\n    2. Could be accessed through a common narrative setup\n    3. Represent different paths within the same general storyline\n    4. Would benefit from a shared entry point\n    5. Are not already directly connected\n    \n    Each group should contain 2-4 situations maximum.\n    Focus on groups that would create meaningful narrative choice points.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to check if all situations are reachable from world root\nfunction CheckReachabilityFromRoot(world_root: Situation, all_situations: Situation[], all_bridges: BridgeSituation[]) -> string[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Analyze the situation graph and return a list of situation IDs that are NOT reachable from the world root.\n    \n    World Root:\n    {{ world_root }}\n    \n    All Situations:\n    {{ all_situations }}\n    \n    All Bridge Situations:\n    {{ all_bridges }}\n    \n    Trace paths from the world root through all choices and consequences to determine reachability.\n    Consider both direct situation connections and bridge situation connections.\n    \n    Return only the IDs of situations that cannot be reached from the world root.\n    If all situations are reachable, return an empty array.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to detect soft-lock cycles in bridge connections\nfunction DetectSoftLockCycles(all_situations: Situation[], all_bridges: BridgeSituation[]) -> string[][] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Analyze the situation and bridge graph to detect potential soft-lock cycles where players could get trapped.\n    Return a list of cycles, where each cycle is a list of situation IDs that form a closed loop with no escape.\n    \n    All Situations:\n    {{ all_situations }}\n    \n    All Bridge Situations:\n    {{ all_bridges }}\n    \n    A soft-lock cycle exists when:\n    1. A group of situations only connect to each other\n    2. No situation in the group has choices leading outside the group\n    3. No situation in the group has an arc_outcome (leaf node)\n    4. Players entering the cycle cannot progress or exit\n    \n    Return cycles as arrays of situation IDs. If no cycles exist, return an empty array.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for arc generation\ntest arc_title_generation {\n  functions [GenerateArcTitles]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    player_state {\n      stats {\n        might 10\n        insight 10\n        nimbleness 10\n        destiny 10\n        savvy 10\n        expertise 10\n        tenacity 10\n        station 10\n        opulence 10\n        celebrity 10\n        integrity 10\n        allure 10\n        lineage 10\n      }\n      attributes []\n      profile {\n        narrative_summary \"A newcomer to Neon Haven, seeking their place in the city's complex web of memory trading and identity manipulation.\"\n        key_traits [\"curious\", \"adaptable\"]\n        background_hints [\"recent arrival\", \"seeking opportunity\"]\n      }\n    }\n  }\n}\n\ntest arc_seed_generation {\n  functions [GenerateArcSeed]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    player_state {\n      stats {\n        might 10\n        insight 10\n        nimbleness 10\n        destiny 10\n        savvy 10\n        expertise 10\n        tenacity 10\n        station 10\n        opulence 10\n        celebrity 10\n        integrity 10\n        allure 10\n        lineage 10\n      }\n      attributes []\n      profile {\n        narrative_summary \"A newcomer to Neon Haven, seeking their place in the city's complex web of memory trading and identity manipulation.\"\n        key_traits [\"curious\", \"adaptable\"]\n        background_hints [\"recent arrival\", \"seeking opportunity\"]\n      }\n    }\n    title \"The Memory Broker's Gambit\"\n  }\n}\n\ntest situation_generation {\n  functions [GenerateRootSituation, ExpandArcSituations]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    player_state {\n      stats {\n        might 10\n        insight 10\n        nimbleness 10\n        destiny 10\n        savvy 10\n        expertise 10\n        tenacity 10\n        station 10\n        opulence 10\n        celebrity 10\n        integrity 10\n        allure 10\n        lineage 10\n      }\n      attributes []\n      profile {\n        narrative_summary \"A newcomer to Neon Haven, seeking their place in the city's complex web of memory trading and identity manipulation.\"\n        key_traits [\"curious\", \"adaptable\"]\n        background_hints [\"recent arrival\", \"seeking opportunity\"]\n      }\n    }\n    arc_seed {\n      title \"The Memory Broker's Gambit\"\n      core_conflict \"A powerful memory broker offers the player a chance to trade their memories for power and influence\"\n      theme_tags [\"identity\", \"power\", \"trust\"]\n      tone \"noir\"\n      factions_involved [\"Memory Brokers Guild\", \"City Watch\"]\n      internal_hint \"Focus on the moral implications of memory trading\"\n      internal_justification \"This arc explores the core themes of the setting while providing meaningful choices about identity and power\"\n    }\n    arc {\n      seed {\n        title \"The Memory Broker's Gambit\"\n        core_conflict \"A powerful memory broker offers the player a chance to trade their memories for power and influence\"\n        theme_tags [\"identity\", \"power\", \"trust\"]\n        tone \"noir\"\n        factions_involved [\"Memory Brokers Guild\", \"City Watch\"]\n        internal_hint \"Focus on the moral implications of memory trading\"\n        internal_justification \"This arc explores the core themes of the setting while providing meaningful choices about identity and power\"\n      }\n      situations []\n    }\n  }\n}\n\ntest attribute_generation {\n  functions [CheckChoiceAttributeNeeds, GenerateChoiceAttribute]\n  args {\n    choice {\n      id \"choice_1\"\n      text \"Accept the memory broker's offer to trade your childhood memories for power\"\n      requirements {\n        \"savvy\" 8\n        \"integrity\" 5\n      }\n      attributes_gained []\n      attributes_lost []\n      stat_changes {\n        \"savvy\" 2\n        \"integrity\" -1\n      }\n      next_situation_id \"situation_2\"\n      internal_hint \"This choice represents a major moral decision about identity\"\n      internal_justification \"This choice tests the player's willingness to sacrifice their past for power\"\n    }\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n} ",
    "bridge_nodes.baml": "// Core data models for bridge nodes\nclass BridgeNode {\n  source_situation_id string\n  target_situation_id string\n  shared_context_tags string[]\n  shared_factions string[]\n  shared_locations string[]\n  shared_themes string[]\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this bridge's creation and its narrative purpose\")\n}\n\nclass BridgeableSituation {\n  id string\n  context_tags string[]\n  factions string[]\n  locations string[]\n  themes string[]\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this situation's bridgeability and its narrative purpose\")\n}\n\n// Function to check if new attribute needed for bridge\nfunction CheckBridgeAttributeNeeds(bridge_node: BridgeNode, world_context: WorldContext) -> bool {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Determine if a new attribute needs to be created for this bridge connection. Answer ONLY with 'true' or 'false'.\n    \n    Bridge Node:\n    {{ bridge_node }}\n    \n    World Context:\n    {{ world_context }}\n    \n    Consider:\n    1. Do the shared elements suggest a new attribute?\n    2. Would this attribute enhance the narrative connection?\n    3. Is this attribute consistent with existing attributes?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate new attribute for bridge\nfunction GenerateBridgeAttribute(bridge_node: BridgeNode, world_context: WorldContext) -> PlayerAttribute {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate a new attribute based on the bridge connection and world context.\n    \n    Bridge Node:\n    {{ bridge_node }}\n    \n    World Context:\n    {{ world_context }}\n    \n    The attribute should:\n    1. Represent the connection between the situations\n    2. Have meaningful stat modifications\n    3. Be consistent with the world's themes\n    4. Enhance the narrative impact of the bridge\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to identify bridgeable situations\nfunction IdentifyBridgeableSituations(arcs: Arc[]) -> BridgeableSituation[] {\n  client \"openai/gpt-4o\"\n  prompt #\" \n    Identify all bridgeable situations from the given arcs.\n    Return ONLY situations that are marked as bridgeable.\n    \n    Arcs:\n    {{ arcs }}\n    \n    For each bridgeable situation, extract:\n    1. Context tags\n    2. Factions involved\n    3. Locations mentioned\n    4. Themes present\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to find potential bridge connections\nfunction FindBridgeConnections(bridgeable_situations: BridgeableSituation[]) -> BridgeNode[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Find potential bridge connections between situations based on shared elements.\n    \n    Bridgeable Situations:\n    {{ bridgeable_situations }}\n    \n    For each connection, identify:\n    1. Shared context tags\n    2. Shared factions\n    3. Shared locations\n    4. Shared themes\n    \n    Only create bridges that make narrative sense and enhance the story.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to validate bridge connections\nfunction ValidateBridgeConnections(bridge_nodes: BridgeNode[], arcs: Arc[], world_context: WorldContext) -> BridgeNode[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Validate the proposed bridge connections to ensure they make narrative sense.\n    \n    Proposed Bridge Nodes:\n    {{ bridge_nodes }}\n    \n    Arcs:\n    {{ arcs }}\n    \n    World Context:\n    {{ world_context }}\n    \n    Consider:\n    1. Do the connections maintain narrative coherence?\n    2. Are the shared elements meaningful?\n    3. Do the bridges enhance rather than confuse the story?\n    4. Would new attributes strengthen the connections?\n    \n    Return only the valid bridge connections.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for bridge node processing\ntest bridgeable_situation_identification {\n  functions [IdentifyBridgeableSituations]\n  args {\n    arcs [\n      {\n        seed {\n          title \"The Memory Thief\"\n          core_conflict \"identity theft\"\n          theme_tags [\"memory\", \"betrayal\"]\n          tone \"tense\"\n          factions_involved [\"Spindle Corps\"]\n          internal_hint \"Explores the consequences of memory theft\"\n          internal_justification \"This arc examines the personal and societal impact of memory manipulation\"\n        }\n        situations [\n          {\n            id \"memory_heist\"\n            description \"Breaking into a memory vault\"\n            choices []\n            requirements {}\n            consequences {}\n            bridgeable true\n            context_tags [\"heist\", \"memory_fragment\", \"security\"]\n            internal_hint \"The heist could connect to other memory-related situations\"\n            internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n          }\n        ]\n      }\n      {\n        seed {\n          title \"The Mirror Mind\"\n          core_conflict \"self-discovery\"\n          theme_tags [\"identity\", \"reflection\"]\n          tone \"mysterious\"\n          factions_involved [\"Red Branch\"]\n          internal_hint \"Focuses on identity and self-perception\"\n          internal_justification \"This arc explores how memory and identity are intertwined\"\n        }\n        situations [\n          {\n            id \"mirror_chamber\"\n            description \"Facing your reflection in the mirror chamber\"\n            choices []\n            requirements {}\n            consequences {}\n            bridgeable true\n            context_tags [\"mirrormind\", \"identity\", \"reflection\"]\n            internal_hint \"The mirror chamber could connect to other identity-related situations\"\n            internal_justification \"This situation deals with identity and reflection, making it a potential bridge point\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\ntest bridge_connection_generation {\n  functions [FindBridgeConnections]\n  args {\n    bridgeable_situations [\n      {\n        id \"memory_heist\"\n        context_tags [\"heist\", \"memory_fragment\", \"security\"]\n        factions [\"Spindle Corps\"]\n        locations [\"memory_vault\"]\n        themes [\"memory\", \"security\"]\n        internal_hint \"The heist could connect to other memory-related situations\"\n        internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n      }\n      {\n        id \"mirror_chamber\"\n        context_tags [\"mirrormind\", \"identity\", \"reflection\"]\n        factions [\"Red Branch\"]\n        locations [\"mirror_chamber\"]\n        themes [\"identity\", \"reflection\"]\n        internal_hint \"The mirror chamber could connect to other identity-related situations\"\n        internal_justification \"This situation deals with identity and reflection, making it a potential bridge point\"\n      }\n    ]\n  }\n}\n\ntest bridge_validation {\n  functions [ValidateBridgeConnections]\n  args {\n    bridge_nodes [\n      {\n        source_situation_id \"memory_heist\"\n        target_situation_id \"mirror_chamber\"\n        shared_context_tags [\"identity\"]\n        shared_factions []\n        shared_locations []\n        shared_themes [\"memory\"]\n        internal_hint \"Connects memory manipulation with identity exploration\"\n        internal_justification \"This bridge links the physical act of memory theft with the psychological impact on identity\"\n      }\n    ]\n    arcs [\n      {\n        seed {\n          title \"The Memory Thief\"\n          core_conflict \"identity theft\"\n          theme_tags [\"memory\", \"betrayal\"]\n          tone \"tense\"\n          factions_involved [\"Spindle Corps\"]\n          internal_hint \"Explores the consequences of memory theft\"\n          internal_justification \"This arc examines the personal and societal impact of memory manipulation\"\n        }\n        situations [\n          {\n            id \"memory_heist\"\n            description \"Breaking into a memory vault\"\n            choices []\n            requirements {}\n            consequences {}\n            bridgeable true\n            context_tags [\"heist\", \"memory_fragment\", \"security\"]\n            internal_hint \"The heist could connect to other memory-related situations\"\n            internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n          }\n        ]\n      }\n      {\n        seed {\n          title \"The Mirror Mind\"\n          core_conflict \"self-discovery\"\n          theme_tags [\"identity\", \"reflection\"]\n          tone \"mysterious\"\n          factions_involved [\"Red Branch\"]\n          internal_hint \"Focuses on identity and self-perception\"\n          internal_justification \"This arc explores how memory and identity are intertwined\"\n        }\n        situations [\n          {\n            id \"mirror_chamber\"\n            description \"Facing your reflection in the mirror chamber\"\n            choices []\n            requirements {}\n            consequences {}\n            bridgeable true\n            context_tags [\"mirrormind\", \"identity\", \"reflection\"]\n            internal_hint \"The mirror chamber could connect to other identity-related situations\"\n            internal_justification \"This situation deals with identity and reflection, making it a potential bridge point\"\n          }\n        ]\n      }\n    ]\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n}\n\ntest bridge_attribute_processing {\n  functions [CheckBridgeAttributeNeeds, GenerateBridgeAttribute]\n  args {\n    bridge_node {\n      source_situation_id \"memory_heist\"\n      target_situation_id \"mirror_chamber\"\n      shared_context_tags [\"identity\"]\n      shared_factions []\n      shared_locations []\n      shared_themes [\"memory\"]\n      internal_hint \"Connects memory manipulation with identity exploration\"\n      internal_justification \"This bridge links the physical act of memory theft with the psychological impact on identity\"\n    }\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n} ",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.89.0\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\n",
    "libertas.baml": "",
    "narrative_elements.baml": "// Core data models for narrative elements\nclass NPC {\n  id string\n  name string\n  role string\n  description string\n  personality_traits string[]\n  relationships map<string, string>  // npc_id -> relationship_type\n  faction_affiliations string[]  // List of faction names\n  location_id string\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this NPC's creation and its narrative purpose\")\n}\n\nclass Item {\n  id string\n  name string\n  type string  // weapon, tool, artifact, memory, etc.\n  description string\n  effects map<string, int>  // stat_name -> modifier\n  requirements map<string, int>  // stat_name -> minimum_value\n  rarity string  // common, uncommon, rare, legendary\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this item's creation and its narrative purpose\")\n}\n\nclass Location {\n  id string\n  name string\n  type string  // district, building, landmark, etc.\n  description string\n  traits string[]\n  hazards string[]\n  connected_locations string[]  // List of location IDs\n  npcs_present string[]  // List of NPC IDs\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this location's creation and its narrative purpose\")\n}\n\nclass Event {\n  id string\n  title string\n  description string\n  type string  // encounter, discovery, revelation, etc.\n  triggers string[]  // Conditions that can trigger this event\n  consequences map<string, string>  // choice_id -> outcome\n  affected_npcs string[]  // List of NPC IDs\n  affected_locations string[]  // List of location IDs\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this event's creation and its narrative purpose\")\n}\n\nclass Quest {\n  id string\n  title string\n  description string\n  type string  // main, side, faction, etc.\n  objectives string[]\n  rewards map<string, int>  // stat_name -> value\n  requirements map<string, int>  // stat_name -> minimum_value\n  related_npcs string[]  // List of NPC IDs\n  related_locations string[]  // List of location IDs\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this quest's creation and its narrative purpose\")\n}\n\n// Function to generate NPCs for a situation\nfunction GenerateNPCsForSituation(world_context: WorldContext, situation: Situation) -> NPC[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate NPCs that would be present in this situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Situation:\n    {{ situation }}\n    \n    The NPCs should:\n    1. Have clear roles in the situation\n    2. Have meaningful relationships with each other\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate items for a situation\nfunction GenerateItemsForSituation(world_context: WorldContext, situation: Situation) -> Item[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate items that would be relevant to this situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Situation:\n    {{ situation }}\n    \n    The items should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful effects and requirements\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate locations for a situation\nfunction GenerateLocationsForSituation(world_context: WorldContext, situation: Situation) -> Location[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate locations that would be relevant to this situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Situation:\n    {{ situation }}\n    \n    The locations should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful traits and hazards\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate events for a situation\nfunction GenerateEventsForSituation(world_context: WorldContext, situation: Situation) -> Event[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate events that could occur in this situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Situation:\n    {{ situation }}\n    \n    The events should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful triggers and consequences\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate quests for a situation\nfunction GenerateQuestsForSituation(world_context: WorldContext, situation: Situation) -> Quest[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate quests that could arise from this situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Situation:\n    {{ situation }}\n    \n    The quests should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful objectives and rewards\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for narrative element generation\ntest npc_generation {\n  functions [GenerateNPCsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest item_generation {\n  functions [GenerateItemsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest location_generation {\n  functions [GenerateLocationsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest event_generation {\n  functions [GenerateEventsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest quest_generation {\n  functions [GenerateQuestsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n} ",
    "player_state.baml": "// Core data models for player state\nclass PlayerStats {\n  // MINDSET Stats\n  might int @description(\"How much physical strength the player has.\")\n  insight int @description(\"How much mental acuity the player has.\")\n  nimbleness int @description(\"How nimble the player is.\")\n  destiny int @description(\"How much luck the player has.\")\n  savvy int @description(\"How well the character handles learning new things in the moment.\")\n  expertise int @description(\"How much techincal expertise the player has.\")\n  tenacity int @description(\"How resilient the player is to stress, injury, and other forms of adversity.\")\n\n  // SOCIAL Stats\n  station int @description(\"How well the player fits in with the local community.\")\n  opulence int @description(\"How wealthy the player is.\")\n  celebrity int @description(\"How well known the player is.\")\n  integrity int @description(\"How honest the player is.\")\n  allure int @description(\"How attractive the player is.\")\n  lineage int @description(\"How much of a legacy the player has.\")\n}\n\nclass PlayerAttribute {\n  id string\n  type string  // condition, item, status, memory, identity, mod, tag_only\n  description string\n  stat_mods map<string, int>?  // stat_name -> modifier\n}\n\nclass PlayerProfile {\n  narrative_summary string\n  key_traits string[]\n  background_hints string[]\n}\n\nclass PlayerState {\n  name string\n  stats PlayerStats\n  attributes PlayerAttribute[]\n  profile PlayerProfile\n  history string[] @description(\"A narrative of the player's history that can be used for further generation.\")\n}\n\n// Function to initialize player stats\nfunction InitializePlayerStats(world_context: WorldContext) -> PlayerStats {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Initialize player stats based on the world context. All stats start at 10 (population mean).\n    \n    World Context:\n    {{ world_context }}\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate initial attributes\nfunction GenerateInitialAttributes(world_context: WorldContext) -> PlayerAttribute[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate initial player attributes based on the world context.\n    \n    World Context:\n    {{ world_context }}\n    \n    Consider:\n    1. What starting conditions make sense for this world?\n    2. What basic items or statuses would a new character have?\n    3. What memories or identity elements would be appropriate?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate player profile\nfunction GeneratePlayerProfile(world_context: WorldContext, stats: PlayerStats, attributes: PlayerAttribute[]) -> PlayerProfile {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate a narrative player profile based on the world context, stats, and attributes.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player Stats:\n    {{ stats }}\n    \n    Player Attributes:\n    {{ attributes }}\n    \n    The profile should:\n    1. Synthesize stats and attributes into a coherent narrative\n    2. Include key personality traits\n    3. Suggest potential background elements\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for player state initialization\ntest player_stats_initialization {\n  functions [InitializePlayerStats]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n}\n\ntest initial_attributes_generation {\n  functions [GenerateInitialAttributes]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n}\n\ntest player_profile_generation {\n  functions [GeneratePlayerProfile]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    stats {\n      might 10\n      insight 10\n      nimbleness 10\n      destiny 10\n      savvy 10\n      expertise 10\n      tenacity 10\n      station 10\n      opulence 10\n      celebrity 10\n      integrity 10\n      allure 10\n      lineage 10\n    }\n    attributes [\n      {\n        id \"newcomer\"\n        type \"status\"\n        description \"A recent arrival to Neon Haven, still learning the city's ways\"\n        stat_mods {\n          \"savvy\" -1\n          \"station\" -1\n          \"insight\" 1\n        }\n      }\n      {\n        id \"memory_clean\"\n        type \"condition\"\n        description \"Your memories are unmodified and pure\"\n        stat_mods {\n          \"integrity\" 1\n          \"savvy\" -1\n        }\n      }\n    ]\n  }\n} ",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractResume(resume: string) -> Resume {\n  // Specify a client as provider/model-name\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\n  prompt #\"\n    Extract from this content:\n    {{ resume }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n\n\n// Test the function with a sample resume. Open the VSCode playground to run this.\ntest vaibhav_resume {\n  functions [ExtractResume]\n  args {\n    resume #\"\n      Vaibhav Gupta\n      vbv@boundaryml.com\n\n      Experience:\n      - Founder at BoundaryML\n      - CV Engineer at Google\n      - CV Engineer at Microsoft\n\n      Skills:\n      - Rust\n      - C++\n    \"#\n  }\n}\n",
    "world_context.baml": "// Core narrative elements are imported from other BAML files\n\n// Core data models for world generation\nclass WorldSeed {\n  name string\n  themes string[]\n  high_concept string\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this seed's creation and its narrative purpose\")\n}\n\nclass Technology {\n  name string\n  description string\n  impact string  // List of narrative impacts\n  limitations string  // List of limitations/rules\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this technology's creation and its narrative purpose\")\n}\n\nclass Faction {\n  name string\n  ideology string?\n  territory string[]?\n  influence_level int  // 0-10 scale\n  relationships map<string, string>?  // faction_name -> relationship_type\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this faction's creation and its narrative purpose\")\n}\n\nclass District {\n  id string\n  traits string[]\n  hazards string[]\n  factions string[]  // List of faction names present\n  description string\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this district's creation and its narrative purpose\")\n}\n\nclass WorldContext {\n  seed WorldSeed\n  technologies Technology[]\n  factions Faction[]\n  districts District[]\n  npcs NPC[]\n  tension_sliders map<string, int>  // e.g. {\"violence\": 7, \"mystery\": 4}\n  world_root Situation @description(\"The root situation from which all other situations must be reachable\")\n}\n\n// Function to analyze if new technology needs to be created\nfunction CheckTechnologyNeeds(context: WorldContext, situation_description: string) -> bool {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Given the current world context and a situation description, determine if a new technology needs to be defined. Answer ONLY with 'true' or 'false'. \n    \n    World Context:\n    {{ context }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    Consider:\n    1. Does the situation introduce a new technological concept?\n    2. Would this technology significantly impact the world's narrative?\n    3. Is this technology consistent with existing tech rules?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to check if a new faction should be created\nfunction CheckFactionNeeds(context: WorldContext, situation_description: string) -> bool {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Given the current world context and a situation description, determine if a new faction needs to be created. Answer ONLY with 'true' or 'false'.\n    \n    World Context:\n    {{ context }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    Consider:\n    1. Does the situation introduce a new group or organization?\n    2. Would this faction add meaningful complexity to the world?\n    3. Is this faction distinct from existing factions?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate new technology\nfunction GenerateTechnology(context: WorldContext, situation_description: string) -> Technology {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate a new technology based on the world context and situation.\n    \n    World Context:\n    {{ context }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    The technology should:\n    1. Be consistent with the world's themes and existing tech\n    2. Have clear narrative impacts\n    3. Include meaningful limitations\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate new faction\nfunction GenerateFaction(context: WorldContext, situation_description: string) -> Faction {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate a new faction based on the world context and situation.\n    \n    World Context:\n    {{ context }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    The faction should:\n    1. Have a clear ideology\n    2. Fit within the world's themes\n    3. Have meaningful relationships with existing factions\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate initial districts\nfunction GenerateDistricts(context: WorldContext) -> District[] {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate initial districts for the world based on the context.\n    \n    World Context:\n    {{ context }}\n    \n    Each district should:\n    1. Have distinct traits and hazards\n    2. Include relevant factions\n    3. Support the world's themes\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate the world root situation\nfunction GenerateWorldRootSituation(world_context: WorldContext, player_state: PlayerState) -> Situation {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate the world root situation that serves as the starting point for all narrative paths.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    The world root situation should:\n    1. Introduce the player to the world setting\n    2. Provide meaningful initial choices that can lead to different arcs\n    3. Set the tone and atmosphere of the world\n    4. Be broad enough to connect to various storylines\n    5. Include context tags that facilitate bridging to other situations\n    6. NOT have an arc_outcome (this is never a leaf node)\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test case\ntest world_context_generation {\n  functions [CheckTechnologyNeeds, CheckFactionNeeds, GenerateTechnology, GenerateFaction, GenerateDistricts]\n  args {\n    context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation_description \"A memory trader offers to sell you someone else's combat experience, but warns it might contain dangerous side effects.\"\n  }\n} ",
}

def get_baml_files():
    return file_map