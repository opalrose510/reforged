###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "agent.baml": "template_string GenerationToolList = #\"\n    CREATE:\n    create_npc - Create a new NPC - At this generation step, create a new NPC for future use.\n    create_faction - Create a new Faction - At this generation step, create a new Faction for future use.\n    create_technology - Create a new Technology\n    create_situation - Create a new Situation - At this generation step, create a single situation\n    create_multiple_situations - Create multiple Situations - At this generation step, create multiple situations to complete story branches\n    create_choices - Create a new Choice - At this generation step, create Choices for the current situation.\n    create_arc - Create a new Arc - Create a new arc, where the root situation is the current situation.\n    create_arc_outcome\n\n    NAVIGATION:\n    go_to_situation - Go to a specific situation by id\n    up_one_level - Go up one level in the situation tree\n    down_one_level - Go down one level in the situation tree\n    go_to_arc_root - Go to the root of the current arc\n    go_to_world_root - Go to the root of the world\n\n    QUESTIONS:\n    get_situation_by_id - Get a specific situation by id\n    get_player_state - Get the current player state at this situation\n    find_missing_situations - Find Choices that lead to missing situations\n    identify_narrative_gaps - Identify narrative gaps in the arc, situation and world\n    story_so_far - Get a summary of the story so far at this situation\n\"#\nclass CreateNPC {\n  tool_name \"create_npc\"\n  reason string @description(\"Why you are creating this NPC\")\n  generated_npc NPC @description(\"The NPC you have generated\")\n}\nclass CreateFaction {\n  tool_name \"create_faction\"\n  reason string @description(\"Why you are creating this Faction\")\n  generated_faction Faction @description(\"The Faction you have generated\")\n}\nclass CreateTechnology {\n  tool_name \"create_technology\"\n  reason string @description(\"Why you are creating this Technology\")\n  generated_technology Technology @description(\"The Technology you have generated\")\n}\nclass CreateSituation {\n  tool_name \"create_situation\"\n  reason string @description(\"Why you are creating this Situation\")\n  generated_situation Situation @description(\"The Situation you have generated\")\n}\nclass CreateMultipleSituations {\n  tool_name \"create_multiple_situations\"\n  reason string @description(\"Why you are creating these Situations\")\n  generated_situations Situation[] @description(\"Multiple Situations you have generated to complete story branches\")\n}\nclass CreateChoices {\n  tool_name \"create_choices\"\n  reason string @description(\"Why you are creating these Choices\")\n  generated_choices Choice[] @description(\"Choices to be added to the current Situation\")\n}\nclass CreateArc {\n  tool_name \"create_arc\"\n  reason string @description(\"Why you are creating this Arc\")\n  generated_arc Arc @description(\"The Arc you have generated, with the root Situation of this arc being the current Situation\")\n}\nclass CreateArcOutcome {\n  tool_name \"create_arc_outcome\"\n  reason string @description(\"Why you are creating this Arc Outcome\")\n  generated_arc_outcome ArcOutcome @description(\"The Arc Outcome you have generated.\")\n}\nclass GoToSituation {\n  tool_name \"go_to_situation\"\n  reason string @description(\"Why you are going to this Situation\")\n  situation_id string @description(\"The id of the Situation you are going to\")\n}\nclass UpOneLevel {\n  tool_name \"up_one_level\"\n  reason string @description(\"Why you are going up one level\")\n}\nclass DownOneLevel {\n  tool_name \"down_one_level\"\n  reason string @description(\"Why you are going down one level\")\n}\nclass GoToArcRoot {\n  tool_name \"go_to_arc_root\"\n  reason string @description(\"Why you are going to the root of the current Arc\")\n}\nclass GoToWorldRoot {\n  tool_name \"go_to_world_root\"\n  reason string @description(\"Why you are going to the root of the world\")\n}\nclass GetSituationById {\n  tool_name \"get_situation_by_id\"\n  reason string @description(\"Why you are getting this Situation\")\n  situation_id string @description(\"The id of the Situation you are getting\")\n}\nclass IdentifyNarrativeGaps {\n  tool_name \"identify_narrative_gaps\"\n  reason string @description(\"Why you are identifying narrative gaps\")\n  narrative_gaps string[] @description(\"The narrative gaps you have identified\")\n}\nclass FindMissingSituations {\n  tool_name \"find_missing_situations\"\n  reason string @description(\"Why you are finding missing Situations\")\n  missing_situations Situation[] @description(\"The missing Situations you have found\")\n}\ntype GenerationTool = CreateNPC | CreateFaction | CreateTechnology | CreateSituation | CreateMultipleSituations | CreateChoices | CreateArc | CreateArcOutcome | GoToSituation | UpOneLevel | DownOneLevel | GoToArcRoot | GoToWorldRoot | GetSituationById | FindMissingSituations | IdentifyNarrativeGaps\ntemplate_string CompressedWorldContext(world_context: WorldContext) #\"\n  This is the world you are currently working on:\n  {{ world_context.seed.name }}\n  {{ world_context.seed.themes }}\n  {{ world_context.seed.high_concept }}\n  NPCs:\n  {% for npc in world_context.npcs %}\n    {{ npc.name }}\n    {{ npc.description }}\n  {% endfor %}\n  Factions:\n  {% for faction in world_context.factions %}\n    {{ faction.name }}\n    {{ faction.description }}\n  {% endfor %}\n  Technologies:\n  {% for technology in world_context.technologies %}\n    {{ technology.name }}\n    {{ technology.description }}\n  {% endfor %}\n\"#\ntemplate_string CompressedPlayerState(player_state: PlayerState) #\"\n  This is the player state at the current situation:\n  Player name: {{ player_state.name }}\n  Player profile: {{ player_state.profile.narrative_summary }}\n  Player key traits: {{ player_state.profile.key_traits }}\n  Player background hints: {{ player_state.profile.background_hints }}\n  Player stats:\n  {% for stat in player_state.stats %}\n    {{ stat.name }}: {{ stat.value }}\n  {% endfor %}\n  Player attributes:\n  {% for attribute in player_state.attributes %}\n    {{ attribute.id }}: {{ attribute.description }}\n  {% endfor %}\n\"#\nclass ActionAndReasoning {\n  action GenerationTool @description(\"The action you took\")\n  generated_description string @description(\"In 5 words or less, describe the result of this action.\")\n  reasoning string @description(\"Why did you take this action?\")\n}\nclass ShortActionAndReasoning {\n  action string @description(\"The action you took\")\n  generated_description string @description(\"In 5 words or less, describe the result of this action.\")\n  reasoning string @description(\"Why did you take this action?\")\n}\nfunction SelectGenerationToolAndGenerate(previous_actions_and_reasoning: ShortActionAndReasoning[], world_context: WorldContext, player_state: PlayerState, current_situation: Situation, arcs_at_this_situation: Arc[], distance_from_completed_story: int) -> ActionAndReasoning {\n  client ReforgedClient\n  prompt #\"\n    You are a world generator. You generate a choose-your-own-adventure story, one Situation at a time.\n    In previous generation steps, you have taken the following actions:\n    {% for action in previous_actions_and_reasoning %}\n      {{ action.action }}\n      {{ action.reasoning }}\n    {% endfor %}\n\n    You are currently at the following situation:\n    {{ current_situation }}\n\n    Before you generate a story further, you must select a generation tool.\n\n    You are {{ distance_from_completed_story }} steps away from the nearest situation that has every Choice defined.\n    \n    IMPORTANT: Your primary goal is to complete story branches by creating all missing situations. \n    - If the current situation has choices without next_situation_id, prioritize creating situations for those choices\n    - You can create multiple situations in sequence to complete a story branch\n    - Only use navigation tools if you need to move to a different story branch or if you're truly stuck\n    - The distance constraint is a guideline, not a hard rule - focus on story completion\n\n    You are given a list of tools to use to generate the story.\n\n    Generation hints:\n    1. Situations:\n      - Situations represent a moment in time. They can be small or large.\n      - Situations lead to some number of Choices.\n      - Situations are part of a larger Arc.\n      - Arcs are a series of Situations that lead to an Arc Outcome.\n      - Arc Outcomes are the final outcome of an Arc.\n      - PRIORITY: Complete story branches by creating situations for all choices that need them\n    2. Choices:\n      - Choices are the options the player can choose from.\n      - When you see choices without next_situation_id, create situations for them\n      - Use create_multiple_situations to create situations for ALL incomplete choices at once\n      - Focus on completing one story branch before moving to another\n      - You can create multiple situations in a row to complete a branch\n      - Efficiency: Create all needed situations in one action rather than multiple separate actions\n    3. NPCs:\n      - Create an NPC when you want to reference a character *more than once* in the story.\n    4. Factions:\n      - Create factions for any organizational groups or structures.\n    4. Technologies:\n      - Technologies can be conceptual or refer to specific objects or technologies.\n      - Use them to add depth to the world.\n    5. Arcs:\n      - Arcs help steer a series of Situations towards a specific outcome.\n      - You can (and should) have multiple arcs at a single situation.\n      - Arcs should be created when you want to create a new story thread. They can be long term or short.\n    \n    STRATEGY:\n    - First, check if the current situation has incomplete choices (choices without next_situation_id)\n    - If yes, use create_multiple_situations to create situations for ALL incomplete choices at once\n    - This is your highest priority - complete story branches efficiently\n    - If all choices are complete, look for other incomplete situations in the current arc\n    - Only navigate away if you need to work on a different story branch\n    - Remember: Completing story branches is more important than staying close to completed situations\n    - PREFER create_multiple_situations over create_situation when you have multiple incomplete choices\n    \n    Given the current world context and player state, select the generation tool to use.\n    You must select a tool from the list of tools.\n\n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n\n    Player State:\n    {{ player_state }}\n\n    Arcs at this situation:\n    {% for arc in arcs_at_this_situation %}\n      {{ arc.seed.title }}: {{ arc.seed.core_conflict }}\n      Internal hint: {{ arc.seed.internal_hint }}\n      Internal justification: {{ arc.seed.internal_justification }}\n      Situations for {{ arc.seed.title }}:\n      {% for situation in arc.situations %}\n        {{ situation.id }}: {{ situation.description }}\n      {% endfor %}\n      Outcomes for {{ arc.seed.title }}:\n      {% for outcome in arc.outcomes %}\n        {{ outcome.id }}: {{ outcome.description }}\n      {% endfor %}\n    {% endfor %}\n\n    Your tools:\n    {{ GenerationToolList }}\n\n    {{ ctx.output_format }}\n  \"#\n}",
    "arcs.baml": "// Core data models for narrative arcs\nclass ArcSeed {\n  title string\n  core_conflict string\n  theme_tags string[]\n  tone string\n  factions_involved string[]\n  internal_hint string @description(\"Clue for future model calls to guide generation\")\n  internal_justification string @description(\"Reasoning for this arc's creation and its narrative purpose\")\n}\n\nclass Arc {\n  seed ArcSeed\n  situations Situation[]\n  outcomes ArcOutcome[]\n}\n\nclass ArcOutcome {\n  id string\n  description string @description(\"Describe one way in which the arc ends. This should be a single sentence. An arc outcome should definitively end the current arc. Death is a valid outcome, as are permanent changes to the world or characters.\")\n  internal_hint string @description(\"How do you think the player might reach this outcome, in broad terms?\")\n  internal_justification string @description(\"Reasoning for this outcome creation and narrative purpose\")\n  tags string[] @description(\"Tags for the outcome, to help guide generation, e.g 'moral_choice', 'death', 'failure'\")\n  estimated_duration int @description(\"Estimated number of situations to reach this outcome\")\n}\n// Function to generate arc titles\nfunction GenerateArcTitles(world_context: WorldContext, player_state: PlayerState, count: int?) -> string[] {\n  client ReforgedClient\n  prompt #\"\n    Generate {{ count or 3 }} distinct arc titles based on the world context and player state.\n    Return ONLY the titles, one per line.\n    \n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Each title should:\n    1. Be evocative and memorable\n    2. Hint at a unique core conflict\n    3. Reflect the world's themes\n    4. Be appropriate for the player's starting state\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate a single arc seed\nfunction GenerateArcSeed(world_context: WorldContext, player_state: PlayerState, title: string) -> ArcSeed {\n  client ReforgedClient\n  prompt #\"\n    Generate a complete arc seed based on the given title, world context, and player state.\n    \n    Title:\n    {{ title }}\n    \n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    Player State:\n    {{ player_state }}\n    \n    The arc seed should:\n    1. Develop the core conflict suggested by the title\n    2. Involve appropriate factions\n    3. Explore relevant aspects of the world's themes\n    4. Be appropriate for the player's starting state\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction GenerateArcOutcomes(world_context: WorldContext, player_state: PlayerState, arc_seed: ArcSeed) -> ArcOutcome[] {\n  client ReforgedClient\n  prompt #\"\n    Generate possible outcomes for the given arc based on the world context, player state, and arc.\n    Good outcomes:\n    1. Conclusively ends the arc\n    2. Is a possible outcome\n    3. May result in death, dismemberment or permanent change to the player\n    4. May result in a permanent change to the world, factions, npcs, etc.\n    5. Aren't necessarily mutually exclusive.\n    6. Are creative ways the arc might end, even if they are not the most likely.\n    7. Are not just \"the player dies\" or \"the player wins\".\n    8. Are the result of choices the player makes.\n\n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    Player State:\n    {{ player_state }}\n\n    Arc Seed:\n    {{ arc_seed }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for arc generation\ntest arc_title_generation {\n  functions [GenerateArcTitles]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    player_state {\n      stats {\n        might 10\n        insight 10\n        nimbleness 10\n        destiny 10\n        savvy 10\n        expertise 10\n        tenacity 10\n        station 10\n        opulence 10\n        celebrity 10\n        integrity 10\n        allure 10\n        lineage 10\n      }\n      attributes []\n      profile {\n        narrative_summary \"A newcomer to Neon Haven, seeking their place in the city's complex web of memory trading and identity manipulation.\"\n        key_traits [\"curious\", \"adaptable\"]\n        background_hints [\"recent arrival\", \"seeking opportunity\"]\n      }\n    }\n  }\n}\n\ntest arc_seed_generation {\n  functions [GenerateArcSeed]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    player_state {\n      stats {\n        might 10\n        insight 10\n        nimbleness 10\n        destiny 10\n        savvy 10\n        expertise 10\n        tenacity 10\n        station 10\n        opulence 10\n        celebrity 10\n        integrity 10\n        allure 10\n        lineage 10\n      }\n      attributes []\n      profile {\n        narrative_summary \"A newcomer to Neon Haven, seeking their place in the city's complex web of memory trading and identity manipulation.\"\n        key_traits [\"curious\", \"adaptable\"]\n        background_hints [\"recent arrival\", \"seeking opportunity\"]\n      }\n    }\n    title \"The Memory Broker's Gambit\"\n  }\n} ",
    "attribute_enums.baml": "// We want to create a scale that can be described narratively, rather than with numbers.\n// \"10\" might doesn't mean much to the model. We should use adjectives that explain the scale.\n",
    "bridge_nodes.baml": "",
    "choices.baml": "// Choice-related data models and functions\n// Choices apply the actual world state diffs.\nclass Choice {\n  id string\n  text string @description(\"The text of the choice as it appears to the player. This should be a single sentence.\")\n  dialogue_response string? @description(\"If this is a dialogue choice, the actual words the player says\")\n  choice_type string @description(\"Type of choice: dialogue, action, investigation, etc.\")\n  emotional_tone string @description(\"The emotional tone of the choice (e.g., aggressive, diplomatic, cautious)\")\n  body_language string? @description(\"Description of the player's body language and non-verbal communication\")\n  requirements map<string, int>? @skip // Requirements should be applied later.  \n  attributes_gained PlayerAttribute[]\n  attributes_lost string[] @description(\"Attributes that are lost as a result of this choice. This should be a list of attribute IDs which are found on the player state.\")\n  stat_changes map<string, int>  // stat_name -> change_value\n  next_situation_id string? @skip\n  internal_hint string @description(\"Clue for future model calls to guide generation\")\n  internal_justification string @description(\"Reasoning for this choice's creation and its narrative purpose\")\n  new_npcs NPC[] @description(\"New NPCs created by this choice, if any. Only create new NPCs if they are directly related to this choice.\")\n  new_factions Faction[] @description(\"New factions created by this choice, if any. Only create new factions if they are directly related to this choice.\")\n  new_technologies Technology[] @description(\"New technologies created by this choice, if any. Only create new technologies if they are directly related to this choice.\")\n}\n\nfunction GenerateChoiceSituationResult(world_context: WorldContext, player_state: PlayerState, arc: Arc, choice: Choice) -> Situation {\n  client ReforgedClient\n  prompt #\"\n    This Choice that has been generated leads to exactly one new Situation. Generate that Situation.\n    \n    World Context:\n    {{ world_context }}\n\n    Player State:\n    {{ player_state }}\n    \n    Current Arc:\n    {{ arc }}\n    \n    Choice:\n    {{ choice }}\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to check if choice needs new attribute\nfunction CheckChoiceAttributeNeeds(choice: Choice, world_context: WorldContext) -> bool {\n  client ReforgedClient\n  prompt #\"\n    Determine if this choice should create a new attribute. Answer ONLY with 'true' or 'false'.\n    \n    Choice:\n    {{ choice }}\n    \n    World Context:\n    {{ world_context }}\n    \n    Consider:\n    1. Does the choice have significant narrative impact?\n    2. Would an attribute help track the consequences?\n    3. Is this a meaningful character development moment?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate attribute for choice\nfunction GenerateChoiceAttribute(choice: Choice, world_context: WorldContext) -> PlayerAttribute {\n  client ReforgedClient\n  prompt #\"\n    Generate a new attribute based on the choice and world context.\n    \n    Choice:\n    {{ choice }}\n    \n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    The attribute should:\n    1. Represent the meaningful consequences of the choice\n    2. Have appropriate stat modifications\n    3. Be consistent with the world's themes\n    4. Track character development\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to augment existing situations with more dialogue choices\nfunction AugmentSituationChoices(world_context: WorldContext, player_state: PlayerState, arc: Arc, situation: Situation) -> Choice[] {\n  client \"ReforgedClient\"\n  prompt #\"\n    Given the current Situation, return a list of new possible Choices that could be added to the Situation. \n    They must not duplicate existing choices, or point to a prior situation already present in the arc.\n\n    Existing Arc:\n    {{ arc }}\n\n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Current Situation:\n    {{ situation }}\n    \n    Return more choices that focus on:\n    1. Specific dialogue responses with different tones/approaches\n    2. Non-verbal communication (body language, facial expressions)\n    3. Interruptions and conversation steering\n    4. Emotional reactions and internal responses\n    5. Micro-social dynamics and relationship building\n    6. Small investigative actions during dialogue\n    \n    Ensure each new choice has:\n    - Clear dialogue_response if it's a speaking choice\n    - Appropriate choice_type (dialogue, action, reaction, etc.)\n    - Meaningful consequences for character relationships\n    \n    Return the new choices as a list.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for choice generation\ntest attribute_generation {\n  functions [CheckChoiceAttributeNeeds, GenerateChoiceAttribute]\n  args {\n    choice {\n      id \"choice_1\"\n      text \"Accept the memory broker's offer to trade your childhood memories for power\"\n      requirements {\n        \"savvy\" 8\n        \"integrity\" 5\n      }\n      attributes_gained []\n      attributes_lost []\n      stat_changes {\n        \"savvy\" 2\n        \"integrity\" -1\n      }\n      next_situation_id \"situation_2\"\n      internal_hint \"This choice represents a major moral decision about identity\"\n      internal_justification \"This choice tests the player's willingness to sacrifice their past for power\"\n    }\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n} ",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n// Only use openai for reforged client\nclient<llm> ReforgedClient {\n  provider fallback\n  options {\n    strategy [CustomGPT4oMini, CustomGPT41mini, CustomGPT4o, CustomGPT41]\n  }\n}\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n    max_tokens 32768\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n    max_tokens 32768\n  }\n}\nclient<llm> CustomGPT41mini {\n  provider openai\n  options {\n    model \"gpt-4.1-mini\"\n    api_key env.OPENAI_API_KEY\n    max_tokens 32768\n  }\n}\nclient<llm> CustomGPT41 {\n  provider openai\n  options {\n    model \"gpt-4.1\"\n    api_key env.OPENAI_API_KEY\n    max_tokens 32768\n  }\n}\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.90.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\ngenerator target_frontend {\n    output_type \"typescript\"\n    output_dir \"../../../reforged-frontend/\"\n    version \"0.90.2\"\n    default_client_mode sync\n}\n",
    "libertas.baml": "",
    "narrative_elements.baml": "// Core data models for narrative elements\nclass NPC {\n  id string\n  name string\n  role string\n  description string\n  personality_traits string[]\n  relationships map<string, string>  // npc_id -> relationship_type\n  faction_affiliations string[]  // List of faction names\n  location_id string\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this NPC's creation and its narrative purpose\")\n}\n\nclass Item {\n  id string\n  name string\n  type string  // weapon, tool, artifact, memory, etc.\n  description string\n  effects map<string, int>  // stat_name -> modifier\n  requirements map<string, int>  // stat_name -> minimum_value\n  rarity string  // common, uncommon, rare, legendary\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this item's creation and its narrative purpose\")\n}\n\nclass Location {\n  id string\n  name string\n  type string  // district, building, landmark, etc.\n  description string\n  traits string[]\n  hazards string[]\n  connected_locations string[]  // List of location IDs\n  npcs_present string[]  // List of NPC IDs\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this location's creation and its narrative purpose\")\n}\n\nclass Event {\n  id string\n  title string\n  description string\n  type string  // encounter, discovery, revelation, etc.\n  triggers string[]  // Conditions that can trigger this event\n  consequences map<string, string>  // choice_id -> outcome\n  affected_npcs string[]  // List of NPC IDs\n  affected_locations string[]  // List of location IDs\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this event's creation and its narrative purpose\")\n}\n\nclass Quest {\n  id string\n  title string\n  description string\n  type string  // main, side, faction, etc.\n  objectives string[]\n  rewards map<string, int>  // stat_name -> value\n  requirements map<string, int>  // stat_name -> minimum_value\n  related_npcs string[]  // List of NPC IDs\n  related_locations string[]  // List of location IDs\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this quest's creation and its narrative purpose\")\n}\n\n// Function to generate NPCs for a situation\nfunction GenerateNPCsForSituation(world_context: WorldContext, situation: Situation) -> NPC[] {\n  client ReforgedClient\n  prompt #\"\n    Generate NPCs that would be present in this situation.\n    \n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    Situation:\n    {{ situation }}\n    \n    The NPCs should:\n    1. Have clear roles in the situation\n    2. Have meaningful relationships with each other\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate items for a situation\nfunction GenerateItemsForSituation(world_context: WorldContext, situation: Situation) -> Item[] {\n  client ReforgedClient\n  prompt #\"\n    Generate items that would be relevant to this situation.\n    \n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    Situation:\n    {{ situation }}\n    \n    The items should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful effects and requirements\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate locations for a situation\nfunction GenerateLocationsForSituation(world_context: WorldContext, situation: Situation) -> Location[] {\n  client ReforgedClient\n  prompt #\"\n    Generate locations that would be relevant to this situation.\n    \n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    Situation:\n    {{ situation }}\n    \n    The locations should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful traits and hazards\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate events for a situation\nfunction GenerateEventsForSituation(world_context: WorldContext, situation: Situation) -> Event[] {\n  client ReforgedClient\n  prompt #\"\n    Generate events that could occur in this situation.\n    \n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    Situation:\n    {{ situation }}\n    \n    The events should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful triggers and consequences\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate quests for a situation\nfunction GenerateQuestsForSituation(world_context: WorldContext, situation: Situation) -> Quest[] {\n  client ReforgedClient\n  prompt #\"\n    Generate quests that could arise from this situation.\n    \n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    Situation:\n    {{ situation }}\n    \n    The quests should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful objectives and rewards\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for narrative element generation\ntest npc_generation {\n  functions [GenerateNPCsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest item_generation {\n  functions [GenerateItemsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest location_generation {\n  functions [GenerateLocationsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest event_generation {\n  functions [GenerateEventsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest quest_generation {\n  functions [GenerateQuestsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n} ",
    "player_state.baml": "// Core data models for player state\nclass PlayerStats {\n  // MINDSET Stats\n  might int @description(\"How much physical strength the player has.\")\n  insight int @description(\"How much mental acuity the player has.\")\n  nimbleness int @description(\"How nimble the player is.\")\n  destiny int @description(\"How much luck the player has.\")\n  savvy int @description(\"How well the character handles learning new things in the moment.\")\n  expertise int @description(\"How much techincal expertise the player has.\")\n  tenacity int @description(\"How resilient the player is to stress, injury, and other forms of adversity.\")\n\n  // SOCIAL Stats\n  station int @description(\"How well the player fits in with the local community.\")\n  opulence int @description(\"How wealthy the player is.\")\n  celebrity int @description(\"How well known the player is.\")\n  integrity int @description(\"How honest the player is.\")\n  allure int @description(\"How attractive the player is.\")\n  lineage int @description(\"How much of a legacy the player has.\")\n}\n\n// Narrative stat descriptors - 10 is average, each point is 1 standard deviation\nclass StatDescriptors {\n  might_descriptors map<string, string>\n  insight_descriptors map<string, string>\n  nimbleness_descriptors map<string, string>\n  destiny_descriptors map<string, string>\n  savvy_descriptors map<string, string>\n  expertise_descriptors map<string, string>\n  tenacity_descriptors map<string, string>\n  station_descriptors map<string, string>\n  opulence_descriptors map<string, string>\n  celebrity_descriptors map<string, string>\n  integrity_descriptors map<string, string>\n  allure_descriptors map<string, string>\n  lineage_descriptors map<string, string>\n}\n\n// Default stat descriptors\nfunction GetDefaultStatDescriptors() -> StatDescriptors {\n  client ReforgedClient\n  prompt #\"\n    Generate narrative descriptors for each stat level. Each stat ranges from 1-20, with 10 being average.\n    Each point represents one standard deviation from the mean.\n    \n    For each stat type, create appropriate descriptors:\n    - Might: Physical strength and prowess\n    - Insight: Mental acuity and understanding  \n    - Nimbleness: Physical dexterity and speed\n    - Destiny: Luck and fortune\n    - Savvy: Street smarts and adaptability\n    - Expertise: Technical knowledge and skill\n    - Tenacity: Mental resilience and determination\n    - Station: Social standing and belonging\n    - Opulence: Wealth and material resources\n    - Celebrity: Fame and recognition\n    - Integrity: Honesty and moral character\n    - Allure: Physical attractiveness and charm\n    - Lineage: Family legacy and connections\n    \n    Create descriptors for values 1-20, with 10 as \"average\" for each stat.\n    Lower values should be progressively weaker, higher values progressively stronger.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to get narrative description of a stat value\nfunction GetStatNarrative(stat_name: string, stat_value: int, descriptors: StatDescriptors) -> string {\n  client ReforgedClient\n  prompt #\"\n    Get the narrative description for the given stat and value.\n    \n    Stat Name: {{ stat_name }}\n    Stat Value: {{ stat_value }}\n    \n    Descriptors: {{ descriptors }}\n    \n    Return the appropriate descriptor for this stat and value.\n    Convert the stat_value to a string key to look up in the descriptors map.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\nclass PlayerAttribute {\n  id string\n  type string  // condition, item, status, memory, identity, mod, tag_only\n  description string\n  stat_mods map<string, int>?  // stat_name -> modifier\n}\n\nclass PlayerProfile {\n  narrative_summary string\n  key_traits string[]\n  background_hints string[]\n}\n\nclass PlayerState {\n  name string\n  stats PlayerStats\n  attributes PlayerAttribute[]\n  profile PlayerProfile\n  history string[] @description(\"A narrative of the player's history that can be used for further generation.\")\n}\n\n// Function to initialize player stats\nfunction InitializePlayerStats(world_context: WorldContext) -> PlayerStats {\n  client ReforgedClient\n  prompt #\"\n    Initialize player stats based on the world context. All stats start at 10 (population mean).\n    \n    World Context:\n    {{ world_context }}\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate initial attributes\nfunction GenerateInitialAttributes(world_context: WorldContext) -> PlayerAttribute[] {\n  client ReforgedClient\n  prompt #\"\n    Generate initial player attributes based on the world context.\n    \n    World Context:\n    {{ world_context }}\n    \n    Consider:\n    1. What starting conditions make sense for this world?\n    2. What basic items or statuses would a new character have?\n    3. What memories or identity elements would be appropriate?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate player profile\nfunction GeneratePlayerProfile(world_context: WorldContext, stats: PlayerStats, attributes: PlayerAttribute[]) -> PlayerProfile {\n  client ReforgedClient\n  prompt #\"\n    Generate a narrative player profile based on the world context, stats, and attributes.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player Stats:\n    {{ stats }}\n    \n    Player Attributes:\n    {{ attributes }}\n    \n    The profile should:\n    1. Synthesize stats and attributes into a coherent narrative\n    2. Include key personality traits\n    3. Suggest potential background elements\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for player state initialization\ntest player_stats_initialization {\n  functions [InitializePlayerStats]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n}\n\ntest initial_attributes_generation {\n  functions [GenerateInitialAttributes]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n}\n\ntest player_profile_generation {\n  functions [GeneratePlayerProfile]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    stats {\n      might 10\n      insight 10\n      nimbleness 10\n      destiny 10\n      savvy 10\n      expertise 10\n      tenacity 10\n      station 10\n      opulence 10\n      celebrity 10\n      integrity 10\n      allure 10\n      lineage 10\n    }\n    attributes [\n      {\n        id \"newcomer\"\n        type \"status\"\n        description \"A recent arrival to Neon Haven, still learning the city's ways\"\n        stat_mods {\n          \"savvy\" -1\n          \"station\" -1\n          \"insight\" 1\n        }\n      }\n      {\n        id \"memory_clean\"\n        type \"condition\"\n        description \"Your memories are unmodified and pure\"\n        stat_mods {\n          \"integrity\" 1\n          \"savvy\" -1\n        }\n      }\n    ]\n  }\n} ",
    "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\n",
    "situations.baml": "// Situation-related data models and functions\nclass Situation {\n  id string\n  description string @description(\"Less than 25 words. Description of what happens in this situation, for internal use only.\")\n  player_perspective_description string @description(\"Description from the player's perspective with direct dialogue and 'show don't tell' approach\")\n  choices Choice[] @description(\"Should be a list of 3-5 choices. A choice must NOT point towards a prior situation already present in the arc.\")\n  stat_requirements StatRequirement[]\n  // attribute_requirements AttributeRequirement[] # TODO\n  bridgeable bool\n  context_tags string[]\n  internal_hint string @description(\"Clue for future model calls to guide generation\")\n  internal_justification string @description(\"Reasoning for this situation's creation and its narrative purpose\")\n}\n\nclass StatRequirement {\n  attribute_name \"might\" | \"insight\" | \"nimbleness\" | \"destiny\" | \"savvy\" | \"expertise\" | \"tenacity\" | \"station\" | \"opulence\" | \"celebrity\" | \"integrity\" | \"allure\" | \"lineage\"\n  min_value int @description(\"Minimum value of the attribute required for the player to see a given choice. 10 is considerd an average human.\")\n}\n\n// Function to generate root situation for an arc\nfunction GenerateRootSituation(world_context: WorldContext, player_state: PlayerState, arc_seed: ArcSeed) -> Situation {\n  client ReforgedClient\n  prompt #\"\n    Generate the root situation for an arc based on the world context, player state, and arc seed.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Arc Seed:\n    {{ arc_seed }}\n    \n    The root situation should:\n    1. Introduce the core conflict through dialogue and direct interaction\n    2. Use \"show don't tell\" - include direct dialogue from NPCs speaking to the player\n    3. Provide lots of small, granular choices including dialogue responses\n    4. Create a story beat rather than just \"investigate this\" or \"explore that\"\n    5. Include both a narrative description and a player-perspective description\n    6. The player_perspective_description should be immersive and include NPCs talking directly to the player character\n    7. Should NOT create new NPCs, factions or technologies.\n    Create choices that are:\n    - Dialogue responses to NPCs\n    - Small character actions and reactions\n    - Emotional responses and attitudes\n    - Investigation micro-choices\n    - Social interactions and relationships\n    \n    Avoid generic \"investigate\" or \"explore\" choices. Instead focus on specific character moments and interactions.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\nfunction GenerateMissingSituationForChoice(world_context: WorldContext, player_state: PlayerState, arc: Arc, choice: Choice) -> Situation {\n  client ReforgedClient\n  prompt #\"\n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Current Arc:\n    {{ arc }}\n\n    Original Choice:\n    {{ choice }}\n\n    Generate a new situation that is a valid consequence of the given choice.\n    Situations should:\n    1. Be a valid consequence of the given choice\n    2. Advance the plot of the arc that the choice belongs to\n    3. Develop the player, NPCs, and factions in the arc.\n    4. Creates a story beat that is a natural progression from the previous situation.\n    5. Accurately reflects the consequences of the choice.\n    6. Should only create new NPCs, factions or technologies if they are directly related to the choice.\n    7. Should prefer to use existing NPCs, factions or technologies wherever possible.\n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to expand arc with additional situations\nfunction ExpandArcSituations(world_context: WorldContext, player_state: PlayerState, arc: Arc) -> Situation[] {\n  client \"ReforgedClient\"\n  prompt #\"\n    Generate additional situations to expand the arc based on the world context, player state, and existing arc.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Current Arc:\n    {{ arc }}\n    \n    New situations should:\n    1. Build on previous choices and consequences with detailed character interactions\n    2. Focus on dialogue and direct character-to-character moments\n    3. Include lots of small, granular choices within each situation\n    4. Create story beats that feel like scenes in a story, not exploration nodes\n    5. Each situation should include both narrative and player-perspective descriptions\n    6. NPCs should speak directly to the player character\n    \n    Generate multiple small situations for each story beat, with choices like:\n    - How to respond to specific lines of dialogue\n    - Small character actions during conversations\n    - Emotional reactions to reveals\n    - Body language and non-verbal communication\n    - Interrupting, agreeing, or challenging statements\n    - Social maneuvering and relationship building\n    \n    Avoid large \"investigate the mystery\" situations. Instead create granular moments like:\n    - \"The informant leans closer and whispers...\"\n    - \"She stops mid-sentence and stares at you...\"\n    - \"His hand moves toward his weapon as he says...\"\n    \n    {{ ctx.output_format }}\n  \"#\n}\nclass JoinSituationOutput {\n  from_situation_id string @description(\"The id of the situation that the choice leads from. It must already exist.\")\n  to_situation_id string @description(\"The id of the situation that the choice leads to. It must already exist.\")\n  reason string @description(\"Why these two situations make sense to to be connected\")\n  choice Choice @description(\"The choice that leads from the from_situation_id to the to_situation_id\")\n}\n// More portable version to avoid prompt bloat\ntemplate_string DrawSituationGraph(world_context: WorldContext, arcs: Arc[]) #\"\n  Root situation:\n  {{ world_context.world_root }}\n\n  {% for arc in arcs %}\n    {{ arc.seed.title }}:\n    {% for situation in arc.situations %}\n      Situation ID: {{ situation.id }} \n      Description: {{ situation.description}}\n      This situation has the following choices:\n      {% for choice in situation.choices %}\n        {{ choice.id }} -> {{ choice.next_situation_id or \"No next situation defined\" }}\n      {% endfor %}\n    {% endfor %}\n  {% endfor %}\n\"#\n\nfunction GenerateJoinChoices(world_context: WorldContext, arcs: Arc[]) -> JoinSituationOutput[] {\n  client ReforgedClient\n  prompt #\"\n    Given these situation briefs, generate a list of join situations that\n    connect the situations in a way that enhances the narrative.\n\n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n\n    Situation Graph:\n    {{ DrawSituationGraph(world_context, arcs) }}\n\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to identify missing connections between situations\nfunction IdentifyMissingSituations(world_context: WorldContext, arcs: Arc[]) -> string[] {\n  client \"ReforgedClient\"\n  prompt #\"\n    Analyze the arcs and identify missing situation types that would enhance the narrative.\n    \n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n    \n    Current Arcs:\n    {{ arcs }}\n    \n    Look for gaps in:\n    1. Character development moments\n    2. Relationship building scenes\n    3. Emotional beats and reactions\n    4. Dialogue-heavy encounters\n    5. Small investigative moments\n    6. Social dynamics and politics\n    7. Bridge opportunities between arcs\n    \n    Return a list of situation descriptions that should be created to fill these narrative gaps.\n    Focus on character-driven moments rather than plot advancement.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate situation for a choice\nfunction GenerateSituationForChoice(world_context: WorldContext, player_state: PlayerState, arc: Arc, choice: Choice) -> Situation {\n  client ReforgedClient\n  prompt #\"\n    Generate a new situation that is the result of this choice.\n    \n    World Context:\n    {{ CompressedWorldContext(world_context) }}\n\n    Player State:\n    {{ player_state }}\n    \n    Current Arc:\n    {{ arc }}\n    \n    Choice:\n    {{ choice }}\n    \n    Generate a situation that:\n    1. Is a valid consequence of the given choice\n    2. Advances the plot of the arc that the choice belongs to\n    3. Develops the player, NPCs, and factions in the arc\n    4. Creates a story beat that is a natural progression from the previous situation\n    5. Accurately reflects the consequences of the choice\n    6. Should only create new NPCs, factions or technologies if they are directly related to the choice\n    7. Should prefer to use existing NPCs, factions or technologies wherever possible\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for situation generation\ntest situation_generation {\n  functions [GenerateRootSituation, ExpandArcSituations]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    player_state {\n      stats {\n        might 10\n        insight 10\n        nimbleness 10\n        destiny 10\n        savvy 10\n        expertise 10\n        tenacity 10\n        station 10\n        opulence 10\n        celebrity 10\n        integrity 10\n        allure 10\n        lineage 10\n      }\n      attributes []\n      profile {\n        narrative_summary \"A newcomer to Neon Haven, seeking their place in the city's complex web of memory trading and identity manipulation.\"\n        key_traits [\"curious\", \"adaptable\"]\n        background_hints [\"recent arrival\", \"seeking opportunity\"]\n      }\n    }\n    arc_seed {\n      title \"The Memory Broker's Gambit\"\n      core_conflict \"A powerful memory broker offers the player a chance to trade their memories for power and influence\"\n      theme_tags [\"identity\", \"power\", \"trust\"]\n      tone \"noir\"\n      factions_involved [\"Memory Brokers Guild\", \"City Watch\"]\n      internal_hint \"Focus on the moral implications of memory trading\"\n      internal_justification \"This arc explores the core themes of the setting while providing meaningful choices about identity and power\"\n    }\n    arc {\n      seed {\n        title \"The Memory Broker's Gambit\"\n        core_conflict \"A powerful memory broker offers the player a chance to trade their memories for power and influence\"\n        theme_tags [\"identity\", \"power\", \"trust\"]\n        tone \"noir\"\n        factions_involved [\"Memory Brokers Guild\", \"City Watch\"]\n        internal_hint \"Focus on the moral implications of memory trading\"\n        internal_justification \"This arc explores the core themes of the setting while providing meaningful choices about identity and power\"\n      }\n      situations []\n    }\n  }\n} ",
    "v2/scene.baml": "",
    "world_context.baml": "// Core narrative elements are imported from other BAML files\n\n// Core data models for world generation\nclass WorldSeed {\n  name string\n  themes string[]\n  high_concept string\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this seed's creation and its narrative purpose\")\n}\n\nclass Technology {\n  name string\n  description string\n  impact string  // List of narrative impacts\n  limitations string  // List of limitations/rules\n\n  hazards string[]? @description(\"Hazards that are associated with this technology, i.e downsides, side effects or problems caused by it.\")\n  factions string[]? @description(\"Factions that are associated with this technology, i.e the ones that use it or are affected by it.\")\n  traits string[]? @description(\"Traits that are associated with this technology, e.g 'cybernetics', 'language', etc.\")\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this technology's creation and its narrative purpose\")\n}\n\nclass Faction {\n  name string\n  description string\n  ideology string?\n  location string? @description(\"The location of the faction, e.g 'Libertas', 'The Akropolis', etc.\")\n  influence_level int  // 0-10 scale\n  relationships map<string, string>?  // faction_name -> relationship_type\n  hazards string[]? @description(\"Existential threats to this faction.\")\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this faction's creation and its narrative purpose\")\n}\n\nclass District {\n  id string\n  traits string[]\n  hazards string[]\n  factions string[]  // List of faction names present\n  description string\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this district's creation and its narrative purpose\")\n}\n\nclass WorldContext {\n  seed WorldSeed\n  technologies Technology[]\n  factions Faction[]\n  districts District[]\n  npcs NPC[]\n  tension_sliders map<string, int>  // e.g. {\"violence\": 7, \"mystery\": 4}\n  world_root Situation @description(\"The root situation from which all other situations must be reachable\")\n}\n\n// Function to analyze if new technology needs to be created\nfunction CheckTechnologyNeeds(context: WorldContext, situation_description: string) -> bool {\n  client ReforgedClient\n  prompt #\"\n    Given the current world context and a situation description, determine if a new technology needs to be defined. Answer ONLY with 'true' or 'false'. \n    \n    World Context:\n    {{ context }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    Consider:\n    1. Does the situation introduce a new technological concept?\n    2. Would this technology significantly impact the world's narrative?\n    3. Is this technology consistent with existing tech rules?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to check if a new faction should be created\nfunction CheckFactionNeeds(context: WorldContext, situation_description: string) -> bool {\n  client ReforgedClient\n  prompt #\"\n    Given the current world context and a situation description, determine if a new faction needs to be created. Answer ONLY with 'true' or 'false'.\n    \n    World Context:\n    {{ context }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    Consider:\n    1. Does the situation introduce a new group or organization?\n    2. Would this faction add meaningful complexity to the world?\n    3. Is this faction distinct from existing factions?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate new technology\nfunction GenerateTechnology(context: WorldContext, situation_description: string) -> Technology {\n  client ReforgedClient\n  prompt #\"\n    Generate a new technology based on the world context and situation.\n    \n    World Context:\n    {{ context }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    The technology should:\n    1. Be consistent with the world's themes and existing tech\n    2. Have clear narrative impacts\n    3. Include meaningful limitations\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate new faction\nfunction GenerateFaction(context: WorldContext, situation_description: string) -> Faction {\n  client ReforgedClient\n  prompt #\"\n    Generate a new faction based on the world context and situation.\n    \n    World Context:\n    {{ context }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    The faction should:\n    1. Have a clear ideology\n    2. Fit within the world's themes\n    3. Have meaningful relationships with existing factions\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate initial districts\nfunction GenerateDistricts(context: WorldContext) -> District[] {\n  client ReforgedClient\n  prompt #\"\n    Generate initial districts for the world based on the context.\n    \n    World Context:\n    {{ context }}\n    \n    Each district should:\n    1. Have distinct traits and hazards\n    2. Include relevant factions\n    3. Support the world's themes\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate the world root situation\nfunction GenerateWorldRootSituation(world_context: WorldContext, player_state: PlayerState) -> Situation {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Generate the world root situation that serves as the starting point for all narrative paths.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    The world root situation should:\n    1. Introduce the player to the world setting\n    2. Provide meaningful initial choices that can lead to different arcs\n    3. Set the tone and atmosphere of the world\n    4. Be broad enough to connect to various storylines\n    5. Include context tags that facilitate bridging to other situations\n    6. NOT have an arc_outcome (this is never a leaf node)\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test case\ntest world_context_generation {\n  functions [CheckTechnologyNeeds, CheckFactionNeeds, GenerateTechnology, GenerateFaction, GenerateDistricts]\n  args {\n    context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation_description \"A memory trader offers to sell you someone else's combat experience, but warns it might contain dangerous side effects.\"\n  }\n} ",
}

def get_baml_files():
    return file_map