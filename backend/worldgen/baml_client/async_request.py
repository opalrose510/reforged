###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type
from typing_extensions import NotRequired, Literal

import baml_py

from . import types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class AsyncHttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def AddBridgeChoiceToSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,source_situation: types.Situation,target_situation: types.Situation,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AddBridgeChoiceToSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
          "source_situation": source_situation,
          "target_situation": target_situation,
          "all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def AugmentSituationWithChoices(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,situation: types.Situation,existing_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AugmentSituationWithChoices",
        {
          "world_context": world_context,
          "player_state": player_state,
          "situation": situation,
          "existing_situations": existing_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def CheckBridgeAttributeNeeds(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckBridgeAttributeNeeds",
        {
          "bridge_node": bridge_node,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def CheckChoiceAttributeNeeds(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def CheckFactionNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckFactionNeeds",
        {
          "context": context,
          "situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def CheckIfLeafNode(
        self,
        situation: types.Situation,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckIfLeafNode",
        {
          "situation": situation,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def CheckReachabilityFromRoot(
        self,
        world_root: types.Situation,all_situations: List[types.Situation],all_bridges: List[types.BridgeSituation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckReachabilityFromRoot",
        {
          "world_root": world_root,
          "all_situations": all_situations,
          "all_bridges": all_bridges,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def CheckTechnologyNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckTechnologyNeeds",
        {
          "context": context,
          "situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def DetectSoftLockCycles(
        self,
        all_situations: List[types.Situation],all_bridges: List[types.BridgeSituation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "DetectSoftLockCycles",
        {
          "all_situations": all_situations,
          "all_bridges": all_bridges,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def ExpandArcSituations(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ExpandArcSituations",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc": arc,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def FindBridgeConnections(
        self,
        bridgeable_situations: List[types.BridgeableSituation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "FindBridgeConnections",
        {
          "bridgeable_situations": bridgeable_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateArcSeed(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,title: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateArcSeed",
        {
          "world_context": world_context,
          "player_state": player_state,
          "title": title,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateArcTitles(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateArcTitles",
        {
          "world_context": world_context,
          "player_state": player_state,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateBridgeAttribute(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateBridgeAttribute",
        {
          "bridge_node": bridge_node,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateBridgeSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,source_situations: List[types.Situation],target_situations: List[types.Situation],all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateBridgeSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
          "source_situations": source_situations,
          "target_situations": target_situations,
          "all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateChoiceAttribute(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateChoiceAttribute",
        {
          "choice": choice,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateDistricts(
        self,
        context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateDistricts",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateEventsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateFaction(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateFaction",
        {
          "context": context,
          "situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateInitialAttributes(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateInitialAttributes",
        {
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateItemsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateLocationsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateNPCsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GeneratePlayerProfile(
        self,
        world_context: types.WorldContext,stats: types.PlayerStats,attributes: List[types.PlayerAttribute],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,
          "stats": stats,
          "attributes": attributes,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateQuestsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateRootSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc_seed: types.ArcSeed,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateRootSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc_seed": arc_seed,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateSituationForChoice(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,choice: types.Choice,parent_situation: types.Situation,existing_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,
          "player_state": player_state,
          "choice": choice,
          "parent_situation": parent_situation,
          "existing_situations": existing_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateTechnology(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateTechnology",
        {
          "context": context,
          "situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def GenerateWorldRootSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateWorldRootSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def IdentifyBridgeGroups(
        self,
        world_context: types.WorldContext,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "IdentifyBridgeGroups",
        {
          "world_context": world_context,
          "all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def IdentifyBridgeableSituations(
        self,
        arcs: List[types.Arc],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "IdentifyBridgeableSituations",
        {
          "arcs": arcs,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def IdentifyDirectBridgeConnections(
        self,
        world_context: types.WorldContext,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "IdentifyDirectBridgeConnections",
        {
          "world_context": world_context,
          "all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def InitializePlayerStats(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "InitializePlayerStats",
        {
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    async def ValidateBridgeConnections(
        self,
        bridge_nodes: List[types.BridgeNode],arcs: List[types.Arc],world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ValidateBridgeConnections",
        {
          "bridge_nodes": bridge_nodes,
          "arcs": arcs,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class AsyncHttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    async def AddBridgeChoiceToSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,source_situation: types.Situation,target_situation: types.Situation,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AddBridgeChoiceToSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
          "source_situation": source_situation,
          "target_situation": target_situation,
          "all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def AugmentSituationWithChoices(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,situation: types.Situation,existing_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "AugmentSituationWithChoices",
        {
          "world_context": world_context,
          "player_state": player_state,
          "situation": situation,
          "existing_situations": existing_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def CheckBridgeAttributeNeeds(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckBridgeAttributeNeeds",
        {
          "bridge_node": bridge_node,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def CheckChoiceAttributeNeeds(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def CheckFactionNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckFactionNeeds",
        {
          "context": context,
          "situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def CheckIfLeafNode(
        self,
        situation: types.Situation,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckIfLeafNode",
        {
          "situation": situation,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def CheckReachabilityFromRoot(
        self,
        world_root: types.Situation,all_situations: List[types.Situation],all_bridges: List[types.BridgeSituation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckReachabilityFromRoot",
        {
          "world_root": world_root,
          "all_situations": all_situations,
          "all_bridges": all_bridges,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def CheckTechnologyNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "CheckTechnologyNeeds",
        {
          "context": context,
          "situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def DetectSoftLockCycles(
        self,
        all_situations: List[types.Situation],all_bridges: List[types.BridgeSituation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "DetectSoftLockCycles",
        {
          "all_situations": all_situations,
          "all_bridges": all_bridges,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def ExpandArcSituations(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ExpandArcSituations",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc": arc,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def FindBridgeConnections(
        self,
        bridgeable_situations: List[types.BridgeableSituation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "FindBridgeConnections",
        {
          "bridgeable_situations": bridgeable_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateArcSeed(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,title: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateArcSeed",
        {
          "world_context": world_context,
          "player_state": player_state,
          "title": title,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateArcTitles(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateArcTitles",
        {
          "world_context": world_context,
          "player_state": player_state,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateBridgeAttribute(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateBridgeAttribute",
        {
          "bridge_node": bridge_node,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateBridgeSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,source_situations: List[types.Situation],target_situations: List[types.Situation],all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateBridgeSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
          "source_situations": source_situations,
          "target_situations": target_situations,
          "all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateChoiceAttribute(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateChoiceAttribute",
        {
          "choice": choice,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateDistricts(
        self,
        context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateDistricts",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateEventsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateFaction(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateFaction",
        {
          "context": context,
          "situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateInitialAttributes(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateInitialAttributes",
        {
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateItemsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateLocationsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateNPCsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GeneratePlayerProfile(
        self,
        world_context: types.WorldContext,stats: types.PlayerStats,attributes: List[types.PlayerAttribute],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,
          "stats": stats,
          "attributes": attributes,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateQuestsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateRootSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc_seed: types.ArcSeed,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateRootSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc_seed": arc_seed,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateSituationForChoice(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,choice: types.Choice,parent_situation: types.Situation,existing_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,
          "player_state": player_state,
          "choice": choice,
          "parent_situation": parent_situation,
          "existing_situations": existing_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateTechnology(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateTechnology",
        {
          "context": context,
          "situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def GenerateWorldRootSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "GenerateWorldRootSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def IdentifyBridgeGroups(
        self,
        world_context: types.WorldContext,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "IdentifyBridgeGroups",
        {
          "world_context": world_context,
          "all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def IdentifyBridgeableSituations(
        self,
        arcs: List[types.Arc],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "IdentifyBridgeableSituations",
        {
          "arcs": arcs,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def IdentifyDirectBridgeConnections(
        self,
        world_context: types.WorldContext,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "IdentifyDirectBridgeConnections",
        {
          "world_context": world_context,
          "all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def InitializePlayerStats(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "InitializePlayerStats",
        {
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    async def ValidateBridgeConnections(
        self,
        bridge_nodes: List[types.BridgeNode],arcs: List[types.Arc],world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return await self.__runtime.build_request(
        "ValidateBridgeConnections",
        {
          "bridge_nodes": bridge_nodes,
          "arcs": arcs,
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["AsyncHttpRequest", "AsyncHttpStreamRequest"]