###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class ActionAndReasoning(BaseModel):
    action: Optional[Union["CreateNPC", "CreateFaction", "CreateTechnology", "CreateSituation", "CreateMultipleSituations", "CreateChoices", "CreateArc", "CreateArcOutcome", "GoToSituation", "UpOneLevel", "DownOneLevel", "GoToArcRoot", "GoToWorldRoot", "GetSituationById", "FindMissingSituations", "IdentifyNarrativeGaps"]] = None
    generated_description: Optional[str] = None
    reasoning: Optional[str] = None

class Arc(BaseModel):
    seed: Optional["ArcSeed"] = None
    situations: List["Situation"]
    outcomes: List["ArcOutcome"]

class ArcOutcome(BaseModel):
    id: Optional[str] = None
    description: Optional[str] = None
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None
    tags: List[str]
    estimated_duration: Optional[int] = None

class ArcSeed(BaseModel):
    title: Optional[str] = None
    core_conflict: Optional[str] = None
    theme_tags: List[str]
    tone: Optional[str] = None
    factions_involved: List[str]
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class Choice(BaseModel):
    id: Optional[str] = None
    text: Optional[str] = None
    dialogue_response: Optional[str] = None
    choice_type: Optional[str] = None
    emotional_tone: Optional[str] = None
    body_language: Optional[str] = None
    requirements: Optional[Dict[str, Optional[int]]] = None
    attributes_gained: List["PlayerAttribute"]
    attributes_lost: List[str]
    stat_changes: Dict[str, Optional[int]]
    next_situation_id: Optional[str] = None
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None
    new_npcs: List["NPC"]
    new_factions: List["Faction"]
    new_technologies: List["Technology"]

class CreateArc(BaseModel):
    tool_name: Optional[Literal["create_arc"]] = None
    reason: Optional[str] = None
    generated_arc: Optional["Arc"] = None

class CreateArcOutcome(BaseModel):
    tool_name: Optional[Literal["create_arc_outcome"]] = None
    reason: Optional[str] = None
    generated_arc_outcome: Optional["ArcOutcome"] = None

class CreateChoices(BaseModel):
    tool_name: Optional[Literal["create_choices"]] = None
    reason: Optional[str] = None
    generated_choices: List["Choice"]

class CreateFaction(BaseModel):
    tool_name: Optional[Literal["create_faction"]] = None
    reason: Optional[str] = None
    generated_faction: Optional["Faction"] = None

class CreateMultipleSituations(BaseModel):
    tool_name: Optional[Literal["create_multiple_situations"]] = None
    reason: Optional[str] = None
    generated_situations: List["Situation"]

class CreateNPC(BaseModel):
    tool_name: Optional[Literal["create_npc"]] = None
    reason: Optional[str] = None
    generated_npc: Optional["NPC"] = None

class CreateSituation(BaseModel):
    tool_name: Optional[Literal["create_situation"]] = None
    reason: Optional[str] = None
    generated_situation: Optional["Situation"] = None

class CreateTechnology(BaseModel):
    tool_name: Optional[Literal["create_technology"]] = None
    reason: Optional[str] = None
    generated_technology: Optional["Technology"] = None

class District(BaseModel):
    id: Optional[str] = None
    traits: List[str]
    hazards: List[str]
    factions: List[str]
    description: Optional[str] = None
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class DownOneLevel(BaseModel):
    tool_name: Optional[Literal["down_one_level"]] = None
    reason: Optional[str] = None

class Event(BaseModel):
    id: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None
    triggers: List[str]
    consequences: Dict[str, Optional[str]]
    affected_npcs: List[str]
    affected_locations: List[str]
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class Faction(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    ideology: Optional[str] = None
    location: Optional[str] = None
    influence_level: Optional[int] = None
    relationships: Optional[Dict[str, Optional[str]]] = None
    hazards: Optional[List[str]] = None
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class FindMissingSituations(BaseModel):
    tool_name: Optional[Literal["find_missing_situations"]] = None
    reason: Optional[str] = None
    missing_situations: List["Situation"]

class GetSituationById(BaseModel):
    tool_name: Optional[Literal["get_situation_by_id"]] = None
    reason: Optional[str] = None
    situation_id: Optional[str] = None

class GoToArcRoot(BaseModel):
    tool_name: Optional[Literal["go_to_arc_root"]] = None
    reason: Optional[str] = None

class GoToSituation(BaseModel):
    tool_name: Optional[Literal["go_to_situation"]] = None
    reason: Optional[str] = None
    situation_id: Optional[str] = None

class GoToWorldRoot(BaseModel):
    tool_name: Optional[Literal["go_to_world_root"]] = None
    reason: Optional[str] = None

class IdentifyNarrativeGaps(BaseModel):
    tool_name: Optional[Literal["identify_narrative_gaps"]] = None
    reason: Optional[str] = None
    narrative_gaps: List[str]

class Item(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None
    description: Optional[str] = None
    effects: Dict[str, Optional[int]]
    requirements: Dict[str, Optional[int]]
    rarity: Optional[str] = None
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class JoinSituationOutput(BaseModel):
    from_situation_id: Optional[str] = None
    to_situation_id: Optional[str] = None
    reason: Optional[str] = None
    choice: Optional["Choice"] = None

class Location(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    type: Optional[str] = None
    description: Optional[str] = None
    traits: List[str]
    hazards: List[str]
    connected_locations: List[str]
    npcs_present: List[str]
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class NPC(BaseModel):
    id: Optional[str] = None
    name: Optional[str] = None
    role: Optional[str] = None
    description: Optional[str] = None
    personality_traits: List[str]
    relationships: Dict[str, Optional[str]]
    faction_affiliations: List[str]
    location_id: Optional[str] = None
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class PlayerAttribute(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None
    description: Optional[str] = None
    stat_mods: Optional[Dict[str, Optional[int]]] = None

class PlayerProfile(BaseModel):
    narrative_summary: Optional[str] = None
    key_traits: List[str]
    background_hints: List[str]

class PlayerState(BaseModel):
    name: Optional[str] = None
    stats: Optional["PlayerStats"] = None
    attributes: List["PlayerAttribute"]
    profile: Optional["PlayerProfile"] = None
    history: List[str]

class PlayerStats(BaseModel):
    might: Optional[int] = None
    insight: Optional[int] = None
    nimbleness: Optional[int] = None
    destiny: Optional[int] = None
    savvy: Optional[int] = None
    expertise: Optional[int] = None
    tenacity: Optional[int] = None
    station: Optional[int] = None
    opulence: Optional[int] = None
    celebrity: Optional[int] = None
    integrity: Optional[int] = None
    allure: Optional[int] = None
    lineage: Optional[int] = None

class Quest(BaseModel):
    id: Optional[str] = None
    title: Optional[str] = None
    description: Optional[str] = None
    type: Optional[str] = None
    objectives: List[str]
    rewards: Dict[str, Optional[int]]
    requirements: Dict[str, Optional[int]]
    related_npcs: List[str]
    related_locations: List[str]
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class Resume(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    experience: List[str]
    skills: List[str]

class ShortActionAndReasoning(BaseModel):
    action: Optional[str] = None
    generated_description: Optional[str] = None
    reasoning: Optional[str] = None

class Situation(BaseModel):
    id: Optional[str] = None
    description: Optional[str] = None
    player_perspective_description: Optional[str] = None
    choices: List["Choice"]
    stat_requirements: List["StatRequirement"]
    bridgeable: Optional[bool] = None
    context_tags: List[str]
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class StatDescriptors(BaseModel):
    might_descriptors: Dict[str, Optional[str]]
    insight_descriptors: Dict[str, Optional[str]]
    nimbleness_descriptors: Dict[str, Optional[str]]
    destiny_descriptors: Dict[str, Optional[str]]
    savvy_descriptors: Dict[str, Optional[str]]
    expertise_descriptors: Dict[str, Optional[str]]
    tenacity_descriptors: Dict[str, Optional[str]]
    station_descriptors: Dict[str, Optional[str]]
    opulence_descriptors: Dict[str, Optional[str]]
    celebrity_descriptors: Dict[str, Optional[str]]
    integrity_descriptors: Dict[str, Optional[str]]
    allure_descriptors: Dict[str, Optional[str]]
    lineage_descriptors: Dict[str, Optional[str]]

class StatRequirement(BaseModel):
    attribute_name: Optional[Union[Literal["might"], Literal["insight"], Literal["nimbleness"], Literal["destiny"], Literal["savvy"], Literal["expertise"], Literal["tenacity"], Literal["station"], Literal["opulence"], Literal["celebrity"], Literal["integrity"], Literal["allure"], Literal["lineage"]]] = None
    min_value: Optional[int] = None

class Technology(BaseModel):
    name: Optional[str] = None
    description: Optional[str] = None
    impact: Optional[str] = None
    limitations: Optional[str] = None
    hazards: Optional[List[str]] = None
    factions: Optional[List[str]] = None
    traits: Optional[List[str]] = None
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None

class UpOneLevel(BaseModel):
    tool_name: Optional[Literal["up_one_level"]] = None
    reason: Optional[str] = None

class WorldContext(BaseModel):
    seed: Optional["WorldSeed"] = None
    technologies: List["Technology"]
    factions: List["Faction"]
    districts: List["District"]
    npcs: List["NPC"]
    tension_sliders: Dict[str, Optional[int]]
    world_root: Optional["Situation"] = None

class WorldSeed(BaseModel):
    name: Optional[str] = None
    themes: List[str]
    high_concept: Optional[str] = None
    internal_hint: Optional[str] = None
    internal_justification: Optional[str] = None
