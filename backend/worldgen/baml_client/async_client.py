###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, TypeVar, Union, TypedDict, Type, cast
from typing_extensions import NotRequired, Literal
import pprint

import baml_py
from pydantic import BaseModel, ValidationError, create_model

from . import partial_types, types
from .types import Checked, Check
from .type_builder import TypeBuilder
from .parser import LlmResponseParser, LlmStreamParser
from .async_request import AsyncHttpRequest, AsyncHttpStreamRequest
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME

OutputType = TypeVar('OutputType')


# Define the TypedDict with optional parameters having default values
class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]
    collector: NotRequired[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]]


class BamlAsyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"
    __http_request: "AsyncHttpRequest"
    __http_stream_request: "AsyncHttpStreamRequest"
    __llm_response_parser: LlmResponseParser
    __llm_stream_parser: LlmStreamParser
    __baml_options: BamlCallOptions

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager, baml_options)
      self.__http_request = AsyncHttpRequest(self.__runtime, self.__ctx_manager)
      self.__http_stream_request = AsyncHttpStreamRequest(self.__runtime, self.__ctx_manager)
      self.__llm_response_parser = LlmResponseParser(self.__runtime, self.__ctx_manager)
      self.__llm_stream_parser = LlmStreamParser(self.__runtime, self.__ctx_manager)
      self.__baml_options = baml_options or {}

    def with_options(
      self,
      tb: Optional[TypeBuilder] = None,
      client_registry: Optional[baml_py.baml_py.ClientRegistry] = None,
      collector: Optional[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]] = None,
    ) -> "BamlAsyncClient":
      """
      Returns a new instance of BamlAsyncClient with explicitly typed baml options
      for Python 3.8 compatibility.
      """
      new_options = self.__baml_options.copy()

      # Override if any keyword arguments were provided.
      if tb is not None:
          new_options["tb"] = tb
      if client_registry is not None:
          new_options["client_registry"] = client_registry
      if collector is not None:
          new_options["collector"] = collector

      return BamlAsyncClient(self.__runtime, self.__ctx_manager, new_options)

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser

    
    async def AugmentSituationChoices(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Choice]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "AugmentSituationChoices",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Choice], raw.cast_to(types, types, partial_types, False))
    
    async def CheckBridgeAttributeNeeds(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> bool:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "CheckBridgeAttributeNeeds",
        {
          "bridge_node": bridge_node,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(bool, raw.cast_to(types, types, partial_types, False))
    
    async def CheckChoiceAttributeNeeds(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> bool:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(bool, raw.cast_to(types, types, partial_types, False))
    
    async def CheckFactionNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> bool:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "CheckFactionNeeds",
        {
          "context": context,"situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(bool, raw.cast_to(types, types, partial_types, False))
    
    async def CheckTechnologyNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> bool:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "CheckTechnologyNeeds",
        {
          "context": context,"situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(bool, raw.cast_to(types, types, partial_types, False))
    
    async def CreateFaction(
        self,
        world_context: types.WorldContext,current_situation: types.Situation,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> types.Faction:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "CreateFaction",
        {
          "world_context": world_context,"current_situation": current_situation,"arc": arc,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Faction, raw.cast_to(types, types, partial_types, False))
    
    async def CreateNPC(
        self,
        world_context: types.WorldContext,current_situation: types.Situation,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> types.NPC:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "CreateNPC",
        {
          "world_context": world_context,"current_situation": current_situation,"arc": arc,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.NPC, raw.cast_to(types, types, partial_types, False))
    
    async def CreateTechnology(
        self,
        world_context: types.WorldContext,current_situation: types.Situation,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> types.Technology:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "CreateTechnology",
        {
          "world_context": world_context,"current_situation": current_situation,"arc": arc,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Technology, raw.cast_to(types, types, partial_types, False))
    
    async def ExpandArcSituations(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Situation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ExpandArcSituations",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Situation], raw.cast_to(types, types, partial_types, False))
    
    async def FindBridgeConnections(
        self,
        bridgeable_situations: List[types.BridgeableSituation],
        baml_options: BamlCallOptions = {},
    ) -> List[types.BridgeNode]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "FindBridgeConnections",
        {
          "bridgeable_situations": bridgeable_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.BridgeNode], raw.cast_to(types, types, partial_types, False))
    
    async def GenerateArcSeed(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,title: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ArcSeed:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateArcSeed",
        {
          "world_context": world_context,"player_state": player_state,"title": title,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ArcSeed, raw.cast_to(types, types, partial_types, False))
    
    async def GenerateArcTitles(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,count: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> List[str]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateArcTitles",
        {
          "world_context": world_context,"player_state": player_state,"count": count,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[str], raw.cast_to(types, types, partial_types, False))
    
    async def GenerateBridgeAttribute(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> types.PlayerAttribute:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateBridgeAttribute",
        {
          "bridge_node": bridge_node,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PlayerAttribute, raw.cast_to(types, types, partial_types, False))
    
    async def GenerateBridgeSituations(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,bridge_nodes: List[types.BridgeNode],
        baml_options: BamlCallOptions = {},
    ) -> List[types.Situation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateBridgeSituations",
        {
          "world_context": world_context,"player_state": player_state,"bridge_nodes": bridge_nodes,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Situation], raw.cast_to(types, types, partial_types, False))
    
    async def GenerateChoiceAttribute(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> types.PlayerAttribute:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateChoiceAttribute",
        {
          "choice": choice,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PlayerAttribute, raw.cast_to(types, types, partial_types, False))
    
    async def GenerateChoiceSituationResult(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,choice: types.Choice,
        baml_options: BamlCallOptions = {},
    ) -> types.Situation:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateChoiceSituationResult",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Situation, raw.cast_to(types, types, partial_types, False))
    
    async def GenerateDistricts(
        self,
        context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> List[types.District]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateDistricts",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.District], raw.cast_to(types, types, partial_types, False))
    
    async def GenerateEventsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Event]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Event], raw.cast_to(types, types, partial_types, False))
    
    async def GenerateFaction(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Faction:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateFaction",
        {
          "context": context,"situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Faction, raw.cast_to(types, types, partial_types, False))
    
    async def GenerateInitialAttributes(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> List[types.PlayerAttribute]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateInitialAttributes",
        {
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.PlayerAttribute], raw.cast_to(types, types, partial_types, False))
    
    async def GenerateItemsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Item]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Item], raw.cast_to(types, types, partial_types, False))
    
    async def GenerateLocationsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Location]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Location], raw.cast_to(types, types, partial_types, False))
    
    async def GenerateMissingSituationsForChoice(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,choice: types.Choice,
        baml_options: BamlCallOptions = {},
    ) -> types.Situation:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateMissingSituationsForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Situation, raw.cast_to(types, types, partial_types, False))
    
    async def GenerateNPCsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.NPC]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.NPC], raw.cast_to(types, types, partial_types, False))
    
    async def GeneratePlayerProfile(
        self,
        world_context: types.WorldContext,stats: types.PlayerStats,attributes: List[types.PlayerAttribute],
        baml_options: BamlCallOptions = {},
    ) -> types.PlayerProfile:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,"stats": stats,"attributes": attributes,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PlayerProfile, raw.cast_to(types, types, partial_types, False))
    
    async def GenerateQuestsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Quest]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Quest], raw.cast_to(types, types, partial_types, False))
    
    async def GenerateRootSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc_seed: types.ArcSeed,
        baml_options: BamlCallOptions = {},
    ) -> types.Situation:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateRootSituation",
        {
          "world_context": world_context,"player_state": player_state,"arc_seed": arc_seed,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Situation, raw.cast_to(types, types, partial_types, False))
    
    async def GenerateSituationForChoice(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,choice: types.Choice,
        baml_options: BamlCallOptions = {},
    ) -> types.Situation:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Situation, raw.cast_to(types, types, partial_types, False))
    
    async def GenerateTechnology(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Technology:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GenerateTechnology",
        {
          "context": context,"situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Technology, raw.cast_to(types, types, partial_types, False))
    
    async def GetDefaultStatDescriptors(
        self,
        
        baml_options: BamlCallOptions = {},
    ) -> types.StatDescriptors:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GetDefaultStatDescriptors",
        {
          
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.StatDescriptors, raw.cast_to(types, types, partial_types, False))
    
    async def GetStatNarrative(
        self,
        stat_name: str,stat_value: int,descriptors: types.StatDescriptors,
        baml_options: BamlCallOptions = {},
    ) -> str:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "GetStatNarrative",
        {
          "stat_name": stat_name,"stat_value": stat_value,"descriptors": descriptors,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(str, raw.cast_to(types, types, partial_types, False))
    
    async def IdentifyBridgeableSituations(
        self,
        arcs: List[types.Arc],
        baml_options: BamlCallOptions = {},
    ) -> List[types.BridgeableSituation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "IdentifyBridgeableSituations",
        {
          "arcs": arcs,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.BridgeableSituation], raw.cast_to(types, types, partial_types, False))
    
    async def IdentifyMissingSituations(
        self,
        world_context: types.WorldContext,arcs: List[types.Arc],
        baml_options: BamlCallOptions = {},
    ) -> List[str]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "IdentifyMissingSituations",
        {
          "world_context": world_context,"arcs": arcs,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[str], raw.cast_to(types, types, partial_types, False))
    
    async def InitializePlayerStats(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> types.PlayerStats:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "InitializePlayerStats",
        {
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PlayerStats, raw.cast_to(types, types, partial_types, False))
    
    async def LegacySelectGenerationTool(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> str:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "LegacySelectGenerationTool",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(str, raw.cast_to(types, types, partial_types, False))
    
    async def SelectGenerationTool(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,current_situation: types.Situation,arc: types.Arc,distance_from_completed_story: int,
        baml_options: BamlCallOptions = {},
    ) -> Union[Literal["create_npc"], Literal["create_faction"], Literal["create_technology"], Literal["create_situation"], Literal["create_choices"], Literal["create_arc"], Literal["update_situation"], Literal["update_choice"], Literal["update_arc"], Literal["go_to_situation"], Literal["up_one_level"], Literal["down_one_level"], Literal["go_to_arc_root"], Literal["go_to_world_root"], Literal["get_situation_by_id"], Literal["get_player_state"], Literal["find_missing_situations"], Literal["identify_narrative_gaps"], Literal["story_so_far"]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "SelectGenerationTool",
        {
          "world_context": world_context,"player_state": player_state,"current_situation": current_situation,"arc": arc,"distance_from_completed_story": distance_from_completed_story,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(Union[Literal["create_npc"], Literal["create_faction"], Literal["create_technology"], Literal["create_situation"], Literal["create_choices"], Literal["create_arc"], Literal["update_situation"], Literal["update_choice"], Literal["update_arc"], Literal["go_to_situation"], Literal["up_one_level"], Literal["down_one_level"], Literal["go_to_arc_root"], Literal["go_to_world_root"], Literal["get_situation_by_id"], Literal["get_player_state"], Literal["find_missing_situations"], Literal["identify_narrative_gaps"], Literal["story_so_far"]], raw.cast_to(types, types, partial_types, False))
    
    async def ValidateBridgeConnections(
        self,
        bridge_nodes: List[types.BridgeNode],arcs: List[types.Arc],world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> List[types.BridgeNode]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}

      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = await self.__runtime.call_function(
        "ValidateBridgeConnections",
        {
          "bridge_nodes": bridge_nodes,"arcs": arcs,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.BridgeNode], raw.cast_to(types, types, partial_types, False))
    


class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __baml_options: BamlCallOptions
    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__baml_options = baml_options or {}

    
    def AugmentSituationChoices(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Choice], List[types.Choice]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "AugmentSituationChoices",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc": arc,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Choice], List[types.Choice]](
        raw,
        lambda x: cast(List[partial_types.Choice], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Choice], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CheckBridgeAttributeNeeds(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[bool], bool]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "CheckBridgeAttributeNeeds",
        {
          "bridge_node": bridge_node,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[Optional[bool], bool](
        raw,
        lambda x: cast(Optional[bool], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(bool, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CheckChoiceAttributeNeeds(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[bool], bool]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[Optional[bool], bool](
        raw,
        lambda x: cast(Optional[bool], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(bool, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CheckFactionNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[bool], bool]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "CheckFactionNeeds",
        {
          "context": context,
          "situation_description": situation_description,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[Optional[bool], bool](
        raw,
        lambda x: cast(Optional[bool], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(bool, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CheckTechnologyNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[bool], bool]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "CheckTechnologyNeeds",
        {
          "context": context,
          "situation_description": situation_description,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[Optional[bool], bool](
        raw,
        lambda x: cast(Optional[bool], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(bool, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CreateFaction(
        self,
        world_context: types.WorldContext,current_situation: types.Situation,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Faction, types.Faction]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "CreateFaction",
        {
          "world_context": world_context,
          "current_situation": current_situation,
          "arc": arc,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Faction, types.Faction](
        raw,
        lambda x: cast(partial_types.Faction, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Faction, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CreateNPC(
        self,
        world_context: types.WorldContext,current_situation: types.Situation,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.NPC, types.NPC]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "CreateNPC",
        {
          "world_context": world_context,
          "current_situation": current_situation,
          "arc": arc,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.NPC, types.NPC](
        raw,
        lambda x: cast(partial_types.NPC, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.NPC, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CreateTechnology(
        self,
        world_context: types.WorldContext,current_situation: types.Situation,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Technology, types.Technology]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "CreateTechnology",
        {
          "world_context": world_context,
          "current_situation": current_situation,
          "arc": arc,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Technology, types.Technology](
        raw,
        lambda x: cast(partial_types.Technology, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Technology, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExpandArcSituations(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Situation], List[types.Situation]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ExpandArcSituations",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc": arc,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Situation], List[types.Situation]](
        raw,
        lambda x: cast(List[partial_types.Situation], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Situation], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def FindBridgeConnections(
        self,
        bridgeable_situations: List[types.BridgeableSituation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.BridgeNode], List[types.BridgeNode]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "FindBridgeConnections",
        {
          "bridgeable_situations": bridgeable_situations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.BridgeNode], List[types.BridgeNode]](
        raw,
        lambda x: cast(List[partial_types.BridgeNode], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.BridgeNode], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateArcSeed(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,title: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.ArcSeed, types.ArcSeed]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateArcSeed",
        {
          "world_context": world_context,
          "player_state": player_state,
          "title": title,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.ArcSeed, types.ArcSeed](
        raw,
        lambda x: cast(partial_types.ArcSeed, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ArcSeed, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateArcTitles(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,count: Optional[int],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[Optional[str]], List[str]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateArcTitles",
        {
          "world_context": world_context,
          "player_state": player_state,
          "count": count,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[Optional[str]], List[str]](
        raw,
        lambda x: cast(List[Optional[str]], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[str], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateBridgeAttribute(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.PlayerAttribute, types.PlayerAttribute]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateBridgeAttribute",
        {
          "bridge_node": bridge_node,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.PlayerAttribute, types.PlayerAttribute](
        raw,
        lambda x: cast(partial_types.PlayerAttribute, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PlayerAttribute, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateBridgeSituations(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,bridge_nodes: List[types.BridgeNode],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Situation], List[types.Situation]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateBridgeSituations",
        {
          "world_context": world_context,
          "player_state": player_state,
          "bridge_nodes": bridge_nodes,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Situation], List[types.Situation]](
        raw,
        lambda x: cast(List[partial_types.Situation], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Situation], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateChoiceAttribute(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.PlayerAttribute, types.PlayerAttribute]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateChoiceAttribute",
        {
          "choice": choice,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.PlayerAttribute, types.PlayerAttribute](
        raw,
        lambda x: cast(partial_types.PlayerAttribute, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PlayerAttribute, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateChoiceSituationResult(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,choice: types.Choice,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Situation, types.Situation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateChoiceSituationResult",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc": arc,
          "choice": choice,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Situation, types.Situation](
        raw,
        lambda x: cast(partial_types.Situation, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Situation, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateDistricts(
        self,
        context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.District], List[types.District]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateDistricts",
        {
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.District], List[types.District]](
        raw,
        lambda x: cast(List[partial_types.District], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.District], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateEventsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Event], List[types.Event]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Event], List[types.Event]](
        raw,
        lambda x: cast(List[partial_types.Event], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Event], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateFaction(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Faction, types.Faction]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateFaction",
        {
          "context": context,
          "situation_description": situation_description,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Faction, types.Faction](
        raw,
        lambda x: cast(partial_types.Faction, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Faction, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateInitialAttributes(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.PlayerAttribute], List[types.PlayerAttribute]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateInitialAttributes",
        {
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.PlayerAttribute], List[types.PlayerAttribute]](
        raw,
        lambda x: cast(List[partial_types.PlayerAttribute], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.PlayerAttribute], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateItemsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Item], List[types.Item]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Item], List[types.Item]](
        raw,
        lambda x: cast(List[partial_types.Item], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Item], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateLocationsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Location], List[types.Location]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Location], List[types.Location]](
        raw,
        lambda x: cast(List[partial_types.Location], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Location], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateMissingSituationsForChoice(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,choice: types.Choice,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Situation, types.Situation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateMissingSituationsForChoice",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc": arc,
          "choice": choice,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Situation, types.Situation](
        raw,
        lambda x: cast(partial_types.Situation, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Situation, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateNPCsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.NPC], List[types.NPC]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.NPC], List[types.NPC]](
        raw,
        lambda x: cast(List[partial_types.NPC], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.NPC], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GeneratePlayerProfile(
        self,
        world_context: types.WorldContext,stats: types.PlayerStats,attributes: List[types.PlayerAttribute],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.PlayerProfile, types.PlayerProfile]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,
          "stats": stats,
          "attributes": attributes,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.PlayerProfile, types.PlayerProfile](
        raw,
        lambda x: cast(partial_types.PlayerProfile, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PlayerProfile, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateQuestsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.Quest], List[types.Quest]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.Quest], List[types.Quest]](
        raw,
        lambda x: cast(List[partial_types.Quest], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Quest], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateRootSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc_seed: types.ArcSeed,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Situation, types.Situation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateRootSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc_seed": arc_seed,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Situation, types.Situation](
        raw,
        lambda x: cast(partial_types.Situation, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Situation, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateSituationForChoice(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,choice: types.Choice,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Situation, types.Situation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc": arc,
          "choice": choice,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Situation, types.Situation](
        raw,
        lambda x: cast(partial_types.Situation, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Situation, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateTechnology(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.Technology, types.Technology]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GenerateTechnology",
        {
          "context": context,
          "situation_description": situation_description,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.Technology, types.Technology](
        raw,
        lambda x: cast(partial_types.Technology, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Technology, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GetDefaultStatDescriptors(
        self,
        
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.StatDescriptors, types.StatDescriptors]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GetDefaultStatDescriptors",
        {
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.StatDescriptors, types.StatDescriptors](
        raw,
        lambda x: cast(partial_types.StatDescriptors, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.StatDescriptors, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GetStatNarrative(
        self,
        stat_name: str,stat_value: int,descriptors: types.StatDescriptors,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[str], str]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "GetStatNarrative",
        {
          "stat_name": stat_name,
          "stat_value": stat_value,
          "descriptors": descriptors,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[Optional[str], str](
        raw,
        lambda x: cast(Optional[str], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(str, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def IdentifyBridgeableSituations(
        self,
        arcs: List[types.Arc],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.BridgeableSituation], List[types.BridgeableSituation]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "IdentifyBridgeableSituations",
        {
          "arcs": arcs,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.BridgeableSituation], List[types.BridgeableSituation]](
        raw,
        lambda x: cast(List[partial_types.BridgeableSituation], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.BridgeableSituation], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def IdentifyMissingSituations(
        self,
        world_context: types.WorldContext,arcs: List[types.Arc],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[Optional[str]], List[str]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "IdentifyMissingSituations",
        {
          "world_context": world_context,
          "arcs": arcs,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[Optional[str]], List[str]](
        raw,
        lambda x: cast(List[Optional[str]], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[str], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def InitializePlayerStats(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[partial_types.PlayerStats, types.PlayerStats]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "InitializePlayerStats",
        {
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[partial_types.PlayerStats, types.PlayerStats](
        raw,
        lambda x: cast(partial_types.PlayerStats, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PlayerStats, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def LegacySelectGenerationTool(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[str], str]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "LegacySelectGenerationTool",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc": arc,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[Optional[str], str](
        raw,
        lambda x: cast(Optional[str], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(str, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def SelectGenerationTool(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,current_situation: types.Situation,arc: types.Arc,distance_from_completed_story: int,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[Optional[Union[Optional[Literal["create_npc"]], Optional[Literal["create_faction"]], Optional[Literal["create_technology"]], Optional[Literal["create_situation"]], Optional[Literal["create_choices"]], Optional[Literal["create_arc"]], Optional[Literal["update_situation"]], Optional[Literal["update_choice"]], Optional[Literal["update_arc"]], Optional[Literal["go_to_situation"]], Optional[Literal["up_one_level"]], Optional[Literal["down_one_level"]], Optional[Literal["go_to_arc_root"]], Optional[Literal["go_to_world_root"]], Optional[Literal["get_situation_by_id"]], Optional[Literal["get_player_state"]], Optional[Literal["find_missing_situations"]], Optional[Literal["identify_narrative_gaps"]], Optional[Literal["story_so_far"]]]], Union[Literal["create_npc"], Literal["create_faction"], Literal["create_technology"], Literal["create_situation"], Literal["create_choices"], Literal["create_arc"], Literal["update_situation"], Literal["update_choice"], Literal["update_arc"], Literal["go_to_situation"], Literal["up_one_level"], Literal["down_one_level"], Literal["go_to_arc_root"], Literal["go_to_world_root"], Literal["get_situation_by_id"], Literal["get_player_state"], Literal["find_missing_situations"], Literal["identify_narrative_gaps"], Literal["story_so_far"]]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "SelectGenerationTool",
        {
          "world_context": world_context,
          "player_state": player_state,
          "current_situation": current_situation,
          "arc": arc,
          "distance_from_completed_story": distance_from_completed_story,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[Optional[Union[Optional[Literal["create_npc"]], Optional[Literal["create_faction"]], Optional[Literal["create_technology"]], Optional[Literal["create_situation"]], Optional[Literal["create_choices"]], Optional[Literal["create_arc"]], Optional[Literal["update_situation"]], Optional[Literal["update_choice"]], Optional[Literal["update_arc"]], Optional[Literal["go_to_situation"]], Optional[Literal["up_one_level"]], Optional[Literal["down_one_level"]], Optional[Literal["go_to_arc_root"]], Optional[Literal["go_to_world_root"]], Optional[Literal["get_situation_by_id"]], Optional[Literal["get_player_state"]], Optional[Literal["find_missing_situations"]], Optional[Literal["identify_narrative_gaps"]], Optional[Literal["story_so_far"]]]], Union[Literal["create_npc"], Literal["create_faction"], Literal["create_technology"], Literal["create_situation"], Literal["create_choices"], Literal["create_arc"], Literal["update_situation"], Literal["update_choice"], Literal["update_arc"], Literal["go_to_situation"], Literal["up_one_level"], Literal["down_one_level"], Literal["go_to_arc_root"], Literal["go_to_world_root"], Literal["get_situation_by_id"], Literal["get_player_state"], Literal["find_missing_situations"], Literal["identify_narrative_gaps"], Literal["story_so_far"]]](
        raw,
        lambda x: cast(Optional[Union[Optional[Literal["create_npc"]], Optional[Literal["create_faction"]], Optional[Literal["create_technology"]], Optional[Literal["create_situation"]], Optional[Literal["create_choices"]], Optional[Literal["create_arc"]], Optional[Literal["update_situation"]], Optional[Literal["update_choice"]], Optional[Literal["update_arc"]], Optional[Literal["go_to_situation"]], Optional[Literal["up_one_level"]], Optional[Literal["down_one_level"]], Optional[Literal["go_to_arc_root"]], Optional[Literal["go_to_world_root"]], Optional[Literal["get_situation_by_id"]], Optional[Literal["get_player_state"]], Optional[Literal["find_missing_situations"]], Optional[Literal["identify_narrative_gaps"]], Optional[Literal["story_so_far"]]]], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(Union[Literal["create_npc"], Literal["create_faction"], Literal["create_technology"], Literal["create_situation"], Literal["create_choices"], Literal["create_arc"], Literal["update_situation"], Literal["update_choice"], Literal["update_arc"], Literal["go_to_situation"], Literal["up_one_level"], Literal["down_one_level"], Literal["go_to_arc_root"], Literal["go_to_world_root"], Literal["get_situation_by_id"], Literal["get_player_state"], Literal["find_missing_situations"], Literal["identify_narrative_gaps"], Literal["story_so_far"]], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ValidateBridgeConnections(
        self,
        bridge_nodes: List[types.BridgeNode],arcs: List[types.Arc],world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlStream[List[partial_types.BridgeNode], List[types.BridgeNode]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []
      raw = self.__runtime.stream_function(
        "ValidateBridgeConnections",
        {
          "bridge_nodes": bridge_nodes,
          "arcs": arcs,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlStream[List[partial_types.BridgeNode], List[types.BridgeNode]](
        raw,
        lambda x: cast(List[partial_types.BridgeNode], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.BridgeNode], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    


b = BamlAsyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b"]