###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, TypeVar, Union, TypedDict, Type, cast
from typing_extensions import NotRequired, Literal
import pprint

import baml_py
from pydantic import BaseModel, ValidationError, create_model

from . import partial_types, types
from .types import Checked, Check
from .type_builder import TypeBuilder
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
from .sync_request import HttpRequest, HttpStreamRequest
from .parser import LlmResponseParser, LlmStreamParser

OutputType = TypeVar('OutputType')


# Define the TypedDict with optional parameters having default values
class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]
    collector: NotRequired[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]]


class BamlSyncClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __stream_client: "BamlStreamClient"
    __http_request: "HttpRequest"
    __http_stream_request: "HttpStreamRequest"
    __llm_response_parser: LlmResponseParser
    __baml_options: BamlCallOptions

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__stream_client = BamlStreamClient(self.__runtime, self.__ctx_manager, baml_options)
      self.__http_request = HttpRequest(self.__runtime, self.__ctx_manager)
      self.__http_stream_request = HttpStreamRequest(self.__runtime, self.__ctx_manager)
      self.__llm_response_parser = LlmResponseParser(self.__runtime, self.__ctx_manager)
      self.__llm_stream_parser = LlmStreamParser(self.__runtime, self.__ctx_manager)
      self.__baml_options = baml_options or {}

    @property
    def stream(self):
      return self.__stream_client

    @property
    def request(self):
      return self.__http_request

    @property
    def stream_request(self):
      return self.__http_stream_request

    @property
    def parse(self):
      return self.__llm_response_parser

    @property
    def parse_stream(self):
      return self.__llm_stream_parser

    def with_options(
      self,
      tb: Optional[TypeBuilder] = None,
      client_registry: Optional[baml_py.baml_py.ClientRegistry] = None,
      collector: Optional[Union[baml_py.baml_py.Collector, List[baml_py.baml_py.Collector]]] = None,
    ) -> "BamlSyncClient":
      """
      Returns a new instance of BamlSyncClient with explicitly typed baml options
      for Python 3.8 compatibility.
      """
      new_options: BamlCallOptions = self.__baml_options.copy()

      # Override if any keyword arguments were provided.
      if tb is not None:
          new_options["tb"] = tb
      if client_registry is not None:
          new_options["client_registry"] = client_registry
      if collector is not None:
          new_options["collector"] = collector
      return BamlSyncClient(self.__runtime, self.__ctx_manager, new_options)

    
    def AddBridgeChoiceToSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,source_situation: types.Situation,target_situation: types.Situation,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> types.Choice:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "AddBridgeChoiceToSituation",
        {
          "world_context": world_context,"player_state": player_state,"source_situation": source_situation,"target_situation": target_situation,"all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Choice, raw.cast_to(types, types, partial_types, False))
    
    def AugmentSituationWithChoices(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,situation: types.Situation,existing_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> List[types.Choice]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "AugmentSituationWithChoices",
        {
          "world_context": world_context,"player_state": player_state,"situation": situation,"existing_situations": existing_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Choice], raw.cast_to(types, types, partial_types, False))
    
    def CheckBridgeAttributeNeeds(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> bool:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "CheckBridgeAttributeNeeds",
        {
          "bridge_node": bridge_node,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(bool, raw.cast_to(types, types, partial_types, False))
    
    def CheckChoiceAttributeNeeds(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> bool:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(bool, raw.cast_to(types, types, partial_types, False))
    
    def CheckFactionNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> bool:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "CheckFactionNeeds",
        {
          "context": context,"situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(bool, raw.cast_to(types, types, partial_types, False))
    
    def CheckIfLeafNode(
        self,
        situation: types.Situation,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> bool:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "CheckIfLeafNode",
        {
          "situation": situation,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(bool, raw.cast_to(types, types, partial_types, False))
    
    def CheckReachabilityFromRoot(
        self,
        world_root: types.Situation,all_situations: List[types.Situation],all_bridges: List[types.BridgeSituation],
        baml_options: BamlCallOptions = {},
    ) -> List[str]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "CheckReachabilityFromRoot",
        {
          "world_root": world_root,"all_situations": all_situations,"all_bridges": all_bridges,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[str], raw.cast_to(types, types, partial_types, False))
    
    def CheckTechnologyNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> bool:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "CheckTechnologyNeeds",
        {
          "context": context,"situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(bool, raw.cast_to(types, types, partial_types, False))
    
    def DetectSoftLockCycles(
        self,
        all_situations: List[types.Situation],all_bridges: List[types.BridgeSituation],
        baml_options: BamlCallOptions = {},
    ) -> List[List[str]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "DetectSoftLockCycles",
        {
          "all_situations": all_situations,"all_bridges": all_bridges,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[List[str]], raw.cast_to(types, types, partial_types, False))
    
    def ExpandArcSituations(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Situation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExpandArcSituations",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Situation], raw.cast_to(types, types, partial_types, False))
    
    def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Resume:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Resume, raw.cast_to(types, types, partial_types, False))
    
    def FindBridgeConnections(
        self,
        bridgeable_situations: List[types.BridgeableSituation],
        baml_options: BamlCallOptions = {},
    ) -> List[types.BridgeNode]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "FindBridgeConnections",
        {
          "bridgeable_situations": bridgeable_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.BridgeNode], raw.cast_to(types, types, partial_types, False))
    
    def GenerateArcSeed(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,title: str,
        baml_options: BamlCallOptions = {},
    ) -> types.ArcSeed:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateArcSeed",
        {
          "world_context": world_context,"player_state": player_state,"title": title,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.ArcSeed, raw.cast_to(types, types, partial_types, False))
    
    def GenerateArcTitles(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,
        baml_options: BamlCallOptions = {},
    ) -> List[str]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateArcTitles",
        {
          "world_context": world_context,"player_state": player_state,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[str], raw.cast_to(types, types, partial_types, False))
    
    def GenerateBridgeAttribute(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> types.PlayerAttribute:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateBridgeAttribute",
        {
          "bridge_node": bridge_node,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PlayerAttribute, raw.cast_to(types, types, partial_types, False))
    
    def GenerateBridgeSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,source_situations: List[types.Situation],target_situations: List[types.Situation],all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> types.BridgeSituation:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateBridgeSituation",
        {
          "world_context": world_context,"player_state": player_state,"source_situations": source_situations,"target_situations": target_situations,"all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.BridgeSituation, raw.cast_to(types, types, partial_types, False))
    
    def GenerateChoiceAttribute(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> types.PlayerAttribute:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateChoiceAttribute",
        {
          "choice": choice,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PlayerAttribute, raw.cast_to(types, types, partial_types, False))
    
    def GenerateDistricts(
        self,
        context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> List[types.District]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateDistricts",
        {
          "context": context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.District], raw.cast_to(types, types, partial_types, False))
    
    def GenerateEventsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Event]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Event], raw.cast_to(types, types, partial_types, False))
    
    def GenerateFaction(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Faction:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateFaction",
        {
          "context": context,"situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Faction, raw.cast_to(types, types, partial_types, False))
    
    def GenerateInitialAttributes(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> List[types.PlayerAttribute]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateInitialAttributes",
        {
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.PlayerAttribute], raw.cast_to(types, types, partial_types, False))
    
    def GenerateItemsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Item]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Item], raw.cast_to(types, types, partial_types, False))
    
    def GenerateLocationsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Location]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Location], raw.cast_to(types, types, partial_types, False))
    
    def GenerateNPCsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.NPC]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.NPC], raw.cast_to(types, types, partial_types, False))
    
    def GeneratePlayerProfile(
        self,
        world_context: types.WorldContext,stats: types.PlayerStats,attributes: List[types.PlayerAttribute],
        baml_options: BamlCallOptions = {},
    ) -> types.PlayerProfile:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,"stats": stats,"attributes": attributes,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PlayerProfile, raw.cast_to(types, types, partial_types, False))
    
    def GenerateQuestsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> List[types.Quest]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,"situation": situation,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.Quest], raw.cast_to(types, types, partial_types, False))
    
    def GenerateRootSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc_seed: types.ArcSeed,
        baml_options: BamlCallOptions = {},
    ) -> types.Situation:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateRootSituation",
        {
          "world_context": world_context,"player_state": player_state,"arc_seed": arc_seed,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Situation, raw.cast_to(types, types, partial_types, False))
    
    def GenerateSituationForChoice(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,choice: types.Choice,parent_situation: types.Situation,existing_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> types.Situation:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,"player_state": player_state,"choice": choice,"parent_situation": parent_situation,"existing_situations": existing_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Situation, raw.cast_to(types, types, partial_types, False))
    
    def GenerateTechnology(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> types.Technology:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateTechnology",
        {
          "context": context,"situation_description": situation_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Technology, raw.cast_to(types, types, partial_types, False))
    
    def GenerateWorldRootSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,
        baml_options: BamlCallOptions = {},
    ) -> types.Situation:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "GenerateWorldRootSituation",
        {
          "world_context": world_context,"player_state": player_state,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.Situation, raw.cast_to(types, types, partial_types, False))
    
    def IdentifyBridgeGroups(
        self,
        world_context: types.WorldContext,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> List[List[str]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "IdentifyBridgeGroups",
        {
          "world_context": world_context,"all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[List[str]], raw.cast_to(types, types, partial_types, False))
    
    def IdentifyBridgeableSituations(
        self,
        arcs: List[types.Arc],
        baml_options: BamlCallOptions = {},
    ) -> List[types.BridgeableSituation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "IdentifyBridgeableSituations",
        {
          "arcs": arcs,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.BridgeableSituation], raw.cast_to(types, types, partial_types, False))
    
    def IdentifyDirectBridgeConnections(
        self,
        world_context: types.WorldContext,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> Dict[str, List[str]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "IdentifyDirectBridgeConnections",
        {
          "world_context": world_context,"all_situations": all_situations,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(Dict[str, List[str]], raw.cast_to(types, types, partial_types, False))
    
    def InitializePlayerStats(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> types.PlayerStats:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "InitializePlayerStats",
        {
          "world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(types.PlayerStats, raw.cast_to(types, types, partial_types, False))
    
    def ValidateBridgeConnections(
        self,
        bridge_nodes: List[types.BridgeNode],arcs: List[types.Arc],world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> List[types.BridgeNode]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.call_function_sync(
        "ValidateBridgeConnections",
        {
          "bridge_nodes": bridge_nodes,"arcs": arcs,"world_context": world_context,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )
      return cast(List[types.BridgeNode], raw.cast_to(types, types, partial_types, False))
    



class BamlStreamClient:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager
    __baml_options: BamlCallOptions
    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager, baml_options: Optional[BamlCallOptions] = None):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager
      self.__baml_options = baml_options or {}

    
    def AddBridgeChoiceToSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,source_situation: types.Situation,target_situation: types.Situation,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Choice, types.Choice]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "AddBridgeChoiceToSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
          "source_situation": source_situation,
          "target_situation": target_situation,
          "all_situations": all_situations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Choice, types.Choice](
        raw,
        lambda x: cast(partial_types.Choice, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Choice, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def AugmentSituationWithChoices(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,situation: types.Situation,existing_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Choice], List[types.Choice]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "AugmentSituationWithChoices",
        {
          "world_context": world_context,
          "player_state": player_state,
          "situation": situation,
          "existing_situations": existing_situations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Choice], List[types.Choice]](
        raw,
        lambda x: cast(List[partial_types.Choice], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Choice], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CheckBridgeAttributeNeeds(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[Optional[bool], bool]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "CheckBridgeAttributeNeeds",
        {
          "bridge_node": bridge_node,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[Optional[bool], bool](
        raw,
        lambda x: cast(Optional[bool], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(bool, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CheckChoiceAttributeNeeds(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[Optional[bool], bool]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[Optional[bool], bool](
        raw,
        lambda x: cast(Optional[bool], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(bool, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CheckFactionNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[Optional[bool], bool]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "CheckFactionNeeds",
        {
          "context": context,
          "situation_description": situation_description,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[Optional[bool], bool](
        raw,
        lambda x: cast(Optional[bool], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(bool, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CheckIfLeafNode(
        self,
        situation: types.Situation,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[Optional[bool], bool]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "CheckIfLeafNode",
        {
          "situation": situation,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[Optional[bool], bool](
        raw,
        lambda x: cast(Optional[bool], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(bool, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CheckReachabilityFromRoot(
        self,
        world_root: types.Situation,all_situations: List[types.Situation],all_bridges: List[types.BridgeSituation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[Optional[str]], List[str]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "CheckReachabilityFromRoot",
        {
          "world_root": world_root,
          "all_situations": all_situations,
          "all_bridges": all_bridges,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[Optional[str]], List[str]](
        raw,
        lambda x: cast(List[Optional[str]], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[str], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def CheckTechnologyNeeds(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[Optional[bool], bool]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "CheckTechnologyNeeds",
        {
          "context": context,
          "situation_description": situation_description,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[Optional[bool], bool](
        raw,
        lambda x: cast(Optional[bool], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(bool, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def DetectSoftLockCycles(
        self,
        all_situations: List[types.Situation],all_bridges: List[types.BridgeSituation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[List[Optional[str]]], List[List[str]]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "DetectSoftLockCycles",
        {
          "all_situations": all_situations,
          "all_bridges": all_bridges,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[List[Optional[str]]], List[List[str]]](
        raw,
        lambda x: cast(List[List[Optional[str]]], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[List[str]], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExpandArcSituations(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc: types.Arc,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Situation], List[types.Situation]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExpandArcSituations",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc": arc,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Situation], List[types.Situation]](
        raw,
        lambda x: cast(List[partial_types.Situation], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Situation], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Resume, types.Resume]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ExtractResume",
        {
          "resume": resume,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Resume, types.Resume](
        raw,
        lambda x: cast(partial_types.Resume, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Resume, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def FindBridgeConnections(
        self,
        bridgeable_situations: List[types.BridgeableSituation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.BridgeNode], List[types.BridgeNode]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "FindBridgeConnections",
        {
          "bridgeable_situations": bridgeable_situations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.BridgeNode], List[types.BridgeNode]](
        raw,
        lambda x: cast(List[partial_types.BridgeNode], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.BridgeNode], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateArcSeed(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,title: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.ArcSeed, types.ArcSeed]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateArcSeed",
        {
          "world_context": world_context,
          "player_state": player_state,
          "title": title,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.ArcSeed, types.ArcSeed](
        raw,
        lambda x: cast(partial_types.ArcSeed, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.ArcSeed, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateArcTitles(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[Optional[str]], List[str]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateArcTitles",
        {
          "world_context": world_context,
          "player_state": player_state,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[Optional[str]], List[str]](
        raw,
        lambda x: cast(List[Optional[str]], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[str], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateBridgeAttribute(
        self,
        bridge_node: types.BridgeNode,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.PlayerAttribute, types.PlayerAttribute]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateBridgeAttribute",
        {
          "bridge_node": bridge_node,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.PlayerAttribute, types.PlayerAttribute](
        raw,
        lambda x: cast(partial_types.PlayerAttribute, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PlayerAttribute, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateBridgeSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,source_situations: List[types.Situation],target_situations: List[types.Situation],all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.BridgeSituation, types.BridgeSituation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateBridgeSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
          "source_situations": source_situations,
          "target_situations": target_situations,
          "all_situations": all_situations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.BridgeSituation, types.BridgeSituation](
        raw,
        lambda x: cast(partial_types.BridgeSituation, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.BridgeSituation, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateChoiceAttribute(
        self,
        choice: types.Choice,world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.PlayerAttribute, types.PlayerAttribute]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateChoiceAttribute",
        {
          "choice": choice,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.PlayerAttribute, types.PlayerAttribute](
        raw,
        lambda x: cast(partial_types.PlayerAttribute, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PlayerAttribute, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateDistricts(
        self,
        context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.District], List[types.District]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateDistricts",
        {
          "context": context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.District], List[types.District]](
        raw,
        lambda x: cast(List[partial_types.District], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.District], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateEventsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Event], List[types.Event]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Event], List[types.Event]](
        raw,
        lambda x: cast(List[partial_types.Event], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Event], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateFaction(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Faction, types.Faction]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateFaction",
        {
          "context": context,
          "situation_description": situation_description,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Faction, types.Faction](
        raw,
        lambda x: cast(partial_types.Faction, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Faction, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateInitialAttributes(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.PlayerAttribute], List[types.PlayerAttribute]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateInitialAttributes",
        {
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.PlayerAttribute], List[types.PlayerAttribute]](
        raw,
        lambda x: cast(List[partial_types.PlayerAttribute], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.PlayerAttribute], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateItemsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Item], List[types.Item]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Item], List[types.Item]](
        raw,
        lambda x: cast(List[partial_types.Item], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Item], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateLocationsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Location], List[types.Location]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Location], List[types.Location]](
        raw,
        lambda x: cast(List[partial_types.Location], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Location], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateNPCsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.NPC], List[types.NPC]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.NPC], List[types.NPC]](
        raw,
        lambda x: cast(List[partial_types.NPC], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.NPC], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GeneratePlayerProfile(
        self,
        world_context: types.WorldContext,stats: types.PlayerStats,attributes: List[types.PlayerAttribute],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.PlayerProfile, types.PlayerProfile]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,
          "stats": stats,
          "attributes": attributes,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.PlayerProfile, types.PlayerProfile](
        raw,
        lambda x: cast(partial_types.PlayerProfile, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PlayerProfile, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateQuestsForSituation(
        self,
        world_context: types.WorldContext,situation: types.Situation,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.Quest], List[types.Quest]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,
          "situation": situation,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.Quest], List[types.Quest]](
        raw,
        lambda x: cast(List[partial_types.Quest], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.Quest], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateRootSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,arc_seed: types.ArcSeed,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Situation, types.Situation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateRootSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
          "arc_seed": arc_seed,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Situation, types.Situation](
        raw,
        lambda x: cast(partial_types.Situation, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Situation, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateSituationForChoice(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,choice: types.Choice,parent_situation: types.Situation,existing_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Situation, types.Situation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,
          "player_state": player_state,
          "choice": choice,
          "parent_situation": parent_situation,
          "existing_situations": existing_situations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Situation, types.Situation](
        raw,
        lambda x: cast(partial_types.Situation, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Situation, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateTechnology(
        self,
        context: types.WorldContext,situation_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Technology, types.Technology]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateTechnology",
        {
          "context": context,
          "situation_description": situation_description,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Technology, types.Technology](
        raw,
        lambda x: cast(partial_types.Technology, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Technology, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def GenerateWorldRootSituation(
        self,
        world_context: types.WorldContext,player_state: types.PlayerState,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.Situation, types.Situation]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "GenerateWorldRootSituation",
        {
          "world_context": world_context,
          "player_state": player_state,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.Situation, types.Situation](
        raw,
        lambda x: cast(partial_types.Situation, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.Situation, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def IdentifyBridgeGroups(
        self,
        world_context: types.WorldContext,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[List[Optional[str]]], List[List[str]]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "IdentifyBridgeGroups",
        {
          "world_context": world_context,
          "all_situations": all_situations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[List[Optional[str]]], List[List[str]]](
        raw,
        lambda x: cast(List[List[Optional[str]]], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[List[str]], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def IdentifyBridgeableSituations(
        self,
        arcs: List[types.Arc],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.BridgeableSituation], List[types.BridgeableSituation]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "IdentifyBridgeableSituations",
        {
          "arcs": arcs,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.BridgeableSituation], List[types.BridgeableSituation]](
        raw,
        lambda x: cast(List[partial_types.BridgeableSituation], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.BridgeableSituation], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def IdentifyDirectBridgeConnections(
        self,
        world_context: types.WorldContext,all_situations: List[types.Situation],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[Dict[str, List[Optional[str]]], Dict[str, List[str]]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "IdentifyDirectBridgeConnections",
        {
          "world_context": world_context,
          "all_situations": all_situations,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[Dict[str, List[Optional[str]]], Dict[str, List[str]]](
        raw,
        lambda x: cast(Dict[str, List[Optional[str]]], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(Dict[str, List[str]], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def InitializePlayerStats(
        self,
        world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[partial_types.PlayerStats, types.PlayerStats]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "InitializePlayerStats",
        {
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[partial_types.PlayerStats, types.PlayerStats](
        raw,
        lambda x: cast(partial_types.PlayerStats, x.cast_to(types, types, partial_types, True)),
        lambda x: cast(types.PlayerStats, x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    
    def ValidateBridgeConnections(
        self,
        bridge_nodes: List[types.BridgeNode],arcs: List[types.Arc],world_context: types.WorldContext,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.BamlSyncStream[List[partial_types.BridgeNode], List[types.BridgeNode]]:
      options: BamlCallOptions = {**self.__baml_options, **(baml_options or {})}
      __tb__ = options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = options.get("client_registry", None)
      collector = options.get("collector", None)
      collectors = collector if isinstance(collector, list) else [collector] if collector is not None else []

      raw = self.__runtime.stream_function_sync(
        "ValidateBridgeConnections",
        {
          "bridge_nodes": bridge_nodes,
          "arcs": arcs,
          "world_context": world_context,
        },
        None,
        self.__ctx_manager.get(),
        tb,
        __cr__,
        collectors,
      )

      return baml_py.BamlSyncStream[List[partial_types.BridgeNode], List[types.BridgeNode]](
        raw,
        lambda x: cast(List[partial_types.BridgeNode], x.cast_to(types, types, partial_types, True)),
        lambda x: cast(List[types.BridgeNode], x.cast_to(types, types, partial_types, False)),
        self.__ctx_manager.get(),
      )
    


b = BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)

__all__ = ["b"]