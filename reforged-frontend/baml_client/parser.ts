/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Collector } from "@boundaryml/baml"
import { toBamlError } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {Arc, ArcOutcome, ArcSeed, BridgeNode, BridgeableSituation, Choice, District, Event, Faction, Item, Location, NPC, PlayerAttribute, PlayerProfile, PlayerState, PlayerStats, Quest, Resume, Situation, StatDescriptors, StatRequirement, Technology, WorldContext, WorldSeed} from "./types"
import type TypeBuilder from "./type_builder"

export class LlmResponseParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AugmentSituationChoices(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Choice[] {
    try {
      return this.runtime.parseLlmResponse(
        "AugmentSituationChoices",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Choice[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckBridgeAttributeNeeds(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
      return this.runtime.parseLlmResponse(
        "CheckBridgeAttributeNeeds",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as boolean
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckChoiceAttributeNeeds(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
      return this.runtime.parseLlmResponse(
        "CheckChoiceAttributeNeeds",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as boolean
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckFactionNeeds(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
      return this.runtime.parseLlmResponse(
        "CheckFactionNeeds",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as boolean
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckTechnologyNeeds(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
      return this.runtime.parseLlmResponse(
        "CheckTechnologyNeeds",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as boolean
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateFaction(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Faction {
    try {
      return this.runtime.parseLlmResponse(
        "CreateFaction",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Faction
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateNPC(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): NPC {
    try {
      return this.runtime.parseLlmResponse(
        "CreateNPC",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as NPC
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateTechnology(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Technology {
    try {
      return this.runtime.parseLlmResponse(
        "CreateTechnology",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Technology
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExpandArcSituations(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Situation[] {
    try {
      return this.runtime.parseLlmResponse(
        "ExpandArcSituations",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Situation[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  FindBridgeConnections(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BridgeNode[] {
    try {
      return this.runtime.parseLlmResponse(
        "FindBridgeConnections",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as BridgeNode[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateArcSeed(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ArcSeed {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateArcSeed",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ArcSeed
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateArcTitles(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateArcTitles",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as string[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateBridgeAttribute(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): PlayerAttribute {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateBridgeAttribute",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as PlayerAttribute
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateBridgeSituations(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Situation[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateBridgeSituations",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Situation[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateChoiceAttribute(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): PlayerAttribute {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateChoiceAttribute",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as PlayerAttribute
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateChoiceSituationResult(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Situation {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateChoiceSituationResult",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Situation
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateDistricts(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): District[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateDistricts",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as District[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateEventsForSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Event[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateEventsForSituation",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Event[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateFaction(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Faction {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateFaction",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Faction
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateInitialAttributes(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): PlayerAttribute[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateInitialAttributes",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as PlayerAttribute[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateItemsForSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Item[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateItemsForSituation",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Item[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateLocationsForSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Location[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateLocationsForSituation",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Location[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateMissingSituationsForChoice(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Situation {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateMissingSituationsForChoice",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Situation
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateNPCsForSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): NPC[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateNPCsForSituation",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as NPC[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GeneratePlayerProfile(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): PlayerProfile {
    try {
      return this.runtime.parseLlmResponse(
        "GeneratePlayerProfile",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as PlayerProfile
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateQuestsForSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Quest[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateQuestsForSituation",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Quest[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateRootSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Situation {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateRootSituation",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Situation
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateSituationForChoice(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Situation {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateSituationForChoice",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Situation
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateTechnology(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Technology {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateTechnology",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Technology
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetDefaultStatDescriptors(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): StatDescriptors {
    try {
      return this.runtime.parseLlmResponse(
        "GetDefaultStatDescriptors",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as StatDescriptors
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetStatNarrative(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
      return this.runtime.parseLlmResponse(
        "GetStatNarrative",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyBridgeableSituations(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BridgeableSituation[] {
    try {
      return this.runtime.parseLlmResponse(
        "IdentifyBridgeableSituations",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as BridgeableSituation[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyMissingSituations(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string[] {
    try {
      return this.runtime.parseLlmResponse(
        "IdentifyMissingSituations",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as string[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  InitializePlayerStats(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): PlayerStats {
    try {
      return this.runtime.parseLlmResponse(
        "InitializePlayerStats",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as PlayerStats
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  LegacySelectGenerationTool(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
      return this.runtime.parseLlmResponse(
        "LegacySelectGenerationTool",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SelectGenerationTool(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): "create_npc" | "create_faction" | "create_technology" | "create_situation" | "create_choices" | "create_arc" | "update_situation" | "update_choice" | "update_arc" | "go_to_situation" | "up_one_level" | "down_one_level" | "go_to_arc_root" | "go_to_world_root" | "get_situation_by_id" | "get_player_state" | "find_missing_situations" | "identify_narrative_gaps" | "story_so_far" {
    try {
      return this.runtime.parseLlmResponse(
        "SelectGenerationTool",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as "create_npc" | "create_faction" | "create_technology" | "create_situation" | "create_choices" | "create_arc" | "update_situation" | "update_choice" | "update_arc" | "go_to_situation" | "up_one_level" | "down_one_level" | "go_to_arc_root" | "go_to_world_root" | "get_situation_by_id" | "get_player_state" | "find_missing_situations" | "identify_narrative_gaps" | "story_so_far"
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ValidateBridgeConnections(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): BridgeNode[] {
    try {
      return this.runtime.parseLlmResponse(
        "ValidateBridgeConnections",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as BridgeNode[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class LlmStreamParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AugmentSituationChoices(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.Choice | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "AugmentSituationChoices",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.Choice | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckBridgeAttributeNeeds(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
      return this.runtime.parseLlmResponse(
        "CheckBridgeAttributeNeeds",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as boolean
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckChoiceAttributeNeeds(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
      return this.runtime.parseLlmResponse(
        "CheckChoiceAttributeNeeds",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as boolean
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckFactionNeeds(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
      return this.runtime.parseLlmResponse(
        "CheckFactionNeeds",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as boolean
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckTechnologyNeeds(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): boolean {
    try {
      return this.runtime.parseLlmResponse(
        "CheckTechnologyNeeds",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as boolean
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateFaction(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Faction {
    try {
      return this.runtime.parseLlmResponse(
        "CreateFaction",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Faction
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateNPC(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.NPC {
    try {
      return this.runtime.parseLlmResponse(
        "CreateNPC",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.NPC
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateTechnology(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Technology {
    try {
      return this.runtime.parseLlmResponse(
        "CreateTechnology",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Technology
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExpandArcSituations(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.Situation | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "ExpandArcSituations",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.Situation | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  FindBridgeConnections(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.BridgeNode | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "FindBridgeConnections",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.BridgeNode | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateArcSeed(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.ArcSeed {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateArcSeed",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.ArcSeed
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateArcTitles(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (string | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateArcTitles",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (string | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateBridgeAttribute(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.PlayerAttribute {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateBridgeAttribute",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.PlayerAttribute
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateBridgeSituations(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.Situation | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateBridgeSituations",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.Situation | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateChoiceAttribute(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.PlayerAttribute {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateChoiceAttribute",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.PlayerAttribute
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateChoiceSituationResult(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Situation {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateChoiceSituationResult",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Situation
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateDistricts(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.District | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateDistricts",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.District | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateEventsForSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.Event | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateEventsForSituation",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.Event | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateFaction(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Faction {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateFaction",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Faction
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateInitialAttributes(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.PlayerAttribute | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateInitialAttributes",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.PlayerAttribute | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateItemsForSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.Item | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateItemsForSituation",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.Item | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateLocationsForSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.Location | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateLocationsForSituation",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.Location | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateMissingSituationsForChoice(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Situation {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateMissingSituationsForChoice",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Situation
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateNPCsForSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.NPC | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateNPCsForSituation",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.NPC | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GeneratePlayerProfile(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.PlayerProfile {
    try {
      return this.runtime.parseLlmResponse(
        "GeneratePlayerProfile",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.PlayerProfile
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateQuestsForSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.Quest | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateQuestsForSituation",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.Quest | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateRootSituation(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Situation {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateRootSituation",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Situation
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateSituationForChoice(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Situation {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateSituationForChoice",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Situation
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateTechnology(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Technology {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateTechnology",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Technology
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetDefaultStatDescriptors(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.StatDescriptors {
    try {
      return this.runtime.parseLlmResponse(
        "GetDefaultStatDescriptors",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.StatDescriptors
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetStatNarrative(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
      return this.runtime.parseLlmResponse(
        "GetStatNarrative",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyBridgeableSituations(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.BridgeableSituation | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "IdentifyBridgeableSituations",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.BridgeableSituation | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyMissingSituations(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (string | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "IdentifyMissingSituations",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (string | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  InitializePlayerStats(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.PlayerStats {
    try {
      return this.runtime.parseLlmResponse(
        "InitializePlayerStats",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.PlayerStats
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  LegacySelectGenerationTool(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
      return this.runtime.parseLlmResponse(
        "LegacySelectGenerationTool",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SelectGenerationTool(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ("create_npc" | "create_faction" | "create_technology" | "create_situation" | "create_choices" | "create_arc" | "update_situation" | "update_choice" | "update_arc" | "go_to_situation" | "up_one_level" | "down_one_level" | "go_to_arc_root" | "go_to_world_root" | "get_situation_by_id" | "get_player_state" | "find_missing_situations" | "identify_narrative_gaps" | "story_so_far") {
    try {
      return this.runtime.parseLlmResponse(
        "SelectGenerationTool",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ("create_npc" | "create_faction" | "create_technology" | "create_situation" | "create_choices" | "create_arc" | "update_situation" | "update_choice" | "update_arc" | "go_to_situation" | "up_one_level" | "down_one_level" | "go_to_arc_root" | "go_to_world_root" | "get_situation_by_id" | "get_player_state" | "find_missing_situations" | "identify_narrative_gaps" | "story_so_far")
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ValidateBridgeConnections(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): (partial_types.BridgeNode | null)[] {
    try {
      return this.runtime.parseLlmResponse(
        "ValidateBridgeConnections",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as (partial_types.BridgeNode | null)[]
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}