/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, FunctionResult, BamlCtxManager, Image, Audio, ClientRegistry, Collector } from "@boundaryml/baml"
import { toBamlError, type HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check, RecursivePartialNull as MovedRecursivePartialNull } from "./types"
import type * as types from "./types"
import type {Arc, ArcOutcome, ArcSeed, BridgeNode, BridgeableSituation, Choice, District, Event, Faction, Item, Location, NPC, PlayerAttribute, PlayerProfile, PlayerState, PlayerStats, Quest, Resume, Situation, StatDescriptors, StatRequirement, Technology, WorldContext, WorldSeed} from "./types"
import type TypeBuilder from "./type_builder"
import { HttpRequest, HttpStreamRequest } from "./sync_request"
import { LlmResponseParser, LlmStreamParser } from "./parser"
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

/**
 * @deprecated Use RecursivePartialNull from 'baml_client/types' instead.
 * Example:
 * ```ts
 * import { RecursivePartialNull } from './baml_client/types'
 * ```
 */
export type RecursivePartialNull<T> = MovedRecursivePartialNull<T>;

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  collector?: Collector | Collector[]
}

export class BamlSyncClient {
  private httpRequest: HttpRequest
  private httpStreamRequest: HttpStreamRequest
  private llmResponseParser: LlmResponseParser
  private llmStreamParser: LlmStreamParser
  private bamlOptions: BamlCallOptions

  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager, private bamlOptions?: BamlCallOptions) {
    this.httpRequest = new HttpRequest(runtime, ctxManager)
    this.httpStreamRequest = new HttpStreamRequest(runtime, ctxManager)
    this.llmResponseParser = new LlmResponseParser(runtime, ctxManager)
    this.llmStreamParser = new LlmStreamParser(runtime, ctxManager)
    this.bamlOptions = bamlOptions || {}
  }

  withOptions(bamlOptions: BamlCallOptions) {
    return new BamlSyncClient(this.runtime, this.ctxManager, bamlOptions)
  }

  /*
  * @deprecated NOT IMPLEMENTED as streaming must by async. We
  * are not providing an async version as we want to reserve the
  * right to provide a sync version in the future.
  */
  get stream() {
    throw new Error("stream is not available in BamlSyncClient. Use `import { b } from 'baml_client/async_client")
  }

  get request() {
    return this.httpRequest
  }

  get streamRequest() {
    return this.httpStreamRequest
  }

  get parse() {
    return this.llmResponseParser
  }

  get parseStream() {
    return this.llmStreamParser
  }

  
  AugmentSituationChoices(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Choice[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "AugmentSituationChoices",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"situation": situation
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Choice[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  CheckBridgeAttributeNeeds(
      bridge_node: BridgeNode,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): boolean {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "CheckBridgeAttributeNeeds",
        {
          "bridge_node": bridge_node,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as boolean
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  CheckChoiceAttributeNeeds(
      choice: Choice,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): boolean {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as boolean
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  CheckFactionNeeds(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): boolean {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "CheckFactionNeeds",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as boolean
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  CheckTechnologyNeeds(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): boolean {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "CheckTechnologyNeeds",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as boolean
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ExpandArcSituations(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): Situation[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "ExpandArcSituations",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Situation[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  FindBridgeConnections(
      bridgeable_situations: BridgeableSituation[],
      __baml_options__?: BamlCallOptions
  ): BridgeNode[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "FindBridgeConnections",
        {
          "bridgeable_situations": bridgeable_situations
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as BridgeNode[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateArcSeed(
      world_context: WorldContext,player_state: PlayerState,title: string,
      __baml_options__?: BamlCallOptions
  ): ArcSeed {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateArcSeed",
        {
          "world_context": world_context,"player_state": player_state,"title": title
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as ArcSeed
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateArcTitles(
      world_context: WorldContext,player_state: PlayerState,count?: number | null,
      __baml_options__?: BamlCallOptions
  ): string[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateArcTitles",
        {
          "world_context": world_context,"player_state": player_state,"count": count?? null
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateBridgeAttribute(
      bridge_node: BridgeNode,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): PlayerAttribute {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateBridgeAttribute",
        {
          "bridge_node": bridge_node,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as PlayerAttribute
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateBridgeSituations(
      world_context: WorldContext,player_state: PlayerState,bridge_nodes: BridgeNode[],
      __baml_options__?: BamlCallOptions
  ): Situation[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateBridgeSituations",
        {
          "world_context": world_context,"player_state": player_state,"bridge_nodes": bridge_nodes
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Situation[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateChoiceAttribute(
      choice: Choice,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): PlayerAttribute {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateChoiceAttribute",
        {
          "choice": choice,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as PlayerAttribute
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateChoiceSituationResult(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): Situation {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateChoiceSituationResult",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Situation
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateDistricts(
      context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): District[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateDistricts",
        {
          "context": context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as District[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateEventsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Event[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Event[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateFaction(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): Faction {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateFaction",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Faction
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateInitialAttributes(
      world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): PlayerAttribute[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateInitialAttributes",
        {
          "world_context": world_context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as PlayerAttribute[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateItemsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Item[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Item[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateLocationsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Location[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Location[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateMissingSituationsForChoice(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): Situation {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateMissingSituationsForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Situation
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateNPCsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): NPC[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as NPC[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GeneratePlayerProfile(
      world_context: WorldContext,stats: PlayerStats,attributes: PlayerAttribute[],
      __baml_options__?: BamlCallOptions
  ): PlayerProfile {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,"stats": stats,"attributes": attributes
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as PlayerProfile
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateQuestsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Quest[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Quest[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateRootSituation(
      world_context: WorldContext,player_state: PlayerState,arc_seed: ArcSeed,
      __baml_options__?: BamlCallOptions
  ): Situation {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateRootSituation",
        {
          "world_context": world_context,"player_state": player_state,"arc_seed": arc_seed
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Situation
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateSituationForChoice(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): Situation {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Situation
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GenerateTechnology(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): Technology {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GenerateTechnology",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as Technology
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GetDefaultStatDescriptors(
      
      __baml_options__?: BamlCallOptions
  ): StatDescriptors {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GetDefaultStatDescriptors",
        {
          
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as StatDescriptors
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  GetStatNarrative(
      stat_name: string,stat_value: number,descriptors: StatDescriptors,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "GetStatNarrative",
        {
          "stat_name": stat_name,"stat_value": stat_value,"descriptors": descriptors
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  IdentifyBridgeableSituations(
      arcs: Arc[],
      __baml_options__?: BamlCallOptions
  ): BridgeableSituation[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "IdentifyBridgeableSituations",
        {
          "arcs": arcs
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as BridgeableSituation[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  IdentifyMissingSituations(
      world_context: WorldContext,arcs: Arc[],
      __baml_options__?: BamlCallOptions
  ): string[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "IdentifyMissingSituations",
        {
          "world_context": world_context,"arcs": arcs
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  InitializePlayerStats(
      world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): PlayerStats {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "InitializePlayerStats",
        {
          "world_context": world_context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as PlayerStats
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  SelectGenerationTool(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): string {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "SelectGenerationTool",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as string
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
  ValidateBridgeConnections(
      bridge_nodes: BridgeNode[],arcs: Arc[],world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): BridgeNode[] {
    try {
      const options = { ...this.bamlOptions, ...(__baml_options__ || {}) }
      const collector = options.collector ? (Array.isArray(options.collector) ? options.collector : [options.collector]) : [];
      const raw = this.runtime.callFunctionSync(
        "ValidateBridgeConnections",
        {
          "bridge_nodes": bridge_nodes,"arcs": arcs,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        options.tb?.__tb(),
        options.clientRegistry,
        collector,
      )
      return raw.parsed(false) as BridgeNode[]
    } catch (error: any) {
      throw toBamlError(error);
    }
  }
  
}

export const b = new BamlSyncClient(DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME, DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_CTX)