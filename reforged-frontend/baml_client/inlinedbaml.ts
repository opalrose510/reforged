/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "arcs.baml": "// Core data models for narrative arcs\nclass ArcSeed {\n  title string\n  core_conflict string\n  theme_tags string[]\n  tone string\n  factions_involved string[]\n  internal_hint string @description(\"Clue for future model calls to guide generation\")\n  internal_justification string @description(\"Reasoning for this arc's creation and its narrative purpose\")\n}\n\nclass Arc {\n  seed ArcSeed\n  situations Situation[]\n  outcomes ArcOutcome[]\n}\n  class Situation {\n  id string\n  description string @description(\"Less than 25 words. Description of what happens in this situation.\")\n  player_perspective_description string @description(\"Description from the player's perspective with direct dialogue and 'show don't tell' approach\")\n  choices Choice[] @description(\"Should be a list of 3-5 choices. A choice must NOT point towards a prior situation already present in the arc.\")\n  stat_requirements StatRequirement[]\n  // attribute_requirements AttributeRequirement[] # TODO\n  consequences map<string, string>  // choice_id -> next_situation_id\n  bridgeable bool\n  context_tags string[]\n  internal_hint string @description(\"Clue for future model calls to guide generation\")\n  internal_justification string @description(\"Reasoning for this situation's creation and its narrative purpose\")\n}\nclass ArcOutcome {\n  id string\n  description string @description(\"Describe one way in which the arc ends. This should be a single sentence.\")\n  internal_hint string @description(\"How do you think the player might reach this outcome, in broad terms?\")\n  internal_justification string @description(\"Reasoning for this outcome creation and narrative purpose\")\n  tags string[] @description(\"Tags for the outcome, to help guide generation, e.g 'moral_choice', 'death', 'failure'\")\n  estimated_duration int @description(\"Estimated number of situations to reach this outcome\")\n}\n\nclass StatRequirement {\n  attribute_name \"might\" | \"insight\" | \"nimbleness\" | \"destiny\" | \"savvy\" | \"expertise\" | \"tenacity\" | \"station\" | \"opulence\" | \"celebrity\" | \"integrity\" | \"allure\" | \"lineage\"\n  min_value int @description(\"Minimum value of the attribute required for the player to see a given choice. 10 is considerd an average human.\")\n}\nclass Choice {\n  id string\n  text string\n  dialogue_response string? @description(\"If this is a dialogue choice, the actual words the player says\")\n  choice_type string @description(\"Type of choice: dialogue, action, investigation, etc.\")\n  player_perspective string @description(\"Description of how the player's choice is perceived and its immediate impact\")\n  emotional_tone string @description(\"The emotional tone of the choice (e.g., aggressive, diplomatic, cautious)\")\n  body_language string? @description(\"Description of the player's body language and non-verbal communication\")\n  requirements map<string, int>  // stat_name -> minimum_value\n  attributes_gained PlayerAttribute[]\n  attributes_lost string[]  // IDs of attributes to remove\n  stat_changes map<string, int>  // stat_name -> change_value\n  next_situation_id string? @skip\n  internal_hint string @description(\"Clue for future model calls to guide generation\")\n  internal_justification string @description(\"Reasoning for this choice's creation and its narrative purpose\")\n  new_npcs NPC[] @description(\"New NPCs created by this choice, if any. Only create new NPCs if they are directly related to this choice.\")\n  new_factions Faction[] @description(\"New factions created by this choice, if any. Only create new factions if they are directly related to this choice.\")\n  new_technologies Technology[] @description(\"New technologies created by this choice, if any. Only create new technologies if they are directly related to this choice.\")\n}\nfunction GenerateChoiceSituationResult(world_context: WorldContext, player_state: PlayerState, arc: Arc, choice: Choice) -> Situation {\n  client ReforgedClient\n  prompt #\"\n    This Choice that has been generated leads to exactly one new Situation. Generate that Situation.\n    \n    World Context:\n    {{ world_context }}\n\n    Player State:\n    {{ player_state }}\n    \n    Current Arc:\n    {{ arc }}\n    \n    Choice:\n    {{ choice }}\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to check if choice needs new attribute\nfunction CheckChoiceAttributeNeeds(choice: Choice, world_context: WorldContext) -> bool {\n  client ReforgedClient\n  prompt #\"\n    Determine if this choice should create a new attribute. Answer ONLY with 'true' or 'false'.\n    \n    Choice:\n    {{ choice }}\n    \n    World Context:\n    {{ world_context }}\n    \n    Consider:\n    1. Does the choice have significant narrative impact?\n    2. Would an attribute help track the consequences?\n    3. Is this a meaningful character development moment?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate attribute for choice\nfunction GenerateChoiceAttribute(choice: Choice, world_context: WorldContext) -> PlayerAttribute {\n  client ReforgedClient\n  prompt #\"\n    Generate a new attribute based on the choice and world context.\n    \n    Choice:\n    {{ choice }}\n    \n    World Context:\n    {{ world_context }}\n    \n    The attribute should:\n    1. Represent the meaningful consequences of the choice\n    2. Have appropriate stat modifications\n    3. Be consistent with the world's themes\n    4. Track character development\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate arc titles\nfunction GenerateArcTitles(world_context: WorldContext, player_state: PlayerState, count: int?) -> string[] {\n  client ReforgedClient\n  prompt #\"\n    Generate {{ count or 3 }} distinct arc titles based on the world context and player state.\n    Return ONLY the titles, one per line.\n    \n    {{ CompressedWorldContext(world_context) }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Each title should:\n    1. Be evocative and memorable\n    2. Hint at a unique core conflict\n    3. Reflect the world's themes\n    4. Be appropriate for the player's starting state\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate a single arc seed\nfunction GenerateArcSeed(world_context: WorldContext, player_state: PlayerState, title: string) -> ArcSeed {\n  client ReforgedClient\n  prompt #\"\n    Generate a complete arc seed based on the given title, world context, and player state.\n    \n    Title:\n    {{ title }}\n    \n    {{ CompressedWorldContext(world_context) }}\n    \n    Player State:\n    {{ player_state }}\n    \n    The arc seed should:\n    1. Develop the core conflict suggested by the title\n    2. Involve appropriate factions\n    3. Explore relevant aspects of the world's themes\n    4. Be appropriate for the player's starting state\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate root situation for an arc - uses tools for detailed world info\nfunction GenerateRootSituation(world_context: WorldContext, player_state: PlayerState, arc_seed: ArcSeed) -> Situation {\n  client ReforgedClient\n  prompt #\"\n    Generate the root situation for an arc based on the world context, player state, and arc seed.\n    \n    {{ CompressedWorldContext(world_context) }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Arc Seed:\n    {{ arc_seed }}\n    \n    If you need detailed information about any world concepts (technologies, factions, districts, NPCs) mentioned in the arc seed, you can use the available tools to get more details.\n    \n    {{ ctx.output_format }}\n    \n    The root situation should:\n    1. Introduce the core conflict through dialogue and direct interaction\n    2. Use \"show don't tell\" - include direct dialogue from NPCs speaking to the player\n    3. Provide lots of small, granular choices including dialogue responses\n    4. Create a story beat rather than just \"investigate this\" or \"explore that\"\n    5. Include both a narrative description and a player-perspective description\n    6. The player_perspective_description should be immersive and include NPCs talking directly to the player character\n    7. Should NOT create new NPCs, factions or technologies.\n    Create choices that are:\n    - Dialogue responses to NPCs\n    - Small character actions and reactions\n    - Emotional responses and attitudes\n    - Investigation micro-choices\n    - Social interactions and relationships\n    \n    Avoid generic \"investigate\" or \"explore\" choices. Instead focus on specific character moments and interactions.\n  \"#\n}\nfunction GenerateMissingSituationsForChoice(world_context: WorldContext, player_state: PlayerState, arc: Arc, choice: Choice) -> Situation {\n  client ReforgedClient\n  prompt #\"\n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Current Arc:\n    {{ arc }}\n\n    Original Choice:\n    {{ choice }}\n\n    Generate a new situation that is a valid consequence of the given choice.\n    Situations should:\n    1. Be a valid consequence of the given choice\n    2. Advance the plot of the arc that the choice belongs to\n    3. Develop the player, NPCs, and factions in the arc.\n    4. Creates a story beat that is a natural progression from the previous situation.\n    5. Accurately reflects the consequences of the choice.\n    6. Should only create new NPCs, factions or technologies if they are directly related to the choice.\n    7. Should prefer to use existing NPCs, factions or technologies wherever possible.\n    {{ ctx.output_format }}\n  \"#\n}\n// Function to expand arc with additional situations\nfunction ExpandArcSituations(world_context: WorldContext, player_state: PlayerState, arc: Arc) -> Situation[] {\n  client \"ReforgedClient\"\n  prompt #\"\n    Generate additional situations to expand the arc based on the world context, player state, and existing arc.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Current Arc:\n    {{ arc }}\n    \n    New situations should:\n    1. Build on previous choices and consequences with detailed character interactions\n    2. Focus on dialogue and direct character-to-character moments\n    3. Include lots of small, granular choices within each situation\n    4. Create story beats that feel like scenes in a story, not exploration nodes\n    5. Each situation should include both narrative and player-perspective descriptions\n    6. NPCs should speak directly to the player character\n    \n    Generate multiple small situations for each story beat, with choices like:\n    - How to respond to specific lines of dialogue\n    - Small character actions during conversations\n    - Emotional reactions to reveals\n    - Body language and non-verbal communication\n    - Interrupting, agreeing, or challenging statements\n    - Social maneuvering and relationship building\n    \n    Avoid large \"investigate the mystery\" situations. Instead create granular moments like:\n    - \"The informant leans closer and whispers...\"\n    - \"She stops mid-sentence and stares at you...\"\n    - \"His hand moves toward his weapon as he says...\"\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to augment existing situations with more dialogue choices\nfunction AugmentSituationChoices(world_context: WorldContext, player_state: PlayerState, arc: Arc, situation: Situation) -> Choice[] {\n  client \"ReforgedClient\"\n  prompt #\"\n    Given the current Situation, return a list of new possible Choices that could be added to the Situation. \n    They must not duplicate existing choices, or point to a prior situation already present in the arc.\n\n    Existing Arc:\n    {{ arc }}\n\n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Current Situation:\n    {{ situation }}\n    \n    Return more choices that focus on:\n    1. Specific dialogue responses with different tones/approaches\n    2. Non-verbal communication (body language, facial expressions)\n    3. Interruptions and conversation steering\n    4. Emotional reactions and internal responses\n    5. Micro-social dynamics and relationship building\n    6. Small investigative actions during dialogue\n    \n    Ensure each new choice has:\n    - Clear dialogue_response if it's a speaking choice\n    - Appropriate choice_type (dialogue, action, reaction, etc.)\n    - Meaningful consequences for character relationships\n    \n    Return the new choices as a list.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to identify missing connections between situations\nfunction IdentifyMissingSituations(world_context: WorldContext, arcs: Arc[]) -> string[] {\n  client \"ReforgedClient\"\n  prompt #\"\n    Analyze the arcs and identify missing situation types that would enhance the narrative.\n    \n    World Context:\n    {{ world_context }}\n    \n    Current Arcs:\n    {{ arcs }}\n    \n    Look for gaps in:\n    1. Character development moments\n    2. Relationship building scenes\n    3. Emotional beats and reactions\n    4. Dialogue-heavy encounters\n    5. Small investigative moments\n    6. Social dynamics and politics\n    7. Bridge opportunities between arcs\n    \n    Return a list of situation descriptions that should be created to fill these narrative gaps.\n    Focus on character-driven moments rather than plot advancement.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate bridge situations to connect arcs\nfunction GenerateBridgeSituations(world_context: WorldContext, player_state: PlayerState, bridge_nodes: BridgeNode[]) -> Situation[] {\n  client \"ReforgedClient\"\n  prompt #\"\n    Generate bridging situations based on the identified bridge nodes.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player State:\n    {{ player_state }}\n    \n    Bridge Nodes:\n    {{ bridge_nodes }}\n    \n    For each bridge node, create a situation that:\n    1. Naturally connects the two situations through dialogue or character interaction\n    2. Includes player-perspective description with direct NPC dialogue\n    3. Provides multiple small dialogue choices for how to navigate the transition\n    4. Maintains narrative coherence between the connected story beats\n    5. Uses shared context elements (themes, factions, locations) to justify the connection\n    Each bridge situation should feel like a natural story beat, not a mechanical transition.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate situation for a choice\nfunction GenerateSituationForChoice(world_context: WorldContext, player_state: PlayerState, arc: Arc, choice: Choice) -> Situation {\n  client ReforgedClient\n  prompt #\"\n    Generate a new situation that is the result of this choice.\n    \n    World Context:\n    {{ world_context }}\n\n    Player State:\n    {{ player_state }}\n    \n    Current Arc:\n    {{ arc }}\n    \n    Choice:\n    {{ choice }}\n    \n    Generate a situation that:\n    1. Is a valid consequence of the given choice\n    2. Advances the plot of the arc that the choice belongs to\n    3. Develops the player, NPCs, and factions in the arc\n    4. Creates a story beat that is a natural progression from the previous situation\n    5. Accurately reflects the consequences of the choice\n    6. Should only create new NPCs, factions or technologies if they are directly related to the choice\n    7. Should prefer to use existing NPCs, factions or technologies wherever possible\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for arc generation\ntest arc_title_generation {\n  functions [GenerateArcTitles]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    player_state {\n      stats {\n        might 10\n        insight 10\n        nimbleness 10\n        destiny 10\n        savvy 10\n        expertise 10\n        tenacity 10\n        station 10\n        opulence 10\n        celebrity 10\n        integrity 10\n        allure 10\n        lineage 10\n      }\n      attributes []\n      profile {\n        narrative_summary \"A newcomer to Neon Haven, seeking their place in the city's complex web of memory trading and identity manipulation.\"\n        key_traits [\"curious\", \"adaptable\"]\n        background_hints [\"recent arrival\", \"seeking opportunity\"]\n      }\n    }\n  }\n}\n\ntest arc_seed_generation {\n  functions [GenerateArcSeed]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    player_state {\n      stats {\n        might 10\n        insight 10\n        nimbleness 10\n        destiny 10\n        savvy 10\n        expertise 10\n        tenacity 10\n        station 10\n        opulence 10\n        celebrity 10\n        integrity 10\n        allure 10\n        lineage 10\n      }\n      attributes []\n      profile {\n        narrative_summary \"A newcomer to Neon Haven, seeking their place in the city's complex web of memory trading and identity manipulation.\"\n        key_traits [\"curious\", \"adaptable\"]\n        background_hints [\"recent arrival\", \"seeking opportunity\"]\n      }\n    }\n    title \"The Memory Broker's Gambit\"\n  }\n}\n\ntest situation_generation {\n  functions [GenerateRootSituation, ExpandArcSituations]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    player_state {\n      stats {\n        might 10\n        insight 10\n        nimbleness 10\n        destiny 10\n        savvy 10\n        expertise 10\n        tenacity 10\n        station 10\n        opulence 10\n        celebrity 10\n        integrity 10\n        allure 10\n        lineage 10\n      }\n      attributes []\n      profile {\n        narrative_summary \"A newcomer to Neon Haven, seeking their place in the city's complex web of memory trading and identity manipulation.\"\n        key_traits [\"curious\", \"adaptable\"]\n        background_hints [\"recent arrival\", \"seeking opportunity\"]\n      }\n    }\n    arc_seed {\n      title \"The Memory Broker's Gambit\"\n      core_conflict \"A powerful memory broker offers the player a chance to trade their memories for power and influence\"\n      theme_tags [\"identity\", \"power\", \"trust\"]\n      tone \"noir\"\n      factions_involved [\"Memory Brokers Guild\", \"City Watch\"]\n      internal_hint \"Focus on the moral implications of memory trading\"\n      internal_justification \"This arc explores the core themes of the setting while providing meaningful choices about identity and power\"\n    }\n    arc {\n      seed {\n        title \"The Memory Broker's Gambit\"\n        core_conflict \"A powerful memory broker offers the player a chance to trade their memories for power and influence\"\n        theme_tags [\"identity\", \"power\", \"trust\"]\n        tone \"noir\"\n        factions_involved [\"Memory Brokers Guild\", \"City Watch\"]\n        internal_hint \"Focus on the moral implications of memory trading\"\n        internal_justification \"This arc explores the core themes of the setting while providing meaningful choices about identity and power\"\n      }\n      situations []\n    }\n  }\n}\n\ntest attribute_generation {\n  functions [CheckChoiceAttributeNeeds, GenerateChoiceAttribute]\n  args {\n    choice {\n      id \"choice_1\"\n      text \"Accept the memory broker's offer to trade your childhood memories for power\"\n      requirements {\n        \"savvy\" 8\n        \"integrity\" 5\n      }\n      attributes_gained []\n      attributes_lost []\n      stat_changes {\n        \"savvy\" 2\n        \"integrity\" -1\n      }\n      next_situation_id \"situation_2\"\n      internal_hint \"This choice represents a major moral decision about identity\"\n      internal_justification \"This choice tests the player's willingness to sacrifice their past for power\"\n    }\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n} ",
  "attribute_enums.baml": "// We want to create a scale that can be described narratively, rather than with numbers.\n// \"10\" might doesn't mean much to the model. We should use adjectives that explain the scale.\n",
  "bridge_nodes.baml": "// Core data models for bridge nodes\nclass BridgeNode {\n  source_situation_id string\n  target_situation_id string\n  shared_context_tags string[]\n  shared_factions string[]\n  shared_locations string[]\n  shared_themes string[]\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this bridge's creation and its narrative purpose\")\n}\n\nclass BridgeableSituation {\n  id string\n  context_tags string[]\n  factions string[]\n  locations string[]\n  themes string[]\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this situation's bridgeability and its narrative purpose\")\n}\n\n// Function to check if new attribute needed for bridge\nfunction CheckBridgeAttributeNeeds(bridge_node: BridgeNode, world_context: WorldContext) -> bool {\n  client ReforgedClient\n  prompt #\"\n    Determine if a new attribute needs to be created for this bridge connection. Answer ONLY with 'true' or 'false'.\n    \n    Bridge Node:\n    {{ bridge_node }}\n    \n    World Context:\n    {{ world_context }}\n    \n    Consider:\n    1. Do the shared elements suggest a new attribute?\n    2. Would this attribute enhance the narrative connection?\n    3. Is this attribute consistent with existing attributes?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate new attribute for bridge\nfunction GenerateBridgeAttribute(bridge_node: BridgeNode, world_context: WorldContext) -> PlayerAttribute {\n  client ReforgedClient\n  prompt #\"\n    Generate a new attribute based on the bridge connection and world context.\n    \n    Bridge Node:\n    {{ bridge_node }}\n    \n    World Context:\n    {{ world_context }}\n    \n    The attribute should:\n    1. Represent the connection between the situations\n    2. Have meaningful stat modifications\n    3. Be consistent with the world's themes\n    4. Enhance the narrative impact of the bridge\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to identify bridgeable situations\nfunction IdentifyBridgeableSituations(arcs: Arc[]) -> BridgeableSituation[] {\n  client ReforgedClient\n  prompt #\" \n    Identify all bridgeable situations from the given arcs.\n    Return ONLY situations that are marked as bridgeable.\n    \n    Arcs:\n    {{ arcs }}\n    \n    For each bridgeable situation, extract:\n    1. Context tags\n    2. Factions involved\n    3. Locations mentioned\n    4. Themes present\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to find potential bridge connections\nfunction FindBridgeConnections(bridgeable_situations: BridgeableSituation[]) -> BridgeNode[] {\n  client ReforgedClient\n  prompt #\"\n    Find potential bridge connections between situations based on shared elements.\n    \n    Bridgeable Situations:\n    {{ bridgeable_situations }}\n    \n    For each connection, identify:\n    1. Shared context tags\n    2. Shared factions\n    3. Shared locations\n    4. Shared themes\n    \n    Only create bridges that make narrative sense and enhance the story.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to validate bridge connections\nfunction ValidateBridgeConnections(bridge_nodes: BridgeNode[], arcs: Arc[], world_context: WorldContext) -> BridgeNode[] {\n  client ReforgedClient\n  prompt #\"\n    Validate the proposed bridge connections to ensure they make narrative sense.\n    \n    Proposed Bridge Nodes:\n    {{ bridge_nodes }}\n    \n    Arcs:\n    {{ arcs }}\n    \n    World Context:\n    {{ world_context }}\n    \n    Consider:\n    1. Do the connections maintain narrative coherence?\n    2. Are the shared elements meaningful?\n    3. Do the bridges enhance rather than confuse the story?\n    4. Would new attributes strengthen the connections?\n    \n    Return only the valid bridge connections.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for bridge node processing\ntest bridgeable_situation_identification {\n  functions [IdentifyBridgeableSituations]\n  args {\n    arcs [\n      {\n        seed {\n          title \"The Memory Thief\"\n          core_conflict \"identity theft\"\n          theme_tags [\"memory\", \"betrayal\"]\n          tone \"tense\"\n          factions_involved [\"Spindle Corps\"]\n          internal_hint \"Explores the consequences of memory theft\"\n          internal_justification \"This arc examines the personal and societal impact of memory manipulation\"\n        }\n        situations [\n          {\n            id \"memory_heist\"\n            description \"Breaking into a memory vault\"\n            choices []\n            requirements {}\n            consequences {}\n            bridgeable true\n            context_tags [\"heist\", \"memory_fragment\", \"security\"]\n            internal_hint \"The heist could connect to other memory-related situations\"\n            internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n          }\n        ]\n      }\n      {\n        seed {\n          title \"The Mirror Mind\"\n          core_conflict \"self-discovery\"\n          theme_tags [\"identity\", \"reflection\"]\n          tone \"mysterious\"\n          factions_involved [\"Red Branch\"]\n          internal_hint \"Focuses on identity and self-perception\"\n          internal_justification \"This arc explores how memory and identity are intertwined\"\n        }\n        situations [\n          {\n            id \"mirror_chamber\"\n            description \"Facing your reflection in the mirror chamber\"\n            choices []\n            requirements {}\n            consequences {}\n            bridgeable true\n            context_tags [\"mirrormind\", \"identity\", \"reflection\"]\n            internal_hint \"The mirror chamber could connect to other identity-related situations\"\n            internal_justification \"This situation deals with identity and reflection, making it a potential bridge point\"\n          }\n        ]\n      }\n    ]\n  }\n}\n\ntest bridge_connection_generation {\n  functions [FindBridgeConnections]\n  args {\n    bridgeable_situations [\n      {\n        id \"memory_heist\"\n        context_tags [\"heist\", \"memory_fragment\", \"security\"]\n        factions [\"Spindle Corps\"]\n        locations [\"memory_vault\"]\n        themes [\"memory\", \"security\"]\n        internal_hint \"The heist could connect to other memory-related situations\"\n        internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n      }\n      {\n        id \"mirror_chamber\"\n        context_tags [\"mirrormind\", \"identity\", \"reflection\"]\n        factions [\"Red Branch\"]\n        locations [\"mirror_chamber\"]\n        themes [\"identity\", \"reflection\"]\n        internal_hint \"The mirror chamber could connect to other identity-related situations\"\n        internal_justification \"This situation deals with identity and reflection, making it a potential bridge point\"\n      }\n    ]\n  }\n}\n\ntest bridge_validation {\n  functions [ValidateBridgeConnections]\n  args {\n    bridge_nodes [\n      {\n        source_situation_id \"memory_heist\"\n        target_situation_id \"mirror_chamber\"\n        shared_context_tags [\"identity\"]\n        shared_factions []\n        shared_locations []\n        shared_themes [\"memory\"]\n        internal_hint \"Connects memory manipulation with identity exploration\"\n        internal_justification \"This bridge links the physical act of memory theft with the psychological impact on identity\"\n      }\n    ]\n    arcs [\n      {\n        seed {\n          title \"The Memory Thief\"\n          core_conflict \"identity theft\"\n          theme_tags [\"memory\", \"betrayal\"]\n          tone \"tense\"\n          factions_involved [\"Spindle Corps\"]\n          internal_hint \"Explores the consequences of memory theft\"\n          internal_justification \"This arc examines the personal and societal impact of memory manipulation\"\n        }\n        situations [\n          {\n            id \"memory_heist\"\n            description \"Breaking into a memory vault\"\n            choices []\n            requirements {}\n            consequences {}\n            bridgeable true\n            context_tags [\"heist\", \"memory_fragment\", \"security\"]\n            internal_hint \"The heist could connect to other memory-related situations\"\n            internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n          }\n        ]\n      }\n      {\n        seed {\n          title \"The Mirror Mind\"\n          core_conflict \"self-discovery\"\n          theme_tags [\"identity\", \"reflection\"]\n          tone \"mysterious\"\n          factions_involved [\"Red Branch\"]\n          internal_hint \"Focuses on identity and self-perception\"\n          internal_justification \"This arc explores how memory and identity are intertwined\"\n        }\n        situations [\n          {\n            id \"mirror_chamber\"\n            description \"Facing your reflection in the mirror chamber\"\n            choices []\n            requirements {}\n            consequences {}\n            bridgeable true\n            context_tags [\"mirrormind\", \"identity\", \"reflection\"]\n            internal_hint \"The mirror chamber could connect to other identity-related situations\"\n            internal_justification \"This situation deals with identity and reflection, making it a potential bridge point\"\n          }\n        ]\n      }\n    ]\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n}\n\ntest bridge_attribute_processing {\n  functions [CheckBridgeAttributeNeeds, GenerateBridgeAttribute]\n  args {\n    bridge_node {\n      source_situation_id \"memory_heist\"\n      target_situation_id \"mirror_chamber\"\n      shared_context_tags [\"identity\"]\n      shared_factions []\n      shared_locations []\n      shared_themes [\"memory\"]\n      internal_hint \"Connects memory manipulation with identity exploration\"\n      internal_justification \"This bridge links the physical act of memory theft with the psychological impact on identity\"\n    }\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n} ",
  "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n// Only use openai for reforged client\nclient<llm> ReforgedClient {\n  provider fallback\n  options {\n    strategy [CustomGPT4oMini, CustomGPT41mini, CustomGPT4o, CustomGPT41]\n  }\n}\nclient<llm> CustomGPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n    max_tokens 32768\n  }\n}\n\nclient<llm> CustomGPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n    max_tokens 32768\n  }\n}\nclient<llm> CustomGPT41mini {\n  provider openai\n  options {\n    model \"gpt-4.1-mini\"\n    api_key env.OPENAI_API_KEY\n    max_tokens 32768\n  }\n}\nclient<llm> CustomGPT41 {\n  provider openai\n  options {\n    model \"gpt-4.1\"\n    api_key env.OPENAI_API_KEY\n    max_tokens 32768\n  }\n}\nclient<llm> CustomSonnet {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n\nclient<llm> CustomHaiku {\n  provider anthropic\n  retry_policy Constant\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/round-robin\nclient<llm> CustomFast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    strategy [CustomGPT4oMini, CustomHaiku]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [CustomGPT4oMini, CustomGPT4oMini]\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "generators.baml": "// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.90.2\"\n\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    default_client_mode sync\n}\ngenerator target_frontend {\n    output_type \"typescript\"\n    output_dir \"../../../reforged-frontend/\"\n    version \"0.90.2\"\n    default_client_mode sync\n}\n",
  "libertas.baml": "",
  "narrative_elements.baml": "// Core data models for narrative elements\nclass NPC {\n  id string\n  name string\n  role string\n  short_description string? @description(\"1-2 sentence summary of the most important aspects\")\n  description string\n  personality_traits string[]\n  relationships map<string, string>  // npc_id -> relationship_type\n  faction_affiliations string[]  // List of faction names\n  location_id string\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this NPC's creation and its narrative purpose\")\n}\n\nclass Item {\n  id string\n  name string\n  type string  // weapon, tool, artifact, memory, etc.\n  description string\n  effects map<string, int>  // stat_name -> modifier\n  requirements map<string, int>  // stat_name -> minimum_value\n  rarity string  // common, uncommon, rare, legendary\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this item's creation and its narrative purpose\")\n}\n\nclass Location {\n  id string\n  name string\n  type string  // district, building, landmark, etc.\n  description string\n  traits string[]\n  hazards string[]\n  connected_locations string[]  // List of location IDs\n  npcs_present string[]  // List of NPC IDs\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this location's creation and its narrative purpose\")\n}\n\nclass Event {\n  id string\n  title string\n  description string\n  type string  // encounter, discovery, revelation, etc.\n  triggers string[]  // Conditions that can trigger this event\n  consequences map<string, string>  // choice_id -> outcome\n  affected_npcs string[]  // List of NPC IDs\n  affected_locations string[]  // List of location IDs\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this event's creation and its narrative purpose\")\n}\n\nclass Quest {\n  id string\n  title string\n  description string\n  type string  // main, side, faction, etc.\n  objectives string[]\n  rewards map<string, int>  // stat_name -> value\n  requirements map<string, int>  // stat_name -> minimum_value\n  related_npcs string[]  // List of NPC IDs\n  related_locations string[]  // List of location IDs\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this quest's creation and its narrative purpose\")\n}\n\n// Function to generate NPCs for a situation\nfunction GenerateNPCsForSituation(world_context: WorldContext, situation: Situation) -> NPC[] {\n  client ReforgedClient\n  prompt #\"\n    Generate NPCs that would be present in this situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Situation:\n    {{ situation }}\n    \n    The NPCs should:\n    1. Have clear roles in the situation\n    2. Have meaningful relationships with each other\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate items for a situation\nfunction GenerateItemsForSituation(world_context: WorldContext, situation: Situation) -> Item[] {\n  client ReforgedClient\n  prompt #\"\n    Generate items that would be relevant to this situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Situation:\n    {{ situation }}\n    \n    The items should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful effects and requirements\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate locations for a situation\nfunction GenerateLocationsForSituation(world_context: WorldContext, situation: Situation) -> Location[] {\n  client ReforgedClient\n  prompt #\"\n    Generate locations that would be relevant to this situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Situation:\n    {{ situation }}\n    \n    The locations should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful traits and hazards\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate events for a situation\nfunction GenerateEventsForSituation(world_context: WorldContext, situation: Situation) -> Event[] {\n  client ReforgedClient\n  prompt #\"\n    Generate events that could occur in this situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Situation:\n    {{ situation }}\n    \n    The events should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful triggers and consequences\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate quests for a situation\nfunction GenerateQuestsForSituation(world_context: WorldContext, situation: Situation) -> Quest[] {\n  client ReforgedClient\n  prompt #\"\n    Generate quests that could arise from this situation.\n    \n    World Context:\n    {{ world_context }}\n    \n    Situation:\n    {{ situation }}\n    \n    The quests should:\n    1. Be appropriate for the situation's context\n    2. Have meaningful objectives and rewards\n    3. Be consistent with the world's themes\n    4. Support the narrative purpose of the situation\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for narrative element generation\ntest npc_generation {\n  functions [GenerateNPCsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest item_generation {\n  functions [GenerateItemsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest location_generation {\n  functions [GenerateLocationsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest event_generation {\n  functions [GenerateEventsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n}\n\ntest quest_generation {\n  functions [GenerateQuestsForSituation]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation {\n      id \"memory_heist\"\n      description \"Breaking into a memory vault\"\n      choices []\n      requirements {}\n      consequences {}\n      bridgeable true\n      context_tags [\"heist\", \"memory_fragment\", \"security\"]\n      internal_hint \"The heist could connect to other memory-related situations\"\n      internal_justification \"This situation involves memory manipulation and security, making it a good bridge point\"\n    }\n  }\n} ",
  "player_state.baml": "// Core data models for player state\nclass PlayerStats {\n  // MINDSET Stats\n  might int @description(\"How much physical strength the player has.\")\n  insight int @description(\"How much mental acuity the player has.\")\n  nimbleness int @description(\"How nimble the player is.\")\n  destiny int @description(\"How much luck the player has.\")\n  savvy int @description(\"How well the character handles learning new things in the moment.\")\n  expertise int @description(\"How much techincal expertise the player has.\")\n  tenacity int @description(\"How resilient the player is to stress, injury, and other forms of adversity.\")\n\n  // SOCIAL Stats\n  station int @description(\"How well the player fits in with the local community.\")\n  opulence int @description(\"How wealthy the player is.\")\n  celebrity int @description(\"How well known the player is.\")\n  integrity int @description(\"How honest the player is.\")\n  allure int @description(\"How attractive the player is.\")\n  lineage int @description(\"How much of a legacy the player has.\")\n}\n\n// Narrative stat descriptors - 10 is average, each point is 1 standard deviation\nclass StatDescriptors {\n  might_descriptors map<string, string>\n  insight_descriptors map<string, string>\n  nimbleness_descriptors map<string, string>\n  destiny_descriptors map<string, string>\n  savvy_descriptors map<string, string>\n  expertise_descriptors map<string, string>\n  tenacity_descriptors map<string, string>\n  station_descriptors map<string, string>\n  opulence_descriptors map<string, string>\n  celebrity_descriptors map<string, string>\n  integrity_descriptors map<string, string>\n  allure_descriptors map<string, string>\n  lineage_descriptors map<string, string>\n}\n\n// Default stat descriptors\nfunction GetDefaultStatDescriptors() -> StatDescriptors {\n  client ReforgedClient\n  prompt #\"\n    Generate narrative descriptors for each stat level. Each stat ranges from 1-20, with 10 being average.\n    Each point represents one standard deviation from the mean.\n    \n    For each stat type, create appropriate descriptors:\n    - Might: Physical strength and prowess\n    - Insight: Mental acuity and understanding  \n    - Nimbleness: Physical dexterity and speed\n    - Destiny: Luck and fortune\n    - Savvy: Street smarts and adaptability\n    - Expertise: Technical knowledge and skill\n    - Tenacity: Mental resilience and determination\n    - Station: Social standing and belonging\n    - Opulence: Wealth and material resources\n    - Celebrity: Fame and recognition\n    - Integrity: Honesty and moral character\n    - Allure: Physical attractiveness and charm\n    - Lineage: Family legacy and connections\n    \n    Create descriptors for values 1-20, with 10 as \"average\" for each stat.\n    Lower values should be progressively weaker, higher values progressively stronger.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to get narrative description of a stat value\nfunction GetStatNarrative(stat_name: string, stat_value: int, descriptors: StatDescriptors) -> string {\n  client ReforgedClient\n  prompt #\"\n    Get the narrative description for the given stat and value.\n    \n    Stat Name: {{ stat_name }}\n    Stat Value: {{ stat_value }}\n    \n    Descriptors: {{ descriptors }}\n    \n    Return the appropriate descriptor for this stat and value.\n    Convert the stat_value to a string key to look up in the descriptors map.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\nclass PlayerAttribute {\n  id string\n  type string  // condition, item, status, memory, identity, mod, tag_only\n  description string\n  stat_mods map<string, int>?  // stat_name -> modifier\n}\n\nclass PlayerProfile {\n  narrative_summary string\n  key_traits string[]\n  background_hints string[]\n}\n\nclass PlayerState {\n  name string\n  stats PlayerStats\n  attributes PlayerAttribute[]\n  profile PlayerProfile\n  history string[] @description(\"A narrative of the player's history that can be used for further generation.\")\n}\n\n// Function to initialize player stats\nfunction InitializePlayerStats(world_context: WorldContext) -> PlayerStats {\n  client ReforgedClient\n  prompt #\"\n    Initialize player stats based on the world context. All stats start at 10 (population mean).\n    \n    World Context:\n    {{ world_context }}\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate initial attributes\nfunction GenerateInitialAttributes(world_context: WorldContext) -> PlayerAttribute[] {\n  client ReforgedClient\n  prompt #\"\n    Generate initial player attributes based on the world context.\n    \n    World Context:\n    {{ world_context }}\n    \n    Consider:\n    1. What starting conditions make sense for this world?\n    2. What basic items or statuses would a new character have?\n    3. What memories or identity elements would be appropriate?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate player profile\nfunction GeneratePlayerProfile(world_context: WorldContext, stats: PlayerStats, attributes: PlayerAttribute[]) -> PlayerProfile {\n  client ReforgedClient\n  prompt #\"\n    Generate a narrative player profile based on the world context, stats, and attributes.\n    \n    World Context:\n    {{ world_context }}\n    \n    Player Stats:\n    {{ stats }}\n    \n    Player Attributes:\n    {{ attributes }}\n    \n    The profile should:\n    1. Synthesize stats and attributes into a coherent narrative\n    2. Include key personality traits\n    3. Suggest potential background elements\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test cases for player state initialization\ntest player_stats_initialization {\n  functions [InitializePlayerStats]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n}\n\ntest initial_attributes_generation {\n  functions [GenerateInitialAttributes]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n  }\n}\n\ntest player_profile_generation {\n  functions [GeneratePlayerProfile]\n  args {\n    world_context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      technologies []\n      factions []\n      districts []\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    stats {\n      might 10\n      insight 10\n      nimbleness 10\n      destiny 10\n      savvy 10\n      expertise 10\n      tenacity 10\n      station 10\n      opulence 10\n      celebrity 10\n      integrity 10\n      allure 10\n      lineage 10\n    }\n    attributes [\n      {\n        id \"newcomer\"\n        type \"status\"\n        description \"A recent arrival to Neon Haven, still learning the city's ways\"\n        stat_mods {\n          \"savvy\" -1\n          \"station\" -1\n          \"insight\" 1\n        }\n      }\n      {\n        id \"memory_clean\"\n        type \"condition\"\n        description \"Your memories are unmodified and pure\"\n        stat_mods {\n          \"integrity\" 1\n          \"savvy\" -1\n        }\n      }\n    ]\n  }\n} ",
  "resume.baml": "// Defining a data model.\nclass Resume {\n  name string\n  email string\n  experience string[]\n  skills string[]\n}\n\n// Create a function to extract the resume from a string.\n",
  "tools.baml": "// Tool selection system for world generation\n\n// Union type for all available world concept lookup tools\nclass WorldConceptTool {\n  tool_name string\n  description string\n  parameters map<string, string>\n}\n\nfunction SelectWorldTool(world_context: WorldContext, user_message: string) -> (GetTechnologyDetails | GetFactionDetails | GetDistrictDetails | GetNPCDetails)[] {\n  client ReforgedClient\n  prompt #\"\n    Given a world context and user message, determine which world concept tools to call to get more detailed information.\n    \n    {{ CompressedWorldContext(world_context) }}\n    \n    User Message:\n    {{ user_message }}\n    \n    Available Tools:\n    - get_technology_details: Get detailed information about a specific technology\n    - get_faction_details: Get detailed information about a specific faction  \n    - get_district_details: Get detailed information about a specific district\n    - get_npc_details: Get detailed information about a specific NPC\n    \n    Select the appropriate tools needed to answer the user's question or generate content based on their message.\n    Only select tools for concepts that are relevant to the user's message.\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\ntemplate_string GenerationToolList = #\"\n    Create a new NPC - At this generation step, create a new NPC for future use.\n    Create a new Faction - At this generation step, create a new Faction for future use.\n    Create a new Technology\n    Create a new Situation - At this generation step, create a single situation\n    Create a new Choice - At this generation step, create a single Choice for the current situation.\n    Create a new Arc - Create a new arc, where the root situation is the current situation.\n\"#\n\nfunction SelectGenerationTool(world_context: WorldContext, player_state: PlayerState, arc: Arc) -> string {\n  client ReforgedClient\n  prompt #\"\n    Given the current world context and player state, select the generation tool to use.\n    \n    {{ CompressedWorldContext(world_context) }}\n    \n    Player State:\n    {{ player_state }}\n\n    Arc:\n    {{ arc }}\n\n    You will select from a list of tools a single choice.\n\n    {{ GenerationToolList }}\n\n  \"#\n}",
  "world_context.baml": "// Core data models for world generation\nclass WorldSeed {\n  name string\n  themes string[]\n  high_concept string\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this seed's creation and its narrative purpose\")\n}\n\n// Tool definitions for requesting detailed information\nclass GetTechnologyDetails {\n  tool_name \"get_technology_details\" @description(\"Get detailed information about a specific technology.\")\n  technology_name string @description(\"The name of the technology to get details for.\")\n}\n\nclass GetFactionDetails {\n  tool_name \"get_faction_details\" @description(\"Get detailed information about a specific faction.\")\n  faction_name string @description(\"The name of the faction to get details for.\")\n}\n\nclass GetDistrictDetails {\n  tool_name \"get_district_details\" @description(\"Get detailed information about a specific district.\")\n  district_name string @description(\"The name of the district to get details for.\")\n}\n\nclass GetNPCDetails {\n  tool_name \"get_npc_details\" @description(\"Get detailed information about a specific NPC.\")\n  npc_name string @description(\"The name of the NPC to get details for.\")\n}\n\nclass Technology {\n  name string\n  description string\n  short_description string? @description(\"1-2 sentence summary of the most important aspects\")\n  impact string  // List of narrative impacts\n  limitations string  // List of limitations/rules\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this technology's creation and its narrative purpose\")\n}\n\nclass Faction {\n  name string\n  short_description string? @description(\"1-2 sentence summary of the most important aspects\")\n  ideology string?\n  territory string[]?\n  influence_level int  // 0-10 scale\n  relationships map<string, string>?  // faction_name -> relationship_type\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this faction's creation and its narrative purpose\")\n}\n\nclass District {\n  id string\n  short_description string? @description(\"1-2 sentence summary of the most important aspects\")\n  traits string[]\n  hazards string[]\n  factions string[]  // List of faction names present\n  description string\n  internal_hint string? @description(\"Clue for future model calls to guide generation\")\n  internal_justification string? @description(\"Reasoning for this district's creation and its narrative purpose\")\n}\n\nclass WorldContext {\n  seed WorldSeed\n  technologies Technology[]\n  factions Faction[]\n  districts District[]\n  npcs NPC[]\n  tension_sliders map<string, int>  // e.g. {\"violence\": 7, \"mystery\": 4}\n}\n\n// Template for compressed world context representation\ntemplate_string CompressedWorldContext = #\"\nWorld: {{ world_context.seed.name }}\nThemes: {{ world_context.seed.themes | join(\", \") }}\nHigh Concept: {{ world_context.seed.high_concept }}\n\nTechnologies Available:\n{% for tech in world_context.technologies -%}\n- {{ tech.name }}: {{ tech.short_description or (tech.description[:100] + \"...\" if tech.description|length > 100 else tech.description) }}\n{% endfor %}\n\nFactions Available:\n{% for faction in world_context.factions -%}\n- {{ faction.name }}: {{ faction.short_description or (faction.ideology[:100] + \"...\" if faction.ideology and faction.ideology|length > 100 else (faction.ideology or \"A faction in the world.\")) }}\n{% endfor %}\n\nDistricts Available:\n{% for district in world_context.districts -%}\n- {{ district.id }}: {{ district.short_description or (district.description[:100] + \"...\" if district.description|length > 100 else district.description) }}\n{% endfor %}\n\nNPCs Available:\n{% for npc in world_context.npcs -%}\n- {{ npc.name }} ({{ npc.role }}): {{ npc.short_description or (npc.role + \": \" + (npc.description[:80] + \"...\" if npc.description|length > 80 else npc.description)) }}\n{% endfor %}\n\nTension Levels:\n{% for key, value in world_context.tension_sliders -%}\n- {{ key | title }}: {{ value }}/10\n{% endfor %}\n\"#\n\n// Function to analyze if new technology needs to be created\nfunction CheckTechnologyNeeds(context: WorldContext, situation_description: string) -> bool {\n  client ReforgedClient\n  prompt #\"\n    Given the current world context and a situation description, determine if a new technology needs to be defined. Answer ONLY with 'true' or 'false'. \n    \n    {{ CompressedWorldContext(context) }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    Consider:\n    1. Does the situation introduce a new technological concept?\n    2. Would this technology significantly impact the world's narrative?\n    3. Is this technology consistent with existing tech rules?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to check if a new faction should be created\nfunction CheckFactionNeeds(context: WorldContext, situation_description: string) -> bool {\n  client ReforgedClient\n  prompt #\"\n    Given the current world context and a situation description, determine if a new faction needs to be created. Answer ONLY with 'true' or 'false'.\n    \n    {{ CompressedWorldContext(context) }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    Consider:\n    1. Does the situation introduce a new group or organization?\n    2. Would this faction add meaningful complexity to the world?\n    3. Is this faction distinct from existing factions?\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate new technology\nfunction GenerateTechnology(context: WorldContext, situation_description: string) -> Technology {\n  client ReforgedClient\n  prompt #\"\n    Generate a new technology based on the world context and situation.\n    \n    {{ CompressedWorldContext(context) }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    The technology should:\n    1. Be consistent with the world's themes and existing tech\n    2. Have clear narrative impacts\n    3. Include meaningful limitations\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate new faction\nfunction GenerateFaction(context: WorldContext, situation_description: string) -> Faction {\n  client ReforgedClient\n  prompt #\"\n    Generate a new faction based on the world context and situation.\n    \n    {{ CompressedWorldContext(context) }}\n    \n    Situation Description:\n    {{ situation_description }}\n    \n    The faction should:\n    1. Have a clear ideology\n    2. Fit within the world's themes\n    3. Have meaningful relationships with existing factions\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Function to generate initial districts\nfunction GenerateDistricts(context: WorldContext) -> District[] {\n  client ReforgedClient\n  prompt #\"\n    Generate initial districts for the world based on the context.\n    \n    {{ CompressedWorldContext(context) }}\n    \n    Each district should:\n    1. Have distinct traits and hazards\n    2. Include relevant factions\n    3. Support the world's themes\n    \n    {{ ctx.output_format }}\n  \"#\n}\n\n// Test case\ntest world_context_generation {\n  functions [CheckTechnologyNeeds, CheckFactionNeeds, GenerateTechnology, GenerateFaction, GenerateDistricts]\n  args {\n    context {\n      seed {\n        name \"Neon Haven\"\n        themes [\"cyberpunk\", \"biotech\", \"memory\", \"surveillance\"]\n        high_concept \"A city where memories can be traded and modified, leading to a black market of identity and experience\"\n        internal_hint \"Memory manipulation is the core technological and social driver\"\n        internal_justification \"This concept allows for exploration of identity, trust, and power dynamics in a cyberpunk setting\"\n      }\n      concept_summaries [\n        {\n          id \"memory_trading_tech\"\n          name \"Memory Trading Technology\"\n          type \"technology\"\n          short_description \"Allows extraction and implantation of memories, but with dangerous side effects.\"\n        }\n      ]\n      tension_sliders {\n        \"violence\" 6\n        \"mystery\" 8\n        \"corruption\" 7\n      }\n    }\n    situation_description \"A memory trader offers to sell you someone else's combat experience, but warns it might contain dangerous side effects.\"\n  }\n} ",
}
export const getBamlFiles = () => {
    return fileMap;
}