/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export interface Arc {
  seed: ArcSeed
  situations: Situation[]
  outcomes: ArcOutcome[]
  
}

export interface ArcOutcome {
  id: string
  description: string
  internal_hint: string
  internal_justification: string
  tags: string[]
  estimated_duration: number
  
}

export interface ArcSeed {
  title: string
  core_conflict: string
  theme_tags: string[]
  tone: string
  factions_involved: string[]
  internal_hint: string
  internal_justification: string
  
}

export interface BridgeNode {
  source_situation_id: string
  target_situation_id: string
  shared_context_tags: string[]
  shared_factions: string[]
  shared_locations: string[]
  shared_themes: string[]
  internal_hint?: string | null
  internal_justification?: string | null
  
}

export interface BridgeableSituation {
  id: string
  context_tags: string[]
  factions: string[]
  locations: string[]
  themes: string[]
  internal_hint?: string | null
  internal_justification?: string | null
  
}

export interface Choice {
  id: string
  text: string
  dialogue_response?: string | null
  choice_type: string
  player_perspective: string
  emotional_tone: string
  body_language?: string | null
  requirements: Record<string, number>
  attributes_gained: PlayerAttribute[]
  attributes_lost: string[]
  stat_changes: Record<string, number>
  next_situation_id?: string | null
  internal_hint: string
  internal_justification: string
  new_npcs: NPC[]
  new_factions: Faction[]
  new_technologies: Technology[]
  
}

export interface CompressedWorldContext {
  seed: WorldSeed
  concept_summaries: ConceptSummary[]
  tension_sliders: Record<string, number>
  
}

export interface ConceptSummary {
  id: string
  name: string
  type: string
  short_description: string
  
}

export interface District {
  id: string
  traits: string[]
  hazards: string[]
  factions: string[]
  description: string
  internal_hint?: string | null
  internal_justification?: string | null
  
}

export interface Event {
  id: string
  title: string
  description: string
  type: string
  triggers: string[]
  consequences: Record<string, string>
  affected_npcs: string[]
  affected_locations: string[]
  internal_hint?: string | null
  internal_justification?: string | null
  
}

export interface Faction {
  name: string
  ideology?: string | null
  territory?: string[] | null
  influence_level: number
  relationships?: Record<string, string> | null
  internal_hint?: string | null
  internal_justification?: string | null
  
}

export interface GetDistrictDetails {
  tool_name: "get_district_details"
  district_name: string
  
}

export interface GetFactionDetails {
  tool_name: "get_faction_details"
  faction_name: string
  
}

export interface GetNPCDetails {
  tool_name: "get_npc_details"
  npc_name: string
  
}

export interface GetTechnologyDetails {
  tool_name: "get_technology_details"
  technology_name: string
  
}

export interface Item {
  id: string
  name: string
  type: string
  description: string
  effects: Record<string, number>
  requirements: Record<string, number>
  rarity: string
  internal_hint?: string | null
  internal_justification?: string | null
  
}

export interface Location {
  id: string
  name: string
  type: string
  description: string
  traits: string[]
  hazards: string[]
  connected_locations: string[]
  npcs_present: string[]
  internal_hint?: string | null
  internal_justification?: string | null
  
}

export interface NPC {
  id: string
  name: string
  role: string
  description: string
  personality_traits: string[]
  relationships: Record<string, string>
  faction_affiliations: string[]
  location_id: string
  internal_hint?: string | null
  internal_justification?: string | null
  
}

export interface PlayerAttribute {
  id: string
  type: string
  description: string
  stat_mods?: Record<string, number> | null
  
}

export interface PlayerProfile {
  narrative_summary: string
  key_traits: string[]
  background_hints: string[]
  
}

export interface PlayerState {
  name: string
  stats: PlayerStats
  attributes: PlayerAttribute[]
  profile: PlayerProfile
  history: string[]
  
}

export interface PlayerStats {
  might: number
  insight: number
  nimbleness: number
  destiny: number
  savvy: number
  expertise: number
  tenacity: number
  station: number
  opulence: number
  celebrity: number
  integrity: number
  allure: number
  lineage: number
  
}

export interface Quest {
  id: string
  title: string
  description: string
  type: string
  objectives: string[]
  rewards: Record<string, number>
  requirements: Record<string, number>
  related_npcs: string[]
  related_locations: string[]
  internal_hint?: string | null
  internal_justification?: string | null
  
}

export interface Resume {
  name: string
  email: string
  experience: string[]
  skills: string[]
  
}

export interface Situation {
  id: string
  description: string
  player_perspective_description: string
  choices: Choice[]
  stat_requirements: StatRequirement[]
  consequences: Record<string, string>
  bridgeable: boolean
  context_tags: string[]
  internal_hint: string
  internal_justification: string
  
}

export interface StatDescriptors {
  might_descriptors: Record<string, string>
  insight_descriptors: Record<string, string>
  nimbleness_descriptors: Record<string, string>
  destiny_descriptors: Record<string, string>
  savvy_descriptors: Record<string, string>
  expertise_descriptors: Record<string, string>
  tenacity_descriptors: Record<string, string>
  station_descriptors: Record<string, string>
  opulence_descriptors: Record<string, string>
  celebrity_descriptors: Record<string, string>
  integrity_descriptors: Record<string, string>
  allure_descriptors: Record<string, string>
  lineage_descriptors: Record<string, string>
  
}

export interface StatRequirement {
  attribute_name: "might" | "insight" | "nimbleness" | "destiny" | "savvy" | "expertise" | "tenacity" | "station" | "opulence" | "celebrity" | "integrity" | "allure" | "lineage"
  min_value: number
  
}

export interface Technology {
  name: string
  description: string
  impact: string
  limitations: string
  internal_hint?: string | null
  internal_justification?: string | null
  
}

export interface WorldConceptTool {
  tool_name: string
  description: string
  parameters: Record<string, string>
  
}

export interface WorldContext {
  seed: WorldSeed
  technologies: Technology[]
  factions: Faction[]
  districts: District[]
  npcs: NPC[]
  tension_sliders: Record<string, number>
  
}

export interface WorldSeed {
  name: string
  themes: string[]
  high_concept: string
  internal_hint?: string | null
  internal_justification?: string | null
  
}
