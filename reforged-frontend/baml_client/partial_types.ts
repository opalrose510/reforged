/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  Arc,  ArcOutcome,  ArcSeed,  BridgeNode,  BridgeableSituation,  Choice,  CompressedWorldContext,  ConceptSummary,  District,  Event,  Faction,  GetDistrictDetails,  GetFactionDetails,  GetNPCDetails,  GetTechnologyDetails,  Item,  Location,  NPC,  PlayerAttribute,  PlayerProfile,  PlayerState,  PlayerStats,  Quest,  Resume,  Situation,  StatDescriptors,  StatRequirement,  Technology,  WorldConceptTool,  WorldContext,  WorldSeed } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
    value: T
    state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    
    export interface Arc {
        seed?: (partial_types.ArcSeed | null)
        situations?: (partial_types.Situation | null)[]
        outcomes?: (partial_types.ArcOutcome | null)[]
    }
    
    export interface ArcOutcome {
        id?: (string | null)
        description?: (string | null)
        internal_hint?: (string | null)
        internal_justification?: (string | null)
        tags?: (string | null)[]
        estimated_duration?: (number | null)
    }
    
    export interface ArcSeed {
        title?: (string | null)
        core_conflict?: (string | null)
        theme_tags?: (string | null)[]
        tone?: (string | null)
        factions_involved?: (string | null)[]
        internal_hint?: (string | null)
        internal_justification?: (string | null)
    }
    
    export interface BridgeNode {
        source_situation_id?: (string | null)
        target_situation_id?: (string | null)
        shared_context_tags?: (string | null)[]
        shared_factions?: (string | null)[]
        shared_locations?: (string | null)[]
        shared_themes?: (string | null)[]
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface BridgeableSituation {
        id?: (string | null)
        context_tags?: (string | null)[]
        factions?: (string | null)[]
        locations?: (string | null)[]
        themes?: (string | null)[]
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface Choice {
        id?: (string | null)
        text?: (string | null)
        dialogue_response: ((string | null) | null)
        choice_type?: (string | null)
        player_perspective?: (string | null)
        emotional_tone?: (string | null)
        body_language: ((string | null) | null)
        requirements?: (Record<string, (number | null)> | null)
        attributes_gained?: (partial_types.PlayerAttribute | null)[]
        attributes_lost?: (string | null)[]
        stat_changes?: (Record<string, (number | null)> | null)
        next_situation_id: ((string | null) | null)
        internal_hint?: (string | null)
        internal_justification?: (string | null)
        new_npcs?: (partial_types.NPC | null)[]
        new_factions?: (partial_types.Faction | null)[]
        new_technologies?: (partial_types.Technology | null)[]
    }
    
    export interface CompressedWorldContext {
        seed?: (partial_types.WorldSeed | null)
        concept_summaries?: (partial_types.ConceptSummary | null)[]
        tension_sliders?: (Record<string, (number | null)> | null)
    }
    
    export interface ConceptSummary {
        id?: (string | null)
        name?: (string | null)
        type?: (string | null)
        short_description?: (string | null)
    }
    
    export interface District {
        id?: (string | null)
        traits?: (string | null)[]
        hazards?: (string | null)[]
        factions?: (string | null)[]
        description?: (string | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface Event {
        id?: (string | null)
        title?: (string | null)
        description?: (string | null)
        type?: (string | null)
        triggers?: (string | null)[]
        consequences?: (Record<string, (string | null)> | null)
        affected_npcs?: (string | null)[]
        affected_locations?: (string | null)[]
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface Faction {
        name?: (string | null)
        ideology: ((string | null) | null)
        territory: ((string | null)[] | null)
        influence_level?: (number | null)
        relationships: ((Record<string, (string | null)> | null) | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface GetDistrictDetails {
        tool_name: "get_district_details"
        district_name?: (string | null)
    }
    
    export interface GetFactionDetails {
        tool_name: "get_faction_details"
        faction_name?: (string | null)
    }
    
    export interface GetNPCDetails {
        tool_name: "get_npc_details"
        npc_name?: (string | null)
    }
    
    export interface GetTechnologyDetails {
        tool_name: "get_technology_details"
        technology_name?: (string | null)
    }
    
    export interface Item {
        id?: (string | null)
        name?: (string | null)
        type?: (string | null)
        description?: (string | null)
        effects?: (Record<string, (number | null)> | null)
        requirements?: (Record<string, (number | null)> | null)
        rarity?: (string | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface Location {
        id?: (string | null)
        name?: (string | null)
        type?: (string | null)
        description?: (string | null)
        traits?: (string | null)[]
        hazards?: (string | null)[]
        connected_locations?: (string | null)[]
        npcs_present?: (string | null)[]
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface NPC {
        id?: (string | null)
        name?: (string | null)
        role?: (string | null)
        description?: (string | null)
        personality_traits?: (string | null)[]
        relationships?: (Record<string, (string | null)> | null)
        faction_affiliations?: (string | null)[]
        location_id?: (string | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface PlayerAttribute {
        id?: (string | null)
        type?: (string | null)
        description?: (string | null)
        stat_mods: ((Record<string, (number | null)> | null) | null)
    }
    
    export interface PlayerProfile {
        narrative_summary?: (string | null)
        key_traits?: (string | null)[]
        background_hints?: (string | null)[]
    }
    
    export interface PlayerState {
        name?: (string | null)
        stats?: (partial_types.PlayerStats | null)
        attributes?: (partial_types.PlayerAttribute | null)[]
        profile?: (partial_types.PlayerProfile | null)
        history?: (string | null)[]
    }
    
    export interface PlayerStats {
        might?: (number | null)
        insight?: (number | null)
        nimbleness?: (number | null)
        destiny?: (number | null)
        savvy?: (number | null)
        expertise?: (number | null)
        tenacity?: (number | null)
        station?: (number | null)
        opulence?: (number | null)
        celebrity?: (number | null)
        integrity?: (number | null)
        allure?: (number | null)
        lineage?: (number | null)
    }
    
    export interface Quest {
        id?: (string | null)
        title?: (string | null)
        description?: (string | null)
        type?: (string | null)
        objectives?: (string | null)[]
        rewards?: (Record<string, (number | null)> | null)
        requirements?: (Record<string, (number | null)> | null)
        related_npcs?: (string | null)[]
        related_locations?: (string | null)[]
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface Resume {
        name?: (string | null)
        email?: (string | null)
        experience?: (string | null)[]
        skills?: (string | null)[]
    }
    
    export interface Situation {
        id?: (string | null)
        description?: (string | null)
        player_perspective_description?: (string | null)
        choices?: (partial_types.Choice | null)[]
        stat_requirements?: (partial_types.StatRequirement | null)[]
        consequences?: (Record<string, (string | null)> | null)
        bridgeable?: (boolean | null)
        context_tags?: (string | null)[]
        internal_hint?: (string | null)
        internal_justification?: (string | null)
    }
    
    export interface StatDescriptors {
        might_descriptors?: (Record<string, (string | null)> | null)
        insight_descriptors?: (Record<string, (string | null)> | null)
        nimbleness_descriptors?: (Record<string, (string | null)> | null)
        destiny_descriptors?: (Record<string, (string | null)> | null)
        savvy_descriptors?: (Record<string, (string | null)> | null)
        expertise_descriptors?: (Record<string, (string | null)> | null)
        tenacity_descriptors?: (Record<string, (string | null)> | null)
        station_descriptors?: (Record<string, (string | null)> | null)
        opulence_descriptors?: (Record<string, (string | null)> | null)
        celebrity_descriptors?: (Record<string, (string | null)> | null)
        integrity_descriptors?: (Record<string, (string | null)> | null)
        allure_descriptors?: (Record<string, (string | null)> | null)
        lineage_descriptors?: (Record<string, (string | null)> | null)
    }
    
    export interface StatRequirement {
        attribute_name?: ("might" | "insight" | "nimbleness" | "destiny" | "savvy" | "expertise" | "tenacity" | "station" | "opulence" | "celebrity" | "integrity" | "allure" | "lineage" | null)
        min_value?: (number | null)
    }
    
    export interface Technology {
        name?: (string | null)
        description?: (string | null)
        impact?: (string | null)
        limitations?: (string | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface WorldConceptTool {
        tool_name?: (string | null)
        description?: (string | null)
        parameters?: (Record<string, (string | null)> | null)
    }
    
    export interface WorldContext {
        seed?: (partial_types.WorldSeed | null)
        technologies?: (partial_types.Technology | null)[]
        factions?: (partial_types.Faction | null)[]
        districts?: (partial_types.District | null)[]
        npcs?: (partial_types.NPC | null)[]
        tension_sliders?: (Record<string, (number | null)> | null)
    }
    
    export interface WorldSeed {
        name?: (string | null)
        themes?: (string | null)[]
        high_concept?: (string | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
}