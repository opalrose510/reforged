/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type {  ActionAndReasoning,  Arc,  ArcOutcome,  ArcSeed,  Choice,  CreateArc,  CreateArcOutcome,  CreateChoices,  CreateFaction,  CreateMultipleSituations,  CreateNPC,  CreateSituation,  CreateTechnology,  District,  DownOneLevel,  Event,  Faction,  FindMissingSituations,  GetSituationById,  GoToArcRoot,  GoToSituation,  GoToWorldRoot,  IdentifyNarrativeGaps,  Item,  JoinSituationOutput,  Location,  NPC,  PlayerAttribute,  PlayerProfile,  PlayerState,  PlayerStats,  Quest,  Resume,  ShortActionAndReasoning,  Situation,  StatDescriptors,  StatRequirement,  Technology,  UpOneLevel,  WorldContext,  WorldSeed } from "./types"
import type * as types from "./types"

/******************************************************************************
*
*  These types are used for streaming, for when an instance of a type
*  is still being built up and any of its fields is not yet fully available.
*
******************************************************************************/

export interface StreamState<T> {
    value: T
    state: "Pending" | "Incomplete" | "Complete"
}

export namespace partial_types {
    
    export interface ActionAndReasoning {
        action?: ((partial_types.CreateNPC | null) | (partial_types.CreateFaction | null) | (partial_types.CreateTechnology | null) | (partial_types.CreateSituation | null) | (partial_types.CreateMultipleSituations | null) | (partial_types.CreateChoices | null) | (partial_types.CreateArc | null) | (partial_types.CreateArcOutcome | null) | (partial_types.GoToSituation | null) | (partial_types.UpOneLevel | null) | (partial_types.DownOneLevel | null) | (partial_types.GoToArcRoot | null) | (partial_types.GoToWorldRoot | null) | (partial_types.GetSituationById | null) | (partial_types.FindMissingSituations | null) | (partial_types.IdentifyNarrativeGaps | null) | null)
        generated_description?: (string | null)
        reasoning?: (string | null)
    }
    
    export interface Arc {
        seed?: (partial_types.ArcSeed | null)
        situations?: (partial_types.Situation | null)[]
        outcomes?: (partial_types.ArcOutcome | null)[]
    }
    
    export interface ArcOutcome {
        id?: (string | null)
        description?: (string | null)
        internal_hint?: (string | null)
        internal_justification?: (string | null)
        tags?: (string | null)[]
        estimated_duration?: (number | null)
    }
    
    export interface ArcSeed {
        title?: (string | null)
        core_conflict?: (string | null)
        theme_tags?: (string | null)[]
        tone?: (string | null)
        factions_involved?: (string | null)[]
        internal_hint?: (string | null)
        internal_justification?: (string | null)
    }
    
    export interface Choice {
        id?: (string | null)
        text?: (string | null)
        dialogue_response: ((string | null) | null)
        choice_type?: (string | null)
        emotional_tone?: (string | null)
        body_language: ((string | null) | null)
        requirements: ((Record<string, (number | null)> | null) | null)
        attributes_gained?: (partial_types.PlayerAttribute | null)[]
        attributes_lost?: (string | null)[]
        stat_changes?: (Record<string, (number | null)> | null)
        next_situation_id: ((string | null) | null)
        internal_hint?: (string | null)
        internal_justification?: (string | null)
        new_npcs?: (partial_types.NPC | null)[]
        new_factions?: (partial_types.Faction | null)[]
        new_technologies?: (partial_types.Technology | null)[]
    }
    
    export interface CreateArc {
        tool_name: "create_arc"
        reason?: (string | null)
        generated_arc?: (partial_types.Arc | null)
    }
    
    export interface CreateArcOutcome {
        tool_name: "create_arc_outcome"
        reason?: (string | null)
        generated_arc_outcome?: (partial_types.ArcOutcome | null)
    }
    
    export interface CreateChoices {
        tool_name: "create_choices"
        reason?: (string | null)
        generated_choices?: (partial_types.Choice | null)[]
    }
    
    export interface CreateFaction {
        tool_name: "create_faction"
        reason?: (string | null)
        generated_faction?: (partial_types.Faction | null)
    }
    
    export interface CreateMultipleSituations {
        tool_name: "create_multiple_situations"
        reason?: (string | null)
        generated_situations?: (partial_types.Situation | null)[]
    }
    
    export interface CreateNPC {
        tool_name: "create_npc"
        reason?: (string | null)
        generated_npc?: (partial_types.NPC | null)
    }
    
    export interface CreateSituation {
        tool_name: "create_situation"
        reason?: (string | null)
        generated_situation?: (partial_types.Situation | null)
    }
    
    export interface CreateTechnology {
        tool_name: "create_technology"
        reason?: (string | null)
        generated_technology?: (partial_types.Technology | null)
    }
    
    export interface District {
        id?: (string | null)
        traits?: (string | null)[]
        hazards?: (string | null)[]
        factions?: (string | null)[]
        description?: (string | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface DownOneLevel {
        tool_name: "down_one_level"
        reason?: (string | null)
    }
    
    export interface Event {
        id?: (string | null)
        title?: (string | null)
        description?: (string | null)
        type?: (string | null)
        triggers?: (string | null)[]
        consequences?: (Record<string, (string | null)> | null)
        affected_npcs?: (string | null)[]
        affected_locations?: (string | null)[]
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface Faction {
        name?: (string | null)
        description?: (string | null)
        ideology: ((string | null) | null)
        location: ((string | null) | null)
        influence_level?: (number | null)
        relationships: ((Record<string, (string | null)> | null) | null)
        hazards: ((string | null)[] | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface FindMissingSituations {
        tool_name: "find_missing_situations"
        reason?: (string | null)
        missing_situations?: (partial_types.Situation | null)[]
    }
    
    export interface GetSituationById {
        tool_name: "get_situation_by_id"
        reason?: (string | null)
        situation_id?: (string | null)
    }
    
    export interface GoToArcRoot {
        tool_name: "go_to_arc_root"
        reason?: (string | null)
    }
    
    export interface GoToSituation {
        tool_name: "go_to_situation"
        reason?: (string | null)
        situation_id?: (string | null)
    }
    
    export interface GoToWorldRoot {
        tool_name: "go_to_world_root"
        reason?: (string | null)
    }
    
    export interface IdentifyNarrativeGaps {
        tool_name: "identify_narrative_gaps"
        reason?: (string | null)
        narrative_gaps?: (string | null)[]
    }
    
    export interface Item {
        id?: (string | null)
        name?: (string | null)
        type?: (string | null)
        description?: (string | null)
        effects?: (Record<string, (number | null)> | null)
        requirements?: (Record<string, (number | null)> | null)
        rarity?: (string | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface JoinSituationOutput {
        from_situation_id?: (string | null)
        to_situation_id?: (string | null)
        reason?: (string | null)
        choice?: (partial_types.Choice | null)
    }
    
    export interface Location {
        id?: (string | null)
        name?: (string | null)
        type?: (string | null)
        description?: (string | null)
        traits?: (string | null)[]
        hazards?: (string | null)[]
        connected_locations?: (string | null)[]
        npcs_present?: (string | null)[]
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface NPC {
        id?: (string | null)
        name?: (string | null)
        role?: (string | null)
        description?: (string | null)
        personality_traits?: (string | null)[]
        relationships?: (Record<string, (string | null)> | null)
        faction_affiliations?: (string | null)[]
        location_id?: (string | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface PlayerAttribute {
        id?: (string | null)
        type?: (string | null)
        description?: (string | null)
        stat_mods: ((Record<string, (number | null)> | null) | null)
    }
    
    export interface PlayerProfile {
        narrative_summary?: (string | null)
        key_traits?: (string | null)[]
        background_hints?: (string | null)[]
    }
    
    export interface PlayerState {
        name?: (string | null)
        stats?: (partial_types.PlayerStats | null)
        attributes?: (partial_types.PlayerAttribute | null)[]
        profile?: (partial_types.PlayerProfile | null)
        history?: (string | null)[]
    }
    
    export interface PlayerStats {
        might?: (number | null)
        insight?: (number | null)
        nimbleness?: (number | null)
        destiny?: (number | null)
        savvy?: (number | null)
        expertise?: (number | null)
        tenacity?: (number | null)
        station?: (number | null)
        opulence?: (number | null)
        celebrity?: (number | null)
        integrity?: (number | null)
        allure?: (number | null)
        lineage?: (number | null)
    }
    
    export interface Quest {
        id?: (string | null)
        title?: (string | null)
        description?: (string | null)
        type?: (string | null)
        objectives?: (string | null)[]
        rewards?: (Record<string, (number | null)> | null)
        requirements?: (Record<string, (number | null)> | null)
        related_npcs?: (string | null)[]
        related_locations?: (string | null)[]
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface Resume {
        name?: (string | null)
        email?: (string | null)
        experience?: (string | null)[]
        skills?: (string | null)[]
    }
    
    export interface ShortActionAndReasoning {
        action?: (string | null)
        generated_description?: (string | null)
        reasoning?: (string | null)
    }
    
    export interface Situation {
        id?: (string | null)
        description?: (string | null)
        player_perspective_description?: (string | null)
        choices?: (partial_types.Choice | null)[]
        stat_requirements?: (partial_types.StatRequirement | null)[]
        bridgeable?: (boolean | null)
        context_tags?: (string | null)[]
        internal_hint?: (string | null)
        internal_justification?: (string | null)
    }
    
    export interface StatDescriptors {
        might_descriptors?: (Record<string, (string | null)> | null)
        insight_descriptors?: (Record<string, (string | null)> | null)
        nimbleness_descriptors?: (Record<string, (string | null)> | null)
        destiny_descriptors?: (Record<string, (string | null)> | null)
        savvy_descriptors?: (Record<string, (string | null)> | null)
        expertise_descriptors?: (Record<string, (string | null)> | null)
        tenacity_descriptors?: (Record<string, (string | null)> | null)
        station_descriptors?: (Record<string, (string | null)> | null)
        opulence_descriptors?: (Record<string, (string | null)> | null)
        celebrity_descriptors?: (Record<string, (string | null)> | null)
        integrity_descriptors?: (Record<string, (string | null)> | null)
        allure_descriptors?: (Record<string, (string | null)> | null)
        lineage_descriptors?: (Record<string, (string | null)> | null)
    }
    
    export interface StatRequirement {
        attribute_name?: ("might" | "insight" | "nimbleness" | "destiny" | "savvy" | "expertise" | "tenacity" | "station" | "opulence" | "celebrity" | "integrity" | "allure" | "lineage" | null)
        min_value?: (number | null)
    }
    
    export interface Technology {
        name?: (string | null)
        description?: (string | null)
        impact?: (string | null)
        limitations?: (string | null)
        hazards: ((string | null)[] | null)
        factions: ((string | null)[] | null)
        traits: ((string | null)[] | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
    export interface UpOneLevel {
        tool_name: "up_one_level"
        reason?: (string | null)
    }
    
    export interface WorldContext {
        seed?: (partial_types.WorldSeed | null)
        technologies?: (partial_types.Technology | null)[]
        factions?: (partial_types.Faction | null)[]
        districts?: (partial_types.District | null)[]
        npcs?: (partial_types.NPC | null)[]
        tension_sliders?: (Record<string, (number | null)> | null)
        world_root?: (partial_types.Situation | null)
    }
    
    export interface WorldSeed {
        name?: (string | null)
        themes?: (string | null)[]
        high_concept?: (string | null)
        internal_hint: ((string | null) | null)
        internal_justification: ((string | null) | null)
    }
    
}