/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {ActionAndReasoning, Arc, ArcOutcome, ArcSeed, Choice, CreateArc, CreateArcOutcome, CreateChoices, CreateFaction, CreateMultipleSituations, CreateNPC, CreateSituation, CreateTechnology, District, DownOneLevel, Event, Faction, FindMissingSituations, GetSituationById, GoToArcRoot, GoToSituation, GoToWorldRoot, IdentifyNarrativeGaps, Item, JoinSituationOutput, Location, NPC, PlayerAttribute, PlayerProfile, PlayerState, PlayerStats, Quest, Resume, ShortActionAndReasoning, Situation, StatDescriptors, StatRequirement, Technology, UpOneLevel, WorldContext, WorldSeed} from "./types"
import type TypeBuilder from "./type_builder"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
  env?: Record<string, string | undefined>
}

export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async AugmentSituationChoices(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "AugmentSituationChoices",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async CheckChoiceAttributeNeeds(
      choice: Choice,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async CheckFactionNeeds(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "CheckFactionNeeds",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async CheckTechnologyNeeds(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "CheckTechnologyNeeds",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ExpandArcSituations(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "ExpandArcSituations",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateArcOutcomes(
      world_context: WorldContext,player_state: PlayerState,arc_seed: ArcSeed,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateArcOutcomes",
        {
          "world_context": world_context,"player_state": player_state,"arc_seed": arc_seed
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateArcSeed(
      world_context: WorldContext,player_state: PlayerState,title: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateArcSeed",
        {
          "world_context": world_context,"player_state": player_state,"title": title
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateArcTitles(
      world_context: WorldContext,player_state: PlayerState,count?: number | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateArcTitles",
        {
          "world_context": world_context,"player_state": player_state,"count": count?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateChoiceAttribute(
      choice: Choice,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateChoiceAttribute",
        {
          "choice": choice,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateChoiceSituationResult(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateChoiceSituationResult",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateDistricts(
      context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateDistricts",
        {
          "context": context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateEventsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateFaction(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateFaction",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateInitialAttributes(
      world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateInitialAttributes",
        {
          "world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateItemsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateJoinChoices(
      world_context: WorldContext,arcs: Arc[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateJoinChoices",
        {
          "world_context": world_context,"arcs": arcs
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateLocationsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateMissingSituationForChoice(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateMissingSituationForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateNPCsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GeneratePlayerProfile(
      world_context: WorldContext,stats: PlayerStats,attributes: PlayerAttribute[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,"stats": stats,"attributes": attributes
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateQuestsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateRootSituation(
      world_context: WorldContext,player_state: PlayerState,arc_seed: ArcSeed,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateRootSituation",
        {
          "world_context": world_context,"player_state": player_state,"arc_seed": arc_seed
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateSituationForChoice(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateTechnology(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateTechnology",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateWorldRootSituation(
      world_context: WorldContext,player_state: PlayerState,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateWorldRootSituation",
        {
          "world_context": world_context,"player_state": player_state
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GetDefaultStatDescriptors(
      
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GetDefaultStatDescriptors",
        {
          
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GetStatNarrative(
      stat_name: string,stat_value: number,descriptors: StatDescriptors,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GetStatNarrative",
        {
          "stat_name": stat_name,"stat_value": stat_value,"descriptors": descriptors
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async IdentifyMissingSituations(
      world_context: WorldContext,arcs: Arc[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "IdentifyMissingSituations",
        {
          "world_context": world_context,"arcs": arcs
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async InitializePlayerStats(
      world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "InitializePlayerStats",
        {
          "world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async SelectGenerationToolAndGenerate(
      previous_actions_and_reasoning: ShortActionAndReasoning[],world_context: WorldContext,player_state: PlayerState,current_situation: Situation,arcs_at_this_situation: Arc[],distance_from_completed_story: number,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "SelectGenerationToolAndGenerate",
        {
          "previous_actions_and_reasoning": previous_actions_and_reasoning,"world_context": world_context,"player_state": player_state,"current_situation": current_situation,"arcs_at_this_situation": arcs_at_this_situation,"distance_from_completed_story": distance_from_completed_story
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class AsyncHttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async AugmentSituationChoices(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "AugmentSituationChoices",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async CheckChoiceAttributeNeeds(
      choice: Choice,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async CheckFactionNeeds(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "CheckFactionNeeds",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async CheckTechnologyNeeds(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "CheckTechnologyNeeds",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ExpandArcSituations(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "ExpandArcSituations",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateArcOutcomes(
      world_context: WorldContext,player_state: PlayerState,arc_seed: ArcSeed,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateArcOutcomes",
        {
          "world_context": world_context,"player_state": player_state,"arc_seed": arc_seed
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateArcSeed(
      world_context: WorldContext,player_state: PlayerState,title: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateArcSeed",
        {
          "world_context": world_context,"player_state": player_state,"title": title
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateArcTitles(
      world_context: WorldContext,player_state: PlayerState,count?: number | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateArcTitles",
        {
          "world_context": world_context,"player_state": player_state,"count": count?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateChoiceAttribute(
      choice: Choice,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateChoiceAttribute",
        {
          "choice": choice,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateChoiceSituationResult(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateChoiceSituationResult",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateDistricts(
      context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateDistricts",
        {
          "context": context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateEventsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateFaction(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateFaction",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateInitialAttributes(
      world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateInitialAttributes",
        {
          "world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateItemsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateJoinChoices(
      world_context: WorldContext,arcs: Arc[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateJoinChoices",
        {
          "world_context": world_context,"arcs": arcs
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateLocationsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateMissingSituationForChoice(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateMissingSituationForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateNPCsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GeneratePlayerProfile(
      world_context: WorldContext,stats: PlayerStats,attributes: PlayerAttribute[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,"stats": stats,"attributes": attributes
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateQuestsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateRootSituation(
      world_context: WorldContext,player_state: PlayerState,arc_seed: ArcSeed,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateRootSituation",
        {
          "world_context": world_context,"player_state": player_state,"arc_seed": arc_seed
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateSituationForChoice(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateTechnology(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateTechnology",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateWorldRootSituation(
      world_context: WorldContext,player_state: PlayerState,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GenerateWorldRootSituation",
        {
          "world_context": world_context,"player_state": player_state
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GetDefaultStatDescriptors(
      
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GetDefaultStatDescriptors",
        {
          
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GetStatNarrative(
      stat_name: string,stat_value: number,descriptors: StatDescriptors,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "GetStatNarrative",
        {
          "stat_name": stat_name,"stat_value": stat_value,"descriptors": descriptors
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async IdentifyMissingSituations(
      world_context: WorldContext,arcs: Arc[],
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "IdentifyMissingSituations",
        {
          "world_context": world_context,"arcs": arcs
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async InitializePlayerStats(
      world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "InitializePlayerStats",
        {
          "world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async SelectGenerationToolAndGenerate(
      previous_actions_and_reasoning: ShortActionAndReasoning[],world_context: WorldContext,player_state: PlayerState,current_situation: Situation,arcs_at_this_situation: Arc[],distance_from_completed_story: number,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      const env = __baml_options__?.env ? { ...process.env, ...__baml_options__.env } : { ...process.env };
      return await this.runtime.buildRequest(
        "SelectGenerationToolAndGenerate",
        {
          "previous_actions_and_reasoning": previous_actions_and_reasoning,"world_context": world_context,"player_state": player_state,"current_situation": current_situation,"arcs_at_this_situation": arcs_at_this_situation,"distance_from_completed_story": distance_from_completed_story
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
        env
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}