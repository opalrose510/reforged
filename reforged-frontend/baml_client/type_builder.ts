/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import { FieldType } from '@boundaryml/baml/native'
import { TypeBuilder as _TypeBuilder, EnumBuilder, EnumViewer, ClassBuilder, ClassViewer } from '@boundaryml/baml/type_builder'
import { DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME } from "./globals"

export default class TypeBuilder {
    private tb: _TypeBuilder;
    
    Arc: ClassViewer<'Arc', "seed" | "situations" | "outcomes">;
    
    ArcOutcome: ClassViewer<'ArcOutcome', "id" | "description" | "internal_hint" | "internal_justification" | "tags" | "estimated_duration">;
    
    ArcSeed: ClassViewer<'ArcSeed', "title" | "core_conflict" | "theme_tags" | "tone" | "factions_involved" | "internal_hint" | "internal_justification">;
    
    BridgeNode: ClassViewer<'BridgeNode', "source_situation_id" | "target_situation_id" | "shared_context_tags" | "shared_factions" | "shared_locations" | "shared_themes" | "internal_hint" | "internal_justification">;
    
    BridgeableSituation: ClassViewer<'BridgeableSituation', "id" | "context_tags" | "factions" | "locations" | "themes" | "internal_hint" | "internal_justification">;
    
    Choice: ClassViewer<'Choice', "id" | "text" | "dialogue_response" | "choice_type" | "player_perspective" | "emotional_tone" | "body_language" | "requirements" | "attributes_gained" | "attributes_lost" | "stat_changes" | "next_situation_id" | "internal_hint" | "internal_justification" | "new_npcs" | "new_factions" | "new_technologies">;
    
    District: ClassViewer<'District', "id" | "traits" | "hazards" | "factions" | "description" | "internal_hint" | "internal_justification">;
    
    Event: ClassViewer<'Event', "id" | "title" | "description" | "type" | "triggers" | "consequences" | "affected_npcs" | "affected_locations" | "internal_hint" | "internal_justification">;
    
    Faction: ClassViewer<'Faction', "name" | "ideology" | "territory" | "influence_level" | "relationships" | "internal_hint" | "internal_justification">;
    
    Item: ClassViewer<'Item', "id" | "name" | "type" | "description" | "effects" | "requirements" | "rarity" | "internal_hint" | "internal_justification">;
    
    Location: ClassViewer<'Location', "id" | "name" | "type" | "description" | "traits" | "hazards" | "connected_locations" | "npcs_present" | "internal_hint" | "internal_justification">;
    
    NPC: ClassViewer<'NPC', "id" | "name" | "role" | "description" | "personality_traits" | "relationships" | "faction_affiliations" | "location_id" | "internal_hint" | "internal_justification">;
    
    PlayerAttribute: ClassViewer<'PlayerAttribute', "id" | "type" | "description" | "stat_mods">;
    
    PlayerProfile: ClassViewer<'PlayerProfile', "narrative_summary" | "key_traits" | "background_hints">;
    
    PlayerState: ClassViewer<'PlayerState', "name" | "stats" | "attributes" | "profile" | "history">;
    
    PlayerStats: ClassViewer<'PlayerStats', "might" | "insight" | "nimbleness" | "destiny" | "savvy" | "expertise" | "tenacity" | "station" | "opulence" | "celebrity" | "integrity" | "allure" | "lineage">;
    
    Quest: ClassViewer<'Quest', "id" | "title" | "description" | "type" | "objectives" | "rewards" | "requirements" | "related_npcs" | "related_locations" | "internal_hint" | "internal_justification">;
    
    Resume: ClassViewer<'Resume', "name" | "email" | "experience" | "skills">;
    
    Situation: ClassViewer<'Situation', "id" | "description" | "player_perspective_description" | "choices" | "stat_requirements" | "consequences" | "bridgeable" | "context_tags" | "internal_hint" | "internal_justification">;
    
    StatDescriptors: ClassViewer<'StatDescriptors', "might_descriptors" | "insight_descriptors" | "nimbleness_descriptors" | "destiny_descriptors" | "savvy_descriptors" | "expertise_descriptors" | "tenacity_descriptors" | "station_descriptors" | "opulence_descriptors" | "celebrity_descriptors" | "integrity_descriptors" | "allure_descriptors" | "lineage_descriptors">;
    
    StatRequirement: ClassViewer<'StatRequirement', "attribute_name" | "min_value">;
    
    Technology: ClassViewer<'Technology', "name" | "description" | "impact" | "limitations" | "internal_hint" | "internal_justification">;
    
    WorldContext: ClassViewer<'WorldContext', "seed" | "technologies" | "factions" | "districts" | "npcs" | "tension_sliders">;
    
    WorldSeed: ClassViewer<'WorldSeed', "name" | "themes" | "high_concept" | "internal_hint" | "internal_justification">;
    
    

    constructor() {
        this.tb = new _TypeBuilder({
          classes: new Set([
            "Arc","ArcOutcome","ArcSeed","BridgeNode","BridgeableSituation","Choice","District","Event","Faction","Item","Location","NPC","PlayerAttribute","PlayerProfile","PlayerState","PlayerStats","Quest","Resume","Situation","StatDescriptors","StatRequirement","Technology","WorldContext","WorldSeed",
          ]),
          enums: new Set([
            
          ]),
          runtime: DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME
        });
        
        this.Arc = this.tb.classViewer("Arc", [
          "seed","situations","outcomes",
        ]);
        
        this.ArcOutcome = this.tb.classViewer("ArcOutcome", [
          "id","description","internal_hint","internal_justification","tags","estimated_duration",
        ]);
        
        this.ArcSeed = this.tb.classViewer("ArcSeed", [
          "title","core_conflict","theme_tags","tone","factions_involved","internal_hint","internal_justification",
        ]);
        
        this.BridgeNode = this.tb.classViewer("BridgeNode", [
          "source_situation_id","target_situation_id","shared_context_tags","shared_factions","shared_locations","shared_themes","internal_hint","internal_justification",
        ]);
        
        this.BridgeableSituation = this.tb.classViewer("BridgeableSituation", [
          "id","context_tags","factions","locations","themes","internal_hint","internal_justification",
        ]);
        
        this.Choice = this.tb.classViewer("Choice", [
          "id","text","dialogue_response","choice_type","player_perspective","emotional_tone","body_language","requirements","attributes_gained","attributes_lost","stat_changes","next_situation_id","internal_hint","internal_justification","new_npcs","new_factions","new_technologies",
        ]);
        
        this.District = this.tb.classViewer("District", [
          "id","traits","hazards","factions","description","internal_hint","internal_justification",
        ]);
        
        this.Event = this.tb.classViewer("Event", [
          "id","title","description","type","triggers","consequences","affected_npcs","affected_locations","internal_hint","internal_justification",
        ]);
        
        this.Faction = this.tb.classViewer("Faction", [
          "name","ideology","territory","influence_level","relationships","internal_hint","internal_justification",
        ]);
        
        this.Item = this.tb.classViewer("Item", [
          "id","name","type","description","effects","requirements","rarity","internal_hint","internal_justification",
        ]);
        
        this.Location = this.tb.classViewer("Location", [
          "id","name","type","description","traits","hazards","connected_locations","npcs_present","internal_hint","internal_justification",
        ]);
        
        this.NPC = this.tb.classViewer("NPC", [
          "id","name","role","description","personality_traits","relationships","faction_affiliations","location_id","internal_hint","internal_justification",
        ]);
        
        this.PlayerAttribute = this.tb.classViewer("PlayerAttribute", [
          "id","type","description","stat_mods",
        ]);
        
        this.PlayerProfile = this.tb.classViewer("PlayerProfile", [
          "narrative_summary","key_traits","background_hints",
        ]);
        
        this.PlayerState = this.tb.classViewer("PlayerState", [
          "name","stats","attributes","profile","history",
        ]);
        
        this.PlayerStats = this.tb.classViewer("PlayerStats", [
          "might","insight","nimbleness","destiny","savvy","expertise","tenacity","station","opulence","celebrity","integrity","allure","lineage",
        ]);
        
        this.Quest = this.tb.classViewer("Quest", [
          "id","title","description","type","objectives","rewards","requirements","related_npcs","related_locations","internal_hint","internal_justification",
        ]);
        
        this.Resume = this.tb.classViewer("Resume", [
          "name","email","experience","skills",
        ]);
        
        this.Situation = this.tb.classViewer("Situation", [
          "id","description","player_perspective_description","choices","stat_requirements","consequences","bridgeable","context_tags","internal_hint","internal_justification",
        ]);
        
        this.StatDescriptors = this.tb.classViewer("StatDescriptors", [
          "might_descriptors","insight_descriptors","nimbleness_descriptors","destiny_descriptors","savvy_descriptors","expertise_descriptors","tenacity_descriptors","station_descriptors","opulence_descriptors","celebrity_descriptors","integrity_descriptors","allure_descriptors","lineage_descriptors",
        ]);
        
        this.StatRequirement = this.tb.classViewer("StatRequirement", [
          "attribute_name","min_value",
        ]);
        
        this.Technology = this.tb.classViewer("Technology", [
          "name","description","impact","limitations","internal_hint","internal_justification",
        ]);
        
        this.WorldContext = this.tb.classViewer("WorldContext", [
          "seed","technologies","factions","districts","npcs","tension_sliders",
        ]);
        
        this.WorldSeed = this.tb.classViewer("WorldSeed", [
          "name","themes","high_concept","internal_hint","internal_justification",
        ]);
        
        
    }

    __tb() {
      return this.tb._tb();
    }

    string(): FieldType {
        return this.tb.string()
    }

    literalString(value: string): FieldType {
        return this.tb.literalString(value)
    }

    literalInt(value: number): FieldType {
        return this.tb.literalInt(value)
    }

    literalBool(value: boolean): FieldType {
        return this.tb.literalBool(value)
    }

    int(): FieldType {
        return this.tb.int()
    }

    float(): FieldType {
        return this.tb.float()
    }

    bool(): FieldType {
        return this.tb.bool()
    }

    list(type: FieldType): FieldType {
        return this.tb.list(type)
    }

    null(): FieldType {
        return this.tb.null()
    }

    map(key: FieldType, value: FieldType): FieldType {
        return this.tb.map(key, value)
    }

    union(types: FieldType[]): FieldType {
        return this.tb.union(types)
    }

    addClass<Name extends string>(name: Name): ClassBuilder<Name> {
        return this.tb.addClass(name);
    }

    addEnum<Name extends string>(name: Name): EnumBuilder<Name> {
        return this.tb.addEnum(name);
    }

    addBaml(baml: string): void {
        this.tb.addBaml(baml);
    }
}