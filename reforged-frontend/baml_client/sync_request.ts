/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {Arc, ArcOutcome, ArcSeed, BridgeNode, BridgeableSituation, Choice, District, Event, Faction, Item, Location, NPC, PlayerAttribute, PlayerProfile, PlayerState, PlayerStats, Quest, Resume, Situation, StatDescriptors, StatRequirement, Technology, WorldContext, WorldSeed} from "./types"
import type TypeBuilder from "./type_builder"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
}

export class HttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AugmentSituationChoices(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AugmentSituationChoices",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckBridgeAttributeNeeds(
      bridge_node: BridgeNode,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CheckBridgeAttributeNeeds",
        {
          "bridge_node": bridge_node,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckChoiceAttributeNeeds(
      choice: Choice,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckFactionNeeds(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CheckFactionNeeds",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckTechnologyNeeds(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CheckTechnologyNeeds",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateFaction(
      world_context: WorldContext,current_situation: Situation,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CreateFaction",
        {
          "world_context": world_context,"current_situation": current_situation,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateNPC(
      world_context: WorldContext,current_situation: Situation,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CreateNPC",
        {
          "world_context": world_context,"current_situation": current_situation,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateTechnology(
      world_context: WorldContext,current_situation: Situation,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CreateTechnology",
        {
          "world_context": world_context,"current_situation": current_situation,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExpandArcSituations(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ExpandArcSituations",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  FindBridgeConnections(
      bridgeable_situations: BridgeableSituation[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "FindBridgeConnections",
        {
          "bridgeable_situations": bridgeable_situations
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateArcSeed(
      world_context: WorldContext,player_state: PlayerState,title: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateArcSeed",
        {
          "world_context": world_context,"player_state": player_state,"title": title
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateArcTitles(
      world_context: WorldContext,player_state: PlayerState,count?: number | null,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateArcTitles",
        {
          "world_context": world_context,"player_state": player_state,"count": count?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateBridgeAttribute(
      bridge_node: BridgeNode,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateBridgeAttribute",
        {
          "bridge_node": bridge_node,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateBridgeSituations(
      world_context: WorldContext,player_state: PlayerState,bridge_nodes: BridgeNode[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateBridgeSituations",
        {
          "world_context": world_context,"player_state": player_state,"bridge_nodes": bridge_nodes
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateChoiceAttribute(
      choice: Choice,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateChoiceAttribute",
        {
          "choice": choice,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateChoiceSituationResult(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateChoiceSituationResult",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateDistricts(
      context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateDistricts",
        {
          "context": context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateEventsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateFaction(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateFaction",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateInitialAttributes(
      world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateInitialAttributes",
        {
          "world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateItemsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateLocationsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateMissingSituationsForChoice(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateMissingSituationsForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateNPCsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GeneratePlayerProfile(
      world_context: WorldContext,stats: PlayerStats,attributes: PlayerAttribute[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,"stats": stats,"attributes": attributes
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateQuestsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateRootSituation(
      world_context: WorldContext,player_state: PlayerState,arc_seed: ArcSeed,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateRootSituation",
        {
          "world_context": world_context,"player_state": player_state,"arc_seed": arc_seed
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateSituationForChoice(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateTechnology(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateTechnology",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetDefaultStatDescriptors(
      
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GetDefaultStatDescriptors",
        {
          
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetStatNarrative(
      stat_name: string,stat_value: number,descriptors: StatDescriptors,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GetStatNarrative",
        {
          "stat_name": stat_name,"stat_value": stat_value,"descriptors": descriptors
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyBridgeableSituations(
      arcs: Arc[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "IdentifyBridgeableSituations",
        {
          "arcs": arcs
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyMissingSituations(
      world_context: WorldContext,arcs: Arc[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "IdentifyMissingSituations",
        {
          "world_context": world_context,"arcs": arcs
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  InitializePlayerStats(
      world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "InitializePlayerStats",
        {
          "world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  LegacySelectGenerationTool(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "LegacySelectGenerationTool",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SelectGenerationTool(
      world_context: WorldContext,player_state: PlayerState,current_situation: Situation,arc: Arc,distance_from_completed_story: number,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "SelectGenerationTool",
        {
          "world_context": world_context,"player_state": player_state,"current_situation": current_situation,"arc": arc,"distance_from_completed_story": distance_from_completed_story
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ValidateBridgeConnections(
      bridge_nodes: BridgeNode[],arcs: Arc[],world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ValidateBridgeConnections",
        {
          "bridge_nodes": bridge_nodes,"arcs": arcs,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class HttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AugmentSituationChoices(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "AugmentSituationChoices",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckBridgeAttributeNeeds(
      bridge_node: BridgeNode,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CheckBridgeAttributeNeeds",
        {
          "bridge_node": bridge_node,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckChoiceAttributeNeeds(
      choice: Choice,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CheckChoiceAttributeNeeds",
        {
          "choice": choice,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckFactionNeeds(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CheckFactionNeeds",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CheckTechnologyNeeds(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CheckTechnologyNeeds",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateFaction(
      world_context: WorldContext,current_situation: Situation,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CreateFaction",
        {
          "world_context": world_context,"current_situation": current_situation,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateNPC(
      world_context: WorldContext,current_situation: Situation,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CreateNPC",
        {
          "world_context": world_context,"current_situation": current_situation,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  CreateTechnology(
      world_context: WorldContext,current_situation: Situation,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "CreateTechnology",
        {
          "world_context": world_context,"current_situation": current_situation,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ExpandArcSituations(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ExpandArcSituations",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  FindBridgeConnections(
      bridgeable_situations: BridgeableSituation[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "FindBridgeConnections",
        {
          "bridgeable_situations": bridgeable_situations
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateArcSeed(
      world_context: WorldContext,player_state: PlayerState,title: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateArcSeed",
        {
          "world_context": world_context,"player_state": player_state,"title": title
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateArcTitles(
      world_context: WorldContext,player_state: PlayerState,count?: number | null,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateArcTitles",
        {
          "world_context": world_context,"player_state": player_state,"count": count?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateBridgeAttribute(
      bridge_node: BridgeNode,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateBridgeAttribute",
        {
          "bridge_node": bridge_node,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateBridgeSituations(
      world_context: WorldContext,player_state: PlayerState,bridge_nodes: BridgeNode[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateBridgeSituations",
        {
          "world_context": world_context,"player_state": player_state,"bridge_nodes": bridge_nodes
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateChoiceAttribute(
      choice: Choice,world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateChoiceAttribute",
        {
          "choice": choice,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateChoiceSituationResult(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateChoiceSituationResult",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateDistricts(
      context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateDistricts",
        {
          "context": context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateEventsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateEventsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateFaction(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateFaction",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateInitialAttributes(
      world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateInitialAttributes",
        {
          "world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateItemsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateItemsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateLocationsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateLocationsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateMissingSituationsForChoice(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateMissingSituationsForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateNPCsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateNPCsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GeneratePlayerProfile(
      world_context: WorldContext,stats: PlayerStats,attributes: PlayerAttribute[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GeneratePlayerProfile",
        {
          "world_context": world_context,"stats": stats,"attributes": attributes
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateQuestsForSituation(
      world_context: WorldContext,situation: Situation,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateQuestsForSituation",
        {
          "world_context": world_context,"situation": situation
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateRootSituation(
      world_context: WorldContext,player_state: PlayerState,arc_seed: ArcSeed,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateRootSituation",
        {
          "world_context": world_context,"player_state": player_state,"arc_seed": arc_seed
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateSituationForChoice(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,choice: Choice,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateSituationForChoice",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc,"choice": choice
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateTechnology(
      context: WorldContext,situation_description: string,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GenerateTechnology",
        {
          "context": context,"situation_description": situation_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetDefaultStatDescriptors(
      
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GetDefaultStatDescriptors",
        {
          
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GetStatNarrative(
      stat_name: string,stat_value: number,descriptors: StatDescriptors,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "GetStatNarrative",
        {
          "stat_name": stat_name,"stat_value": stat_value,"descriptors": descriptors
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyBridgeableSituations(
      arcs: Arc[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "IdentifyBridgeableSituations",
        {
          "arcs": arcs
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  IdentifyMissingSituations(
      world_context: WorldContext,arcs: Arc[],
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "IdentifyMissingSituations",
        {
          "world_context": world_context,"arcs": arcs
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  InitializePlayerStats(
      world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "InitializePlayerStats",
        {
          "world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  LegacySelectGenerationTool(
      world_context: WorldContext,player_state: PlayerState,arc: Arc,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "LegacySelectGenerationTool",
        {
          "world_context": world_context,"player_state": player_state,"arc": arc
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  SelectGenerationTool(
      world_context: WorldContext,player_state: PlayerState,current_situation: Situation,arc: Arc,distance_from_completed_story: number,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "SelectGenerationTool",
        {
          "world_context": world_context,"player_state": player_state,"current_situation": current_situation,"arc": arc,"distance_from_completed_story": distance_from_completed_story
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ValidateBridgeConnections(
      bridge_nodes: BridgeNode[],arcs: Arc[],world_context: WorldContext,
      __baml_options__?: BamlCallOptions
  ): HTTPRequest {
    try {
      return this.runtime.buildRequestSync(
        "ValidateBridgeConnections",
        {
          "bridge_nodes": bridge_nodes,"arcs": arcs,"world_context": world_context
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}